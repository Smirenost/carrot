/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./build/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./build/src/NEAT.js":
/*!***************************!*\
  !*** ./build/src/NEAT.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NEAT = void 0;\r\nconst TimSort = __importStar(__webpack_require__(/*! timsort */ \"./node_modules/timsort/index.js\"));\r\nconst Species_1 = __webpack_require__(/*! ./architecture/Species */ \"./build/src/architecture/Species.js\");\r\nconst Mutation_1 = __webpack_require__(/*! ./methods/Mutation */ \"./build/src/methods/Mutation.js\");\r\nconst Utils_1 = __webpack_require__(/*! ./utils/Utils */ \"./build/src/utils/Utils.js\");\r\n/**\r\n * Runs the NEAT algorithm on group of neural networks.\r\n *\r\n * @constructs Neat\r\n */\r\nclass NEAT {\r\n    /**\r\n     * Constructs a NEAT object.\r\n     *\r\n     * @param options\r\n     */\r\n    constructor(options) {\r\n        if (!options.fitnessFunction) {\r\n            throw new ReferenceError('No fitness function given!');\r\n        }\r\n        this._options = options;\r\n        this.population = [];\r\n        this.species = new Set();\r\n        for (let i = 0; i < this.options.populationSize; i++) {\r\n            this.population.push(this.options.template.deepCopy());\r\n        }\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set options(value) {\r\n        this._options = value;\r\n    }\r\n    /**\r\n     * Mutate a network with a random mutation from the allowed array.\r\n     *\r\n     * @param network The network which will be mutated.\r\n     */\r\n    mutateRandom(network) {\r\n        const allowed = this.options.mutations.filter(method => {\r\n            return (method.constructor.name !== Mutation_1.AddNodeMutation.constructor.name ||\r\n                network.nodes.length < this.options.maxNodes ||\r\n                method.constructor.name !== Mutation_1.AddConnectionMutation.constructor.name ||\r\n                network.connections.size < this.options.maxConnections ||\r\n                method.constructor.name !== Mutation_1.AddGateMutation.constructor.name ||\r\n                network.gates.size < this.options.maxGates);\r\n        });\r\n        network.mutate(Utils_1.pickRandom(allowed), {\r\n            allowedActivations: this.options.activations,\r\n        });\r\n    }\r\n    /**\r\n     * Evaluates, selects, breeds and mutates population\r\n     *\r\n     * @returns {Network} Fittest network\r\n     */\r\n    evolve() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.genSpecies();\r\n            yield this.evaluate();\r\n            this.sort();\r\n            this.species.forEach(species => species.evaluateScore());\r\n            this.kill(1 - this.options.survivors);\r\n            this.removeExtinctSpecies();\r\n            this.reproduce();\r\n            // const elitists: Network[] = this.population.splice(0, this.options.elitism);\r\n            this.mutate();\r\n            // this.population.splice(0, 0, ...elitists);\r\n            if (this.options.training) {\r\n                for (const genome of this.population) {\r\n                    genome.train(this.options.training);\r\n                }\r\n            }\r\n            // evaluate the population\r\n            yield this.evaluate();\r\n            // Sort in order of fitness (fittest first)\r\n            this.sort();\r\n            const fittest = this.population[0].deepCopy();\r\n            fittest.score = this.population[0].score;\r\n            if (this.options.log > 0 &&\r\n                this.options.generation % this.options.log === 0) {\r\n                console.log('\\n---------------------------');\r\n                console.log('Generation: ' +\r\n                    this.options.generation +\r\n                    '; Species: ' +\r\n                    this.species.size +\r\n                    '; Score: ' +\r\n                    this.population[0].score);\r\n                for (const species of this.species) {\r\n                    species.print();\r\n                }\r\n            }\r\n            // Reset the scores\r\n            this.population.forEach(genome => (genome.score = undefined));\r\n            this.options.generation++;\r\n            return fittest;\r\n        });\r\n    }\r\n    /**\r\n     * Mutates the given (or current) population\r\n     *\r\n     * @param {Mutation} [method] A mutation method to mutate the population with. When not specified will pick a random mutation from the set allowed mutations.\r\n     */\r\n    mutate(method) {\r\n        // Elitist genomes should not be included\r\n        this.population\r\n            .filter(() => Math.random() <= this.options.mutationRate)\r\n            .forEach(genome => {\r\n            for (let i = 0; i < this.options.mutationAmount; i++) {\r\n                if (method) {\r\n                    genome.mutate(method);\r\n                }\r\n                else {\r\n                    this.mutateRandom(genome);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Evaluates the current population, basically sets their `.score` property\r\n     *\r\n     * @return {Network} Fittest Network\r\n     */\r\n    evaluate() {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.options.clear) {\r\n                this.population.forEach(genome => genome.clear());\r\n            }\r\n            yield ((_b = (_a = this.options).fitnessFunction) === null || _b === void 0 ? void 0 : _b.call(_a, this.population, this.options.dataset));\r\n            // Sort the population in order of fitness\r\n            this.sort();\r\n            return this.population[0];\r\n        });\r\n    }\r\n    /**\r\n     * Sorts the population by score (descending)\r\n     * @todo implement a quicksort algorithm in utils\r\n     */\r\n    sort() {\r\n        TimSort.sort(this.population, (a, b) => {\r\n            return a.score === undefined || b.score === undefined\r\n                ? 0\r\n                : b.score - a.score;\r\n        });\r\n    }\r\n    /**\r\n     * Returns the fittest genome of the current population\r\n     *\r\n     * @returns {Network} Current population's fittest genome\r\n     */\r\n    getFittest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.population[this.population.length - 1].score === undefined) {\r\n                yield this.evaluate();\r\n            }\r\n            this.sort();\r\n            return this.population[0];\r\n        });\r\n    }\r\n    /**\r\n     * Returns the average fitness of the current population\r\n     *\r\n     * @returns {number} Average fitness of the current population\r\n     */\r\n    getAverage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.population[this.population.length - 1].score === undefined) {\r\n                yield this.evaluate();\r\n            }\r\n            let score = 0;\r\n            this.population\r\n                .map(genome => genome.score)\r\n                .forEach(val => (score += val !== null && val !== void 0 ? val : 0));\r\n            return score / this.population.length;\r\n        });\r\n    }\r\n    /**\r\n     * Replace the whole population with the new genomes\r\n     * @param genomes the genomes which replace the population\r\n     */\r\n    replacePopulation(genomes) {\r\n        this.population = genomes;\r\n        this.options.populationSize = genomes.length;\r\n    }\r\n    /**\r\n     * Reproduce the population, by replacing the killed networks\r\n     * @private\r\n     */\r\n    reproduce() {\r\n        const speciesArr = Array.from(this.species);\r\n        if (speciesArr.length === 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.population.length; i++) {\r\n            if (this.population[i].species === null) {\r\n                const selectedSpecies = this.options.selection.select(speciesArr);\r\n                this.population[i] = selectedSpecies.breed();\r\n                selectedSpecies.forcePut(this.population[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove empty species\r\n     * @private\r\n     */\r\n    removeExtinctSpecies() {\r\n        for (const species of Array.from(this.species)) {\r\n            if (species.size() <= 1 ||\r\n                species.stagnation > this.options.maxStagnation) {\r\n                species.members.forEach(member => (member.species = null));\r\n                this.species.delete(species);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Kill bad networks\r\n     * @param killRate\r\n     * @private\r\n     */\r\n    kill(killRate) {\r\n        this.species.forEach(species => species.kill(killRate));\r\n    }\r\n    /**\r\n     * Generate species\r\n     * @private\r\n     */\r\n    genSpecies() {\r\n        this.species.forEach(species => species.reset());\r\n        this.population\r\n            .filter(genome => genome.species === null)\r\n            .forEach(genome => {\r\n            let found = false;\r\n            for (const species of Array.from(this.species)) {\r\n                if (species.put(genome, this.options.c1, this.options.c2, this.options.c3, this.options.speciesDistanceThreshold)) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                this.species.add(new Species_1.Species(genome));\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.NEAT = NEAT;\r\n//# sourceMappingURL=NEAT.js.map\n\n//# sourceURL=webpack:///./build/src/NEAT.js?");

/***/ }),

/***/ "./build/src/architecture/Architect.js":
/*!*********************************************!*\
  !*** ./build/src/architecture/Architect.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Architect = void 0;\r\nconst InputLayer_1 = __webpack_require__(/*! ./Layers/CoreLayers/InputLayer */ \"./build/src/architecture/Layers/CoreLayers/InputLayer.js\");\r\nconst OutputLayer_1 = __webpack_require__(/*! ./Layers/CoreLayers/OutputLayer */ \"./build/src/architecture/Layers/CoreLayers/OutputLayer.js\");\r\nconst Layer_1 = __webpack_require__(/*! ./Layers/Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\nconst Network_1 = __webpack_require__(/*! ./Network */ \"./build/src/architecture/Network.js\");\r\n/**\r\n * Architect constructs multilayer networks with various types of layers.\r\n */\r\nclass Architect {\r\n    constructor() {\r\n        this.layers = [];\r\n    }\r\n    /**\r\n     * Adds a layer to the architect.\r\n     *\r\n     * @param layer The layer\r\n     * @param incomingConnectionType The incoming connection to this layer\r\n     * @returns this object to function as builder class\r\n     */\r\n    addLayer(layer, incomingConnectionType) {\r\n        const connectionType = incomingConnectionType !== null && incomingConnectionType !== void 0 ? incomingConnectionType : layer.getDefaultIncomingConnectionType();\r\n        if (!layer.connectionTypeisAllowed(connectionType)) {\r\n            throw new ReferenceError('Connection type ' +\r\n                connectionType +\r\n                ' is not allowed at layer ' +\r\n                layer.constructor.name);\r\n        }\r\n        this.layers.push({\r\n            layer,\r\n            incomingConnectionType: connectionType,\r\n        });\r\n        return this; // function as builder class\r\n    }\r\n    /**\r\n     * Build the network from the layers added to the architect.\r\n     *\r\n     * @returns the constructed network\r\n     */\r\n    buildModel() {\r\n        if (!(this.layers[0].layer instanceof InputLayer_1.InputLayer)) {\r\n            throw new ReferenceError('First layer has to be a InputLayer! Currently is: ' +\r\n                this.layers[0].layer.constructor.name);\r\n        }\r\n        if (!(this.layers[this.layers.length - 1].layer instanceof OutputLayer_1.OutputLayer)) {\r\n            throw new ReferenceError('Last layer has to be a OutputLayer! Currently is: ' +\r\n                this.layers[this.layers.length - 1].layer.constructor.name);\r\n        }\r\n        const inputSize = this.layers[0].layer.nodes.length;\r\n        const outputSize = this.layers[this.layers.length - 1].layer.nodes\r\n            .length;\r\n        const network = new Network_1.Network(inputSize, outputSize);\r\n        network.nodes = [];\r\n        network.connections.clear();\r\n        for (let i = 0; i < this.layers.length - 1; i++) {\r\n            Layer_1.Layer.connect(this.layers[i].layer, this.layers[i + 1].layer, this.layers[i + 1].incomingConnectionType).forEach(conn => network.connections.add(conn));\r\n            network.nodes.push(...this.layers[i].layer.nodes);\r\n            this.layers[i].layer.connections.forEach(conn => network.connections.add(conn));\r\n            this.layers[i].layer.gates.forEach(conn => network.gates.add(conn));\r\n        }\r\n        network.nodes.push(...this.layers[this.layers.length - 1].layer.nodes);\r\n        return network;\r\n    }\r\n}\r\nexports.Architect = Architect;\r\n//# sourceMappingURL=Architect.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Architect.js?");

/***/ }),

/***/ "./build/src/architecture/Connection.js":
/*!**********************************************!*\
  !*** ./build/src/architecture/Connection.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Connection = void 0;\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\n/**\r\n * A connection instance describes the connection between two nodes.\r\n */\r\nclass Connection {\r\n    constructor(from, to, weight, gateNode) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.weight = weight !== null && weight !== void 0 ? weight : 0;\r\n        this.gain = 1;\r\n        this.eligibility = 0;\r\n        this.deltaWeightsPrevious = 0;\r\n        this.deltaWeightsTotal = 0;\r\n        this.xTrace = new Map();\r\n        if (gateNode) {\r\n            this.gateNode = gateNode;\r\n            gateNode.addGate(this);\r\n        }\r\n        else {\r\n            this.gateNode = null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the connection as a JSON\r\n     *\r\n     * @return Connection as a JSON\r\n     */\r\n    toJSON() {\r\n        let xTracesTransformed;\r\n        if (this.xTrace.size > 0) {\r\n            xTracesTransformed = new Map();\r\n            this.xTrace.forEach((value, key) => {\r\n                xTracesTransformed === null || xTracesTransformed === void 0 ? void 0 : xTracesTransformed.set(key.index, value);\r\n            });\r\n        }\r\n        else {\r\n            xTracesTransformed = null;\r\n        }\r\n        return {\r\n            fromIndex: this.from.index,\r\n            toIndex: this.to.index,\r\n            gateNodeIndex: this.gateNode === null ? null : this.gateNode.index,\r\n            weight: this.weight,\r\n            xTraces: xTracesTransformed,\r\n        };\r\n    }\r\n    /**\r\n     * Get the innovation ID for this connection\r\n     */\r\n    getInnovationID() {\r\n        return Utils_1.pairing(this.from.index, this.to.index);\r\n    }\r\n}\r\nexports.Connection = Connection;\r\n//# sourceMappingURL=Connection.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Connection.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/CoreLayers/ActivationLayer.js":
/*!*********************************************************************!*\
  !*** ./build/src/architecture/Layers/CoreLayers/ActivationLayer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ActivationLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst ActivationNode_1 = __webpack_require__(/*! ../../Nodes/ActivationNode */ \"./build/src/architecture/Nodes/ActivationNode.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Activation layer\r\n */\r\nclass ActivationLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activation = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Logistic;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new ActivationNode_1.ActivationNode().setActivationType(activation));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @param type the type to check\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed(type) {\r\n        return type === ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n}\r\nexports.ActivationLayer = ActivationLayer;\r\n//# sourceMappingURL=ActivationLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/CoreLayers/ActivationLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/CoreLayers/DenseLayer.js":
/*!****************************************************************!*\
  !*** ./build/src/architecture/Layers/CoreLayers/DenseLayer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DenseLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Dense layer\r\n */\r\nclass DenseLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activation = (_a = options.activationType) !== null && _a !== void 0 ? _a : activations_1.Logistic;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setActivationType(activation));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.DenseLayer = DenseLayer;\r\n//# sourceMappingURL=DenseLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/CoreLayers/DenseLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/CoreLayers/DropoutLayer.js":
/*!******************************************************************!*\
  !*** ./build/src/architecture/Layers/CoreLayers/DropoutLayer.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DropoutLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst DropoutNode_1 = __webpack_require__(/*! ../../Nodes/DropoutNode */ \"./build/src/architecture/Nodes/DropoutNode.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Dropout layer\r\n */\r\nclass DropoutLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a, _b;\r\n        super(outputSize);\r\n        const activation = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        const probability = (_b = options.probability) !== null && _b !== void 0 ? _b : 0.1;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new DropoutNode_1.DropoutNode(probability).setActivationType(activation));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @param type the type to check\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed(type) {\r\n        return type === ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n}\r\nexports.DropoutLayer = DropoutLayer;\r\n//# sourceMappingURL=DropoutLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/CoreLayers/DropoutLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/CoreLayers/InputLayer.js":
/*!****************************************************************!*\
  !*** ./build/src/architecture/Layers/CoreLayers/InputLayer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.InputLayer = void 0;\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\nconst NoiseLayer_1 = __webpack_require__(/*! ../NoiseLayers/NoiseLayer */ \"./build/src/architecture/Layers/NoiseLayers/NoiseLayer.js\");\r\n/**\r\n * Input layer\r\n */\r\nclass InputLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        super(outputSize);\r\n        for (let i = 0; i < outputSize; i++) {\r\n            const node = new Node_1.Node(NodeType_1.NodeType.INPUT);\r\n            this.nodes.push(node);\r\n        }\r\n        if (options.noise) {\r\n            const noiseLayer = new NoiseLayer_1.NoiseLayer(options.noise);\r\n            noiseLayer.outputNodes.forEach(node => this.outputNodes.add(node));\r\n            this.connections.push(...Layer_1.Layer.connect(this.nodes, noiseLayer, noiseLayer.getDefaultIncomingConnectionType()));\r\n        }\r\n        else {\r\n            this.nodes.forEach(node => this.outputNodes.add(node));\r\n        }\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.NO_CONNECTION;\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @param type the type to check\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed(type) {\r\n        return type === ConnectionType_1.ConnectionType.NO_CONNECTION;\r\n    }\r\n}\r\nexports.InputLayer = InputLayer;\r\n//# sourceMappingURL=InputLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/CoreLayers/InputLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/CoreLayers/OutputLayer.js":
/*!*****************************************************************!*\
  !*** ./build/src/architecture/Layers/CoreLayers/OutputLayer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OutputLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Output layer\r\n */\r\nclass OutputLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activation = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.OUTPUT).setActivationType(activation));\r\n        }\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n    /**\r\n     * A outgoing connection is not allowed for an output layer!\r\n     */\r\n    connect() {\r\n        throw new ReferenceError('Could not connect an OutputLayer!');\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.OutputLayer = OutputLayer;\r\n//# sourceMappingURL=OutputLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/CoreLayers/OutputLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/Layer.js":
/*!************************************************!*\
  !*** ./build/src/architecture/Layers/Layer.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Layer = void 0;\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst GatingType_1 = __webpack_require__(/*! ../../enums/GatingType */ \"./build/src/enums/GatingType.js\");\r\n/**\r\n * Parent class for layers.\r\n */\r\nclass Layer {\r\n    constructor(outputSize) {\r\n        this.outputSize = outputSize;\r\n        this.nodes = [];\r\n        this.inputNodes = new Set();\r\n        this.outputNodes = new Set();\r\n        this.connections = [];\r\n        this.gates = [];\r\n    }\r\n    /**\r\n     * Connect two Layers or sets of Nodes.\r\n     *\r\n     * @param from origin Nodes / Layer\r\n     * @param to destination Nodes / Layer\r\n     * @param connectionType The type of connection\r\n     * @param weight the initial weights for all new connections\r\n     *\r\n     * @returns all created connections\r\n     */\r\n    static connect(from, to, connectionType = ConnectionType_1.ConnectionType.ALL_TO_ALL, weight = 1) {\r\n        if (connectionType === ConnectionType_1.ConnectionType.NO_CONNECTION) {\r\n            throw new ReferenceError(\"Cannot connect with 'NO_CONNECTION' connection type\");\r\n        }\r\n        const fromNodes = Array.from(from instanceof Layer ? from.outputNodes : from);\r\n        const toNodes = Array.from(to instanceof Layer ? to.inputNodes : to);\r\n        if (toNodes.length === 0) {\r\n            throw new ReferenceError('Target from has no input nodes!');\r\n        }\r\n        if (fromNodes.length === 0) {\r\n            throw new ReferenceError('This from has no output nodes!');\r\n        }\r\n        const connections = [];\r\n        if (connectionType === ConnectionType_1.ConnectionType.ALL_TO_ALL) {\r\n            fromNodes.forEach(fromNode => {\r\n                toNodes.forEach(toNode => {\r\n                    connections.push(fromNode.connect(toNode, weight)); // connect every \"from node\" to every \"to node\"\r\n                });\r\n            });\r\n        }\r\n        else if (connectionType === ConnectionType_1.ConnectionType.ONE_TO_ONE) {\r\n            if (fromNodes.length !== toNodes.length) {\r\n                throw new RangeError(\"Can't connect one to one! Number of output nodes from are unequal number of incoming nodes from next layer!\");\r\n            }\r\n            for (let i = 0; i < fromNodes.length; i++) {\r\n                connections.push(fromNodes[i].connect(toNodes[i], weight)); // connect every nodes with same indices\r\n            }\r\n        }\r\n        else if (connectionType === ConnectionType_1.ConnectionType.POOLING) {\r\n            // connect the same amount of input nodes to every output node\r\n            // every input node has only one connection available\r\n            const ratio = toNodes.length / fromNodes.length;\r\n            connections.push(...fromNodes.map((node, index) => node.connect(toNodes[Math.floor(index * ratio)], weight)));\r\n        }\r\n        return connections;\r\n    }\r\n    /**\r\n     * Gate nodes and connections.\r\n     *\r\n     * @param nodes the nodes which function as gateNodes\r\n     * @param connections the connections which will be gated\r\n     * @param gateType The type of gating\r\n     *\r\n     * @returns all gated connections\r\n     */\r\n    static gate(nodes, connections, gateType) {\r\n        const gatedConnections = [];\r\n        switch (gateType) {\r\n            case GatingType_1.GatingType.INPUT: {\r\n                // gate incoming connections\r\n                const toNodes = Array.from(new Set(connections.map(conn => conn.to)));\r\n                for (let i = 0; i < toNodes.length; i++) {\r\n                    const node = toNodes[i];\r\n                    const gateNode = nodes[i % nodes.length];\r\n                    node.incoming.forEach(conn => {\r\n                        if (connections.includes(conn)) {\r\n                            gateNode.addGate(conn);\r\n                            gatedConnections.push(conn);\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n            case GatingType_1.GatingType.SELF: {\r\n                // gate self connections\r\n                const fromNodes = Array.from(new Set(connections.map(conn => conn.from)));\r\n                for (let i = 0; i < fromNodes.length; i++) {\r\n                    if (connections.includes(fromNodes[i].selfConnection)) {\r\n                        nodes[i % nodes.length].addGate(fromNodes[i].selfConnection);\r\n                        gatedConnections.push(fromNodes[i].selfConnection);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case GatingType_1.GatingType.OUTPUT: {\r\n                // gate outgoing connections\r\n                const fromNodes = Array.from(new Set(connections.map(conn => conn.from)));\r\n                for (let i = 0; i < fromNodes.length; i++) {\r\n                    const node = fromNodes[i];\r\n                    const gateNode = nodes[i % nodes.length];\r\n                    node.outgoing.forEach(conn => {\r\n                        if (connections.includes(conn)) {\r\n                            gateNode.addGate(conn);\r\n                            gatedConnections.push(conn);\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return gatedConnections;\r\n    }\r\n}\r\nexports.Layer = Layer;\r\n//# sourceMappingURL=Layer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/Layer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/NoiseLayers/NoiseLayer.js":
/*!*****************************************************************!*\
  !*** ./build/src/architecture/Layers/NoiseLayers/NoiseLayer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NoiseLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst NoiseNode_1 = __webpack_require__(/*! ../../Nodes/NoiseNode */ \"./build/src/architecture/Nodes/NoiseNode.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Noise layer\r\n */\r\nclass NoiseLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activation = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new NoiseNode_1.NoiseNode({\r\n                noiseType: NodeType_1.NoiseNodeType.GAUSSIAN_NOISE,\r\n                gaussian: options,\r\n            }).setActivationType(activation));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @param type the type to check\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed(type) {\r\n        return type === ConnectionType_1.ConnectionType.ONE_TO_ONE;\r\n    }\r\n}\r\nexports.NoiseLayer = NoiseLayer;\r\n//# sourceMappingURL=NoiseLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/NoiseLayers/NoiseLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/AvgPooling1DLayer.js":
/*!**************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/AvgPooling1DLayer.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AvgPooling1DLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst PoolNode_1 = __webpack_require__(/*! ../../Nodes/PoolNode */ \"./build/src/architecture/Nodes/PoolNode.js\");\r\nconst PoolingLayer_1 = __webpack_require__(/*! ./PoolingLayer */ \"./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js\");\r\n/**\r\n * Average pooling layer 1D\r\n */\r\nclass AvgPooling1DLayer extends PoolingLayer_1.PoolingLayer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activationType = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new PoolNode_1.PoolNode(NodeType_1.PoolNodeType.AVG_POOLING).setActivationType(activationType));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n}\r\nexports.AvgPooling1DLayer = AvgPooling1DLayer;\r\n//# sourceMappingURL=AvgPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/AvgPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/GlobalAvgPooling1DLayer.js":
/*!********************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/GlobalAvgPooling1DLayer.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GlobalAvgPooling1DLayer = void 0;\r\nconst AvgPooling1DLayer_1 = __webpack_require__(/*! ./AvgPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/AvgPooling1DLayer.js\");\r\n/**\r\n * Global average pooling layer 1D\r\n */\r\nclass GlobalAvgPooling1DLayer extends AvgPooling1DLayer_1.AvgPooling1DLayer {\r\n    constructor(outputSize, options = {}) {\r\n        super(1, options);\r\n    }\r\n}\r\nexports.GlobalAvgPooling1DLayer = GlobalAvgPooling1DLayer;\r\n//# sourceMappingURL=GlobalAvgPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/GlobalAvgPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/GlobalMaxPooling1DLayer.js":
/*!********************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/GlobalMaxPooling1DLayer.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GlobalMaxPooling1DLayer = void 0;\r\nconst MaxPooling1DLayer_1 = __webpack_require__(/*! ./MaxPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/MaxPooling1DLayer.js\");\r\n/**\r\n * Global maximum pooling layer 1D\r\n */\r\nclass GlobalMaxPooling1DLayer extends MaxPooling1DLayer_1.MaxPooling1DLayer {\r\n    constructor(outputSize, options = {}) {\r\n        super(1, options);\r\n    }\r\n}\r\nexports.GlobalMaxPooling1DLayer = GlobalMaxPooling1DLayer;\r\n//# sourceMappingURL=GlobalMaxPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/GlobalMaxPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/GlobalMinPooling1DLayer.js":
/*!********************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/GlobalMinPooling1DLayer.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GlobalMinPooling1DLayer = void 0;\r\nconst MinPooling1DLayer_1 = __webpack_require__(/*! ./MinPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/MinPooling1DLayer.js\");\r\n/**\r\n * Global minimum pooling layer 1D\r\n */\r\nclass GlobalMinPooling1DLayer extends MinPooling1DLayer_1.MinPooling1DLayer {\r\n    constructor(outputSize, options = {}) {\r\n        super(1, options);\r\n    }\r\n}\r\nexports.GlobalMinPooling1DLayer = GlobalMinPooling1DLayer;\r\n//# sourceMappingURL=GlobalMinPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/GlobalMinPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/MaxPooling1DLayer.js":
/*!**************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/MaxPooling1DLayer.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MaxPooling1DLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst PoolNode_1 = __webpack_require__(/*! ../../Nodes/PoolNode */ \"./build/src/architecture/Nodes/PoolNode.js\");\r\nconst PoolingLayer_1 = __webpack_require__(/*! ./PoolingLayer */ \"./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js\");\r\n/**\r\n * Maximum pooling layer 1D\r\n */\r\nclass MaxPooling1DLayer extends PoolingLayer_1.PoolingLayer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activationType = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new PoolNode_1.PoolNode(NodeType_1.PoolNodeType.MAX_POOLING).setActivationType(activationType));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n}\r\nexports.MaxPooling1DLayer = MaxPooling1DLayer;\r\n//# sourceMappingURL=MaxPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/MaxPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/MinPooling1DLayer.js":
/*!**************************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/MinPooling1DLayer.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MinPooling1DLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst PoolNode_1 = __webpack_require__(/*! ../../Nodes/PoolNode */ \"./build/src/architecture/Nodes/PoolNode.js\");\r\nconst PoolingLayer_1 = __webpack_require__(/*! ./PoolingLayer */ \"./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js\");\r\n/**\r\n * Minimum pooling layer 1D\r\n */\r\nclass MinPooling1DLayer extends PoolingLayer_1.PoolingLayer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        const activationType = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Identitiy;\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new PoolNode_1.PoolNode(NodeType_1.PoolNodeType.MIN_POOLING).setActivationType(activationType));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n    }\r\n}\r\nexports.MinPooling1DLayer = MinPooling1DLayer;\r\n//# sourceMappingURL=MinPooling1DLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/MinPooling1DLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js":
/*!*********************************************************************!*\
  !*** ./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PoolingLayer = void 0;\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Parent class for all pooling layers\r\n */\r\nclass PoolingLayer extends Layer_1.Layer {\r\n    constructor(outputSize) {\r\n        super(outputSize);\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.POOLING;\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n}\r\nexports.PoolingLayer = PoolingLayer;\r\n//# sourceMappingURL=PoolingLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/RecurrentLayers/GRULayer.js":
/*!*******************************************************************!*\
  !*** ./build/src/architecture/Layers/RecurrentLayers/GRULayer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GRULayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst GatingType_1 = __webpack_require__(/*! ../../../enums/GatingType */ \"./build/src/enums/GatingType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * GRU layer\r\n */\r\nclass GRULayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        super(outputSize);\r\n        const updateGate = [];\r\n        const inverseUpdateGate = [];\r\n        const resetGate = [];\r\n        const memoryCell = [];\r\n        const previousOutput = [];\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n            updateGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(1));\r\n            inverseUpdateGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(0).setActivationType(activations_1.Logistic));\r\n            resetGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(0));\r\n            memoryCell.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setActivationType(activations_1.TANH));\r\n            previousOutput.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(0).setActivationType(activations_1.Logistic));\r\n            this.outputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n        }\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, updateGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, resetGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, memoryCell, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(previousOutput, updateGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(updateGate, inverseUpdateGate, ConnectionType_1.ConnectionType.ONE_TO_ONE, 1));\r\n        this.connections.push(...Layer_1.Layer.connect(previousOutput, resetGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        const reset = Layer_1.Layer.connect(previousOutput, memoryCell, ConnectionType_1.ConnectionType.ALL_TO_ALL);\r\n        this.connections.push(...reset);\r\n        this.gates.push(...Layer_1.Layer.gate(resetGate, reset, GatingType_1.GatingType.OUTPUT));\r\n        const update = Layer_1.Layer.connect(previousOutput, this.outputNodes, ConnectionType_1.ConnectionType.ALL_TO_ALL);\r\n        const inverseUpdate = Layer_1.Layer.connect(memoryCell, this.outputNodes, ConnectionType_1.ConnectionType.ALL_TO_ALL);\r\n        this.connections.push(...update);\r\n        this.connections.push(...inverseUpdate);\r\n        this.gates.push(...Layer_1.Layer.gate(updateGate, update, GatingType_1.GatingType.OUTPUT));\r\n        this.gates.push(...Layer_1.Layer.gate(inverseUpdateGate, inverseUpdate, GatingType_1.GatingType.OUTPUT));\r\n        this.connections.push(...Layer_1.Layer.connect(this.outputNodes, previousOutput, ConnectionType_1.ConnectionType.ONE_TO_ONE, 1));\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n        this.nodes.push(...updateGate);\r\n        this.nodes.push(...inverseUpdateGate);\r\n        this.nodes.push(...resetGate);\r\n        this.nodes.push(...memoryCell);\r\n        this.nodes.push(...Array.from(this.outputNodes));\r\n        this.nodes.push(...previousOutput);\r\n        this.outputNodes.forEach(node => { var _a; return (node.squash = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Logistic); });\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.GRULayer = GRULayer;\r\n//# sourceMappingURL=GRULayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/RecurrentLayers/GRULayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/RecurrentLayers/HopfieldLayer.js":
/*!************************************************************************!*\
  !*** ./build/src/architecture/Layers/RecurrentLayers/HopfieldLayer.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HopfieldLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Hopfield layer\r\n */\r\nclass HopfieldLayer extends Layer_1.Layer {\r\n    constructor(outputSize) {\r\n        super(outputSize);\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n            this.outputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setActivationType(activations_1.BinaryStep));\r\n        }\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, this.outputNodes, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(this.outputNodes, this.inputNodes, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n        this.nodes.push(...Array.from(this.outputNodes));\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.HopfieldLayer = HopfieldLayer;\r\n//# sourceMappingURL=HopfieldLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/RecurrentLayers/HopfieldLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/RecurrentLayers/LSTMLayer.js":
/*!********************************************************************!*\
  !*** ./build/src/architecture/Layers/RecurrentLayers/LSTMLayer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LSTMLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst GatingType_1 = __webpack_require__(/*! ../../../enums/GatingType */ \"./build/src/enums/GatingType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * LSTM layer\r\n */\r\nclass LSTMLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        super(outputSize);\r\n        const inputGate = [];\r\n        const forgetGate = [];\r\n        const memoryCell = [];\r\n        const outputGate = [];\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n            inputGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(1));\r\n            forgetGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(1).setActivationType(activations_1.Logistic));\r\n            memoryCell.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n            outputGate.push(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setBias(1));\r\n            this.outputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n        }\r\n        this.connections.push(...Layer_1.Layer.connect(memoryCell, inputGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(memoryCell, forgetGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(memoryCell, outputGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        const forgetGateConnections = Layer_1.Layer.connect(memoryCell, memoryCell, ConnectionType_1.ConnectionType.ONE_TO_ONE);\r\n        const outputGateConnections = Layer_1.Layer.connect(memoryCell, this.outputNodes, ConnectionType_1.ConnectionType.ALL_TO_ALL);\r\n        this.connections.push(...forgetGateConnections);\r\n        this.connections.push(...outputGateConnections);\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, memoryCell, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, outputGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        this.connections.push(...Layer_1.Layer.connect(this.inputNodes, forgetGate, ConnectionType_1.ConnectionType.ALL_TO_ALL));\r\n        const inputGateConnections = Layer_1.Layer.connect(this.inputNodes, inputGate, ConnectionType_1.ConnectionType.ALL_TO_ALL);\r\n        this.connections.push(...inputGateConnections);\r\n        this.gates.push(...Layer_1.Layer.gate(forgetGate, forgetGateConnections, GatingType_1.GatingType.SELF));\r\n        this.gates.push(...Layer_1.Layer.gate(outputGate, outputGateConnections, GatingType_1.GatingType.OUTPUT));\r\n        this.gates.push(...Layer_1.Layer.gate(inputGate, inputGateConnections, GatingType_1.GatingType.INPUT));\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n        this.nodes.push(...inputGate);\r\n        this.nodes.push(...forgetGate);\r\n        this.nodes.push(...memoryCell);\r\n        this.nodes.push(...outputGate);\r\n        this.nodes.push(...Array.from(this.outputNodes));\r\n        this.outputNodes.forEach(node => { var _a; return (node.squash = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.TANH); });\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.LSTMLayer = LSTMLayer;\r\n//# sourceMappingURL=LSTMLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/RecurrentLayers/LSTMLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/RecurrentLayers/MemoryLayer.js":
/*!**********************************************************************!*\
  !*** ./build/src/architecture/Layers/RecurrentLayers/MemoryLayer.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MemoryLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * Memory layer\r\n */\r\nclass MemoryLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN));\r\n        }\r\n        let prevNodes = Array.from(this.inputNodes);\r\n        const nodes = [];\r\n        for (let i = 0; i < ((_a = options.memorySize) !== null && _a !== void 0 ? _a : 1); i++) {\r\n            const block = [];\r\n            for (let j = 0; j < outputSize; j++) {\r\n                const node = new Node_1.Node(NodeType_1.NodeType.HIDDEN);\r\n                node.squash = activations_1.Identitiy;\r\n                node.bias = 0;\r\n                block.push(node);\r\n            }\r\n            this.connections.push(...Layer_1.Layer.connect(prevNodes, block, ConnectionType_1.ConnectionType.ONE_TO_ONE));\r\n            nodes.push(...block);\r\n            prevNodes = block;\r\n        }\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n        this.nodes.push(...nodes.reverse());\r\n        prevNodes.forEach(node => this.outputNodes.add(node));\r\n        this.outputNodes.forEach(node => { var _a; return (node.squash = (_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Logistic); });\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.MemoryLayer = MemoryLayer;\r\n//# sourceMappingURL=MemoryLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/RecurrentLayers/MemoryLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Layers/RecurrentLayers/RNNLayer.js":
/*!*******************************************************************!*\
  !*** ./build/src/architecture/Layers/RecurrentLayers/RNNLayer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RNNLayer = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst ConnectionType_1 = __webpack_require__(/*! ../../../enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../../Node */ \"./build/src/architecture/Node.js\");\r\nconst Layer_1 = __webpack_require__(/*! ../Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\n/**\r\n * RNN layer\r\n */\r\nclass RNNLayer extends Layer_1.Layer {\r\n    constructor(outputSize, options = {}) {\r\n        var _a;\r\n        super(outputSize);\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.inputNodes.add(new Node_1.Node(NodeType_1.NodeType.HIDDEN).setActivationType((_a = options.activation) !== null && _a !== void 0 ? _a : activations_1.Logistic));\r\n        }\r\n        this.outputNodes = this.inputNodes;\r\n        this.nodes.push(...Array.from(this.inputNodes));\r\n        // Adding self connections\r\n        this.connections.push(...Layer_1.Layer.connect(this.nodes, this.nodes, ConnectionType_1.ConnectionType.ONE_TO_ONE));\r\n    }\r\n    /**\r\n     * Checks if a given connection type is allowed on this layer.\r\n     *\r\n     * @return Is this connection type allowed?\r\n     */\r\n    connectionTypeisAllowed() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets the default connection type for a incoming connection to this layer.\r\n     *\r\n     * @returns the default incoming connection\r\n     */\r\n    getDefaultIncomingConnectionType() {\r\n        return ConnectionType_1.ConnectionType.ALL_TO_ALL;\r\n    }\r\n}\r\nexports.RNNLayer = RNNLayer;\r\n//# sourceMappingURL=RNNLayer.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Layers/RecurrentLayers/RNNLayer.js?");

/***/ }),

/***/ "./build/src/architecture/Network.js":
/*!*******************************************!*\
  !*** ./build/src/architecture/Network.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Network = void 0;\r\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist-esm/index.js\");\r\nconst dist_1 = __webpack_require__(/*! threads/dist */ \"./node_modules/threads/dist/index.js\");\r\nconst TimSort = __importStar(__webpack_require__(/*! timsort */ \"./node_modules/timsort/index.js\"));\r\nconst NodeType_1 = __webpack_require__(/*! ../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst EvolveOptions_1 = __webpack_require__(/*! ../interfaces/EvolveOptions */ \"./build/src/interfaces/EvolveOptions.js\");\r\nconst Loss_1 = __webpack_require__(/*! ../methods/Loss */ \"./build/src/methods/Loss.js\");\r\nconst Mutation_1 = __webpack_require__(/*! ../methods/Mutation */ \"./build/src/methods/Mutation.js\");\r\nconst NEAT_1 = __webpack_require__(/*! ../NEAT */ \"./build/src/NEAT.js\");\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst Node_1 = __webpack_require__(/*! ./Node */ \"./build/src/architecture/Node.js\");\r\n/**\r\n * Create a neural network\r\n *\r\n * Networks are easy to create, all you need to specify is an `input` and an `output` size.\r\n *\r\n * @constructs Network\r\n */\r\nclass Network {\r\n    constructor(inputSize, outputSize) {\r\n        this.inputSize = inputSize;\r\n        this.outputSize = outputSize;\r\n        this.nodes = [];\r\n        this.connections = new Set();\r\n        this.gates = new Set();\r\n        this.score = undefined;\r\n        this.species = null;\r\n        // Create input and output nodes\r\n        for (let i = 0; i < inputSize; i++) {\r\n            this.nodes.push(new Node_1.Node(NodeType_1.NodeType.INPUT));\r\n        }\r\n        for (let i = 0; i < outputSize; i++) {\r\n            this.nodes.push(new Node_1.Node(NodeType_1.NodeType.OUTPUT));\r\n        }\r\n        // Connect input and output nodes\r\n        for (let i = 0; i < this.inputSize; i++) {\r\n            for (let j = this.inputSize; j < this.outputSize + this.inputSize; j++) {\r\n                // https://stats.stackexchange.com/a/248040/147931\r\n                const weight = (Math.random() - 0.5) *\r\n                    this.inputSize *\r\n                    Math.sqrt(2 / this.inputSize);\r\n                this.connect(this.nodes[i], this.nodes[j], weight);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Convert a json object to a network\r\n     *\r\n     * @param {{input:{number},output:{number},dropout:{number},nodes:Array<object>,connections:Array<object>}} json A network represented as a json object\r\n     *\r\n     * @returns {Network} Network A reconstructed network\r\n     */\r\n    static fromJSON(json) {\r\n        const network = new Network(json.inputSize, json.outputSize);\r\n        network.nodes = [];\r\n        network.connections.clear();\r\n        json.nodes\r\n            .map(nodeJSON => {\r\n            return new Node_1.Node().fromJSON(nodeJSON);\r\n        })\r\n            .forEach(node => (network.nodes[node.index] = node));\r\n        json.connections.forEach((jsonConnection) => {\r\n            var _a;\r\n            const connection = network.connect(network.nodes[jsonConnection.fromIndex], network.nodes[jsonConnection.toIndex], jsonConnection.weight);\r\n            (_a = jsonConnection.xTraces) === null || _a === void 0 ? void 0 : _a.forEach((xTraceValue, xTraceNodeIndex) => {\r\n                connection.xTrace.set(network.nodes[xTraceNodeIndex], xTraceValue);\r\n            });\r\n            if (jsonConnection.gateNodeIndex !== null) {\r\n                network.addGate(network.nodes[jsonConnection.gateNodeIndex], connection);\r\n            }\r\n        });\r\n        return network;\r\n    }\r\n    /**\r\n     * Create an offspring from two parent networks.\r\n     *\r\n     * Networks are not required to have the same size, however input and output size should be the same!\r\n     *\r\n     * @todo Add custom [crossover](crossover) method customization\r\n     *\r\n     * @param {Network} network1 First parent network\r\n     * @param {Network} network2 Second parent network\r\n     *\r\n     * @returns {Network} New network created from mixing parent networks\r\n     */\r\n    static crossOver(network1, network2) {\r\n        var _a, _b;\r\n        if (network1.inputSize !== network2.inputSize ||\r\n            network1.outputSize !== network2.outputSize) {\r\n            throw new Error('Networks don`t have the same input/output size!');\r\n        }\r\n        // Initialise offspring\r\n        const offspring = new Network(network1.inputSize, network1.outputSize);\r\n        offspring.connections.clear(); // clear\r\n        offspring.nodes = []; // clear\r\n        // Save scores and create a copy\r\n        const score1 = (_a = network1.score) !== null && _a !== void 0 ? _a : 0;\r\n        const score2 = (_b = network2.score) !== null && _b !== void 0 ? _b : 0;\r\n        // Determine offspring node size\r\n        let offspringSize;\r\n        if (score1 === score2) {\r\n            const max = Math.max(network1.nodes.length, network2.nodes.length);\r\n            const min = Math.min(network1.nodes.length, network2.nodes.length);\r\n            offspringSize = Utils_1.randInt(min, max + 1); // [min,max]\r\n        }\r\n        else if (score1 > score2) {\r\n            offspringSize = network1.nodes.length;\r\n        }\r\n        else {\r\n            offspringSize = network2.nodes.length;\r\n        }\r\n        const inputSize = network1.inputSize;\r\n        const outputSize = network1.outputSize;\r\n        // set node indices\r\n        for (let i = 0; i < network1.nodes.length; i++) {\r\n            network1.nodes[i].index = i;\r\n        }\r\n        // set node indices\r\n        for (let i = 0; i < network2.nodes.length; i++) {\r\n            network2.nodes[i].index = i;\r\n        }\r\n        // Assign nodes from parents to offspring\r\n        for (let i = 0; i < offspringSize; i++) {\r\n            let chosenNode;\r\n            let chosenNodeType = null;\r\n            // decide what type of node is needed first check for input and output nodes and fill up with hidden nodes\r\n            if (i < inputSize) {\r\n                // pick input node\r\n                chosenNodeType = NodeType_1.NodeType.INPUT;\r\n                const sourceNetwork = Utils_1.randBoolean() ? network1 : network2;\r\n                let inputNumber = -1;\r\n                let j = -1;\r\n                while (inputNumber < i) {\r\n                    if (j++ >= sourceNetwork.nodes.length) {\r\n                        throw RangeError('something is wrong with the size of the input');\r\n                    }\r\n                    if (sourceNetwork.nodes[j].isInputNode()) {\r\n                        inputNumber++;\r\n                    }\r\n                }\r\n                chosenNode = sourceNetwork.nodes[j];\r\n            }\r\n            else if (i < inputSize + outputSize) {\r\n                // pick output node\r\n                chosenNodeType = NodeType_1.NodeType.OUTPUT;\r\n                const sourceNetwork = Utils_1.randBoolean() ? network1 : network2;\r\n                let outputNumber = -1;\r\n                let j = -1;\r\n                while (outputNumber < i - inputSize) {\r\n                    j++;\r\n                    if (j >= sourceNetwork.nodes.length) {\r\n                        throw RangeError('something is wrong with the size of the output');\r\n                    }\r\n                    if (sourceNetwork.nodes[j].isOutputNode()) {\r\n                        outputNumber++;\r\n                    }\r\n                }\r\n                chosenNode = sourceNetwork.nodes[j];\r\n            }\r\n            else {\r\n                // pick hidden node\r\n                chosenNodeType = NodeType_1.NodeType.HIDDEN;\r\n                let sourceNetwork;\r\n                if (i >= network1.nodes.length) {\r\n                    sourceNetwork = network2;\r\n                }\r\n                else if (i >= network2.nodes.length) {\r\n                    sourceNetwork = network1;\r\n                }\r\n                else {\r\n                    sourceNetwork = Utils_1.randBoolean() ? network1 : network2;\r\n                }\r\n                chosenNode = Utils_1.pickRandom(sourceNetwork.nodes);\r\n            }\r\n            const newNode = new Node_1.Node(chosenNodeType);\r\n            newNode.bias = chosenNode.bias;\r\n            newNode.squash = chosenNode.squash;\r\n            offspring.nodes.push(newNode);\r\n        }\r\n        // Create arrays of connection genes\r\n        const n1connections = [];\r\n        const n2connections = [];\r\n        // Add the connections of network 1\r\n        network1.connections.forEach(connection => {\r\n            n1connections[Utils_1.pairing(connection.from.index, connection.to.index)] = connection.toJSON();\r\n        });\r\n        // Add the connections of network 2\r\n        network2.connections.forEach(connection => {\r\n            n2connections[Utils_1.pairing(connection.from.index, connection.to.index)] = connection.toJSON();\r\n        });\r\n        // Split common conn genes from disjoint or excess conn genes\r\n        const connections = [];\r\n        const keys1 = Object.keys(n1connections);\r\n        const keys2 = Object.keys(n2connections);\r\n        for (let i = keys1.length - 1; i >= 0; i--) {\r\n            if (n2connections[parseInt(keys1[i])] !== undefined) {\r\n                connections.push(Utils_1.randBoolean()\r\n                    ? n1connections[parseInt(keys1[i])]\r\n                    : n2connections[parseInt(keys1[i])]);\r\n                n2connections[parseInt(keys1[i])] = undefined;\r\n            }\r\n            else if (score1 >= score2) {\r\n                connections.push(n1connections[parseInt(keys1[i])]);\r\n            }\r\n        }\r\n        // Excess/disjoint gene\r\n        if (score2 >= score1) {\r\n            keys2\r\n                .map(key => parseInt(key)) // convert to numbers\r\n                .map(key => n2connections[key]) // get the connection\r\n                .filter(conn => conn !== undefined) // filter out undefined connections\r\n                .forEach(conn => connections.push(conn)); // add the filtered connections\r\n        }\r\n        // Add common conn genes uniformly\r\n        connections.forEach(connectionJSON => {\r\n            if (connectionJSON !== undefined &&\r\n                connectionJSON.toIndex < offspringSize &&\r\n                connectionJSON.fromIndex < offspringSize) {\r\n                const from = offspring.nodes[connectionJSON.fromIndex];\r\n                const to = offspring.nodes[connectionJSON.toIndex];\r\n                const connection = offspring.connect(from, to, connectionJSON.weight);\r\n                if (connectionJSON.gateNodeIndex !== null &&\r\n                    connectionJSON.gateNodeIndex < offspringSize) {\r\n                    offspring.addGate(offspring.nodes[connectionJSON.gateNodeIndex], connection);\r\n                }\r\n            }\r\n        });\r\n        return offspring;\r\n    }\r\n    /**\r\n     * Returns a copy of Network.\r\n     * @returns {Network} Returns an identical network\r\n     */\r\n    deepCopy() {\r\n        return Network.fromJSON(this.toJSON());\r\n    }\r\n    /**\r\n     * Connects a Node to another Node or Group in the network\r\n     *\r\n     * @param {Node} from The source Node\r\n     * @param {Node} to The destination Node or Group\r\n     * @param {number} [weight=0] An initial weight for the connections to be formed\r\n     *\r\n     * @returns {Connection[]} An array of the formed connections\r\n     */\r\n    connect(from, to, weight = 0) {\r\n        const connection = from.connect(to, weight); // run node-level connect\r\n        this.connections.add(connection); // add it to the array\r\n        return connection;\r\n    }\r\n    /**\r\n     * Activates the network\r\n     *\r\n     * It will activate all the nodes in activation order and produce an output.\r\n     *\r\n     * @param {number[]} [input] Input values to activate nodes with\r\n     * @param options\r\n     * @returns {number[]} Squashed output values\r\n     */\r\n    activate(input, options = {}) {\r\n        var _a, _b;\r\n        if (input.length !== this.inputSize) {\r\n            throw new RangeError('Input size of dataset is different to network input size!');\r\n        }\r\n        // get default value if no value is given\r\n        options.dropoutRate = (_a = options.dropoutRate) !== null && _a !== void 0 ? _a : 0;\r\n        options.trace = (_b = options.trace) !== null && _b !== void 0 ? _b : true;\r\n        this.nodes\r\n            .filter(node => node.isInputNode()) // only input nodes\r\n            .forEach((node, index) => node.activate(input[index], options.trace)); // activate them with the input\r\n        this.nodes\r\n            .filter(node => node.isHiddenNode()) // only hidden nodes\r\n            .forEach((node) => {\r\n            if (options.dropoutRate) {\r\n                node.mask = Math.random() >= options.dropoutRate ? 1 : 0;\r\n            }\r\n            node.activate(undefined, options.trace); // activate them\r\n        });\r\n        return this.nodes\r\n            .filter(node => node.isOutputNode()) // only output nodes\r\n            .map((node) => node.activate(undefined, options.trace)); // map them to there activation value will give the network's output\r\n    }\r\n    /**\r\n     * Backpropagate the network\r\n     *\r\n     * This function allows you to teach the network. If you want to do more complex training, use the `network.train()` function.\r\n     *\r\n     * @param {number[]} target Ideal values of the previous activate. Will use the difference to improve the weights\r\n     * @param options More option for propagation\r\n     */\r\n    propagate(target, options = {}) {\r\n        var _a, _b, _c;\r\n        // get default value if value isn't given\r\n        options.rate = (_a = options.rate) !== null && _a !== void 0 ? _a : 0.3;\r\n        options.momentum = (_b = options.momentum) !== null && _b !== void 0 ? _b : 0;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : false;\r\n        if (target.length !== this.outputSize) {\r\n            throw new Error('Output target length should match network output length');\r\n        }\r\n        // Backpropagation: output -> hidden -> input\r\n        // propagate through the output nodes\r\n        this.nodes\r\n            .filter(node => node.isOutputNode()) // only output nodes\r\n            .forEach((node, index) => node.propagate(target[index], options)); // propagate\r\n        // propagate backwards through the hidden nodes\r\n        for (let i = this.nodes.length - 1; i >= 0; i--) {\r\n            if (this.nodes[i].isHiddenNode()) {\r\n                // only hidden nodes\r\n                this.nodes[i].propagate(undefined, options);\r\n            }\r\n        }\r\n        // propagate through the input nodes\r\n        this.nodes\r\n            .filter(node => node.isInputNode()) // only input nodes\r\n            .forEach(node => node.propagate(undefined, options)); // propagate\r\n    }\r\n    /**\r\n     * Clear the context of the network\r\n     */\r\n    clear() {\r\n        this.nodes.forEach(node => node.clear());\r\n    }\r\n    /**\r\n     * Removes the connection of the `from` node to the `to` node\r\n     *\r\n     * @param {Node} from Source node\r\n     * @param {Node} to Destination node\r\n     */\r\n    disconnect(from, to) {\r\n        // remove the connection network-level\r\n        this.connections.forEach(conn => {\r\n            if (conn.from === from && conn.to === to) {\r\n                if (conn.gateNode !== null) {\r\n                    this.removeGate(conn); // remove possible gate\r\n                }\r\n                this.connections.delete(conn); // remove connection from array\r\n            }\r\n        });\r\n        // disconnect node-level\r\n        return from.disconnect(to);\r\n    }\r\n    /**\r\n     * Makes a network node gate a connection\r\n     *\r\n     * @param {Node} node Gating node\r\n     * @param {Connection} connection Connection to gate with node\r\n     */\r\n    addGate(node, connection) {\r\n        if (this.nodes.indexOf(node) === -1) {\r\n            throw new ReferenceError('This node is not part of the network!');\r\n        }\r\n        else if (connection.gateNode !== null) {\r\n            return;\r\n        }\r\n        node.addGate(connection);\r\n        this.gates.add(connection);\r\n    }\r\n    /**\r\n     * Remove the gate of a connection.\r\n     *\r\n     * @param {Connection} connection Connection to remove gate from\r\n     */\r\n    removeGate(connection) {\r\n        if (!this.gates.has(connection)) {\r\n            throw new Error('This connection is not gated!');\r\n        }\r\n        this.gates.delete(connection);\r\n        if (connection.gateNode !== null) {\r\n            connection.gateNode.removeGate(connection);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a node from a network, all its connections will be redirected. If it gates a connection, the gate will be removed.\r\n     *\r\n     * @param {Node} node Node to remove from the network\r\n     * @param keepGates\r\n     */\r\n    removeNode(node, keepGates = new Mutation_1.SubNodeMutation().keepGates) {\r\n        if (!this.nodes.includes(node)) {\r\n            throw new ReferenceError('This node does not exist in the network!');\r\n        }\r\n        this.disconnect(node, node); // remove self connection\r\n        const inputs = []; // keep track\r\n        const gates = []; // keep track\r\n        const outputs = []; // keep track\r\n        const connections = []; // keep track\r\n        // read all inputs from node and keep track of the nodes that gate the incoming connection\r\n        node.incoming.forEach(connection => {\r\n            if (keepGates &&\r\n                connection.gateNode !== null &&\r\n                connection.gateNode !== node) {\r\n                gates.push(connection.gateNode);\r\n            }\r\n            inputs.push(connection.from);\r\n            this.disconnect(connection.from, node);\r\n        });\r\n        // read all outputs from node and keep track of the nodes that gate the outgoing connection\r\n        node.outgoing.forEach(connection => {\r\n            if (keepGates &&\r\n                connection.gateNode !== null &&\r\n                connection.gateNode !== node) {\r\n                gates.push(connection.gateNode);\r\n            }\r\n            outputs.push(connection.to);\r\n            this.disconnect(node, connection.to);\r\n        });\r\n        // add all connections the node has\r\n        inputs.forEach(input => {\r\n            outputs.forEach(output => {\r\n                if (!input.isProjectingTo(output)) {\r\n                    connections.push(this.connect(input, output));\r\n                }\r\n            });\r\n        });\r\n        // as long as there are gates and connections\r\n        while (gates.length > 0 && connections.length > 0) {\r\n            const gate = gates.shift(); // take a gate node and remove it from the array\r\n            if (gate === undefined) {\r\n                continue;\r\n            }\r\n            const connection = Utils_1.pickRandom(connections); // take a random connection\r\n            this.addGate(gate, connection); // gate the connection with the gate node\r\n            Utils_1.removeFromArray(connections, connection); // remove the connection from the array\r\n        }\r\n        // remove every gate the node has\r\n        node.gated.forEach(this.removeGate);\r\n        Utils_1.removeFromArray(this.nodes, node); // remove the node from the nodes array\r\n    }\r\n    /**\r\n     * Mutates the network with the given method.\r\n     *\r\n     * @param {Mutation} method [Mutation method](mutation)\r\n     * @param {object} options\r\n     * @param {number} [options.maxNodes]\r\n     * @param {number} [options.maxConnections]\r\n     * @param {number} [options.maxGates] Maximum amount of Gates a network can grow to\r\n     */\r\n    mutate(method, options) {\r\n        method.mutate(this, options);\r\n    }\r\n    /**\r\n     * Selects a random mutation method and returns a mutated copy of the network. Warning! Mutates network directly.\r\n     *\r\n     * @param {Mutation[]} [allowedMethods=methods.mutation.ALL] An array of [Mutation methods](mutation) to automatically pick from\r\n     * @param {object} options\r\n     * @param {number} [options.maxNodes] Maximum amount of [Nodes](node) a network can grow to\r\n     * @param {number} [options.maxConnections] Maximum amount of [Connections](connection) a network can grow to\r\n     * @param {number} [options.maxGates] Maximum amount of Gates a network can grow to\r\n     */\r\n    mutateRandom(allowedMethods = Mutation_1.ALL_MUTATIONS, options = {}) {\r\n        if (allowedMethods.length === 0) {\r\n            return;\r\n        }\r\n        // mutate the network with a random allowed mutation\r\n        this.mutate(Utils_1.pickRandom(allowedMethods), options);\r\n    }\r\n    /**\r\n     * Train the given data to this network\r\n     *\r\n     * @param {TrainOptions} options Options used to train network\r\n     *\r\n     * @returns {{error:{number},iterations:{number},time:{number}}} A summary object of the network's performance\r\n     */\r\n    train(options) {\r\n        if (options.dataset[0].input.length !== this.inputSize ||\r\n            options.dataset[0].output.length !== this.outputSize) {\r\n            throw new Error('Dataset input/output size should be same as network input/output size!');\r\n        }\r\n        const start = Date.now();\r\n        if (options.iterations <= 0 && options.error <= 0) {\r\n            throw new Error('At least one of the following options must be specified: error, iterations');\r\n        }\r\n        // Split into trainingSet and testSet if cross validation is enabled\r\n        let trainingSetSize;\r\n        let trainingSet;\r\n        let testSet;\r\n        if (options.crossValidateTestSize > 0) {\r\n            trainingSetSize = Math.ceil((1 - options.crossValidateTestSize) * options.dataset.length);\r\n            trainingSet = options.dataset.slice(0, trainingSetSize);\r\n            testSet = options.dataset.slice(trainingSetSize);\r\n        }\r\n        else {\r\n            trainingSet = options.dataset;\r\n            testSet = [];\r\n        }\r\n        let currentTrainingRate;\r\n        let iterationCount = 0;\r\n        let error = 1;\r\n        // train until the target error is reached or the target iterations are reached\r\n        while (error > options.error &&\r\n            (options.iterations <= 0 || iterationCount < options.iterations)) {\r\n            iterationCount++;\r\n            // update the rate according to the rate policy\r\n            currentTrainingRate = options.rate.calc(iterationCount);\r\n            // train a single epoch\r\n            error = this.trainEpoch({\r\n                dataset: trainingSet,\r\n                batchSize: options.batchSize,\r\n                trainingRate: currentTrainingRate,\r\n                momentum: options.momentum,\r\n                loss: options.loss,\r\n                dropoutRate: options.dropout,\r\n            });\r\n            if (options.clear) {\r\n                this.clear();\r\n            }\r\n            // Run test with the testSet, if cross validation is enabled\r\n            if (options.crossValidateTestSize > 0) {\r\n                error = this.test(testSet, options.loss);\r\n                if (options.clear) {\r\n                    this.clear();\r\n                }\r\n            }\r\n            if (options.shuffle) {\r\n                Utils_1.shuffle(options.dataset);\r\n            }\r\n            if (options.log > 0 && iterationCount % options.log === 0) {\r\n                console.log('iteration number', iterationCount, 'error', error, 'training rate', currentTrainingRate);\r\n            }\r\n            if (options.schedule &&\r\n                iterationCount % options.schedule.iterations === 0) {\r\n                options.schedule.function(error, iterationCount);\r\n            }\r\n        }\r\n        if (options.clear) {\r\n            this.clear();\r\n        }\r\n        return {\r\n            error,\r\n            iterations: iterationCount,\r\n            time: Date.now() - start,\r\n        };\r\n    }\r\n    /**\r\n     * Tests a set and returns the error and elapsed time\r\n     *\r\n     * @param {Array<{input:number[],output:number[]}>} dataset A set of input values and ideal output values to test the network against\r\n     * @param {lossType} [loss=MSELoss] The [loss function](https://en.wikipedia.org/wiki/Loss_function) used to determine network error\r\n     *\r\n     * @returns {number} A summary object of the network's performance\r\n     */\r\n    test(dataset, loss = Loss_1.MSELoss) {\r\n        let error = 0;\r\n        for (const entry of dataset) {\r\n            const input = entry.input;\r\n            const target = entry.output;\r\n            const output = this.activate(input, { trace: false });\r\n            error += loss(target, output);\r\n        }\r\n        return error / dataset.length;\r\n    }\r\n    /**\r\n     * Convert the network to a json object\r\n     *\r\n     * @returns {NetworkJSON} The network represented as a json object\r\n     */\r\n    toJSON() {\r\n        const json = {\r\n            nodes: [],\r\n            connections: [],\r\n            inputSize: this.inputSize,\r\n            outputSize: this.outputSize,\r\n        };\r\n        // set node indices\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            this.nodes[i].index = i;\r\n        }\r\n        // convert all nodes to json and add the to the json object\r\n        this.nodes.forEach(node => {\r\n            json.nodes.push(node.toJSON());\r\n            if (node.selfConnection.weight !== 0) {\r\n                // if there is a self connection\r\n                // add it to the json object\r\n                json.connections.push(node.selfConnection.toJSON());\r\n            }\r\n        });\r\n        this.connections.forEach(conn => {\r\n            json.connections.push(conn.toJSON());\r\n        });\r\n        return json;\r\n    }\r\n    /**\r\n     * Evolves the network to reach a lower error on a dataset using the [NEAT algorithm](http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf)\r\n     *\r\n     * If both `iterations` and `error` options are unset, evolve will default to `iterations` as an end condition.\r\n     *\r\n     * @param {object} [options] Configuration options\r\n     *\r\n     * @returns {{error:{number},iterations:{number},time:{number}}} A summary object of the network's performance. <br /> Properties include: `error` - error of the best genome, `iterations` - generations used to evolve networks, `time` - clock time elapsed while evolving\r\n     */\r\n    evolve(options = new EvolveOptions_1.EvolveOptions()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!options.fitnessFunction &&\r\n                options.dataset &&\r\n                (options.dataset[0].input.length !== this.inputSize ||\r\n                    options.dataset[0].output.length !== this.outputSize)) {\r\n                throw new Error('Dataset input/output size should be same as network input/output size!');\r\n            }\r\n            // set options to default if necessary\r\n            options.input = this.inputSize;\r\n            options.output = this.outputSize;\r\n            const start = Date.now();\r\n            // tslint:disable-next-line:no-any\r\n            let workerPool = null;\r\n            if (!options.fitnessFunction) {\r\n                // if no fitness function is given\r\n                // create default one\r\n                // Serialize the dataset using JSON\r\n                const serializedDataSet = JSON.stringify(options.dataset);\r\n                const lossIndex = Object.values(Loss_1.ALL_LOSSES).indexOf(options.loss);\r\n                // init a pool of workers\r\n                workerPool = dist_1.Pool(() => threads_1.spawn(new threads_1.Worker('../multithreading/TestWorker')), options.threads);\r\n                options.fitnessFunction = function (population) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        for (const genome of population) {\r\n                            // add a task to the workerPool's queue\r\n                            if (workerPool) {\r\n                                workerPool.queue((test) => __awaiter(this, void 0, void 0, function* () {\r\n                                    if (genome === undefined) {\r\n                                        throw new ReferenceError();\r\n                                    }\r\n                                    // test the genome\r\n                                    genome.score = -(yield test(serializedDataSet, JSON.stringify(genome.toJSON()), lossIndex));\r\n                                }));\r\n                            }\r\n                        }\r\n                        if (workerPool) {\r\n                            yield workerPool.completed(); // wait until every task is done\r\n                        }\r\n                    });\r\n                };\r\n            }\r\n            options.template = this; // set this network as template for first generation\r\n            const neat = new NEAT_1.NEAT(options);\r\n            let error;\r\n            let bestFitness = 0;\r\n            let bestGenome = null;\r\n            // run until error goal is reached or iteration goal is reached\r\n            do {\r\n                const fittest = yield neat.evolve(); // run one generation\r\n                if (!fittest.score) {\r\n                    throw new ReferenceError();\r\n                }\r\n                error = fittest.score;\r\n                if (neat.options.generation === 1 || fittest.score > bestFitness) {\r\n                    bestFitness = fittest.score;\r\n                    bestGenome = fittest;\r\n                }\r\n                if (options.schedule &&\r\n                    neat.options.generation % options.schedule.iterations === 0) {\r\n                    options.schedule.function(fittest.score, -error, neat.options.generation);\r\n                }\r\n            } while (error < -options.error &&\r\n                (options.iterations === 0 || neat.options.generation < options.iterations));\r\n            if (bestGenome) {\r\n                // set this network to the fittest from NEAT\r\n                this.nodes = bestGenome.nodes;\r\n                this.connections = bestGenome.connections;\r\n                this.gates = bestGenome.gates;\r\n                if (options.clear) {\r\n                    this.clear();\r\n                }\r\n            }\r\n            if (workerPool !== null) {\r\n                yield workerPool.terminate(); // stop all processes\r\n            }\r\n            return {\r\n                error: -error,\r\n                iterations: neat.options.generation,\r\n                time: Date.now() - start,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Distance function\r\n     * @param g2 other network\r\n     * @param c1\r\n     * @param c2\r\n     * @param c3\r\n     */\r\n    distance(g2, c1, c2, c3) {\r\n        // set node indices\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            this.nodes[i].index = i;\r\n        }\r\n        // set node indices\r\n        for (let i = 0; i < g2.nodes.length; i++) {\r\n            g2.nodes[i].index = i;\r\n        }\r\n        let indexG1 = 0;\r\n        let indexG2 = 0;\r\n        const connections1 = Array.from(this.connections).filter(conn => conn !== undefined);\r\n        const connections2 = Array.from(g2.connections).filter(conn => conn !== undefined);\r\n        TimSort.sort(connections1, (a, b) => {\r\n            return a.getInnovationID() - b.getInnovationID();\r\n        });\r\n        TimSort.sort(connections2, (a, b) => {\r\n            return a.getInnovationID() - b.getInnovationID();\r\n        });\r\n        const highestInnovationID1 = connections1[connections1.length - 1].getInnovationID();\r\n        const highestInnovationID2 = connections2[connections2.length - 1].getInnovationID();\r\n        if (highestInnovationID1 < highestInnovationID2) {\r\n            return g2.distance(this, c1, c2, c3);\r\n        }\r\n        let disjointGenes = 0;\r\n        let totalWeightDiff = 0;\r\n        let similarGenes = 0;\r\n        while (indexG1 < connections1.length && indexG2 < connections2.length) {\r\n            const gene1 = connections1[indexG1];\r\n            const gene2 = connections2[indexG2];\r\n            if (gene1 === undefined || gene2 === undefined) {\r\n                throw Error('HERE');\r\n            }\r\n            const in1 = gene1.getInnovationID();\r\n            const in2 = gene2.getInnovationID();\r\n            if (in1 === in2) {\r\n                // similarGenes\r\n                indexG1++;\r\n                indexG2++;\r\n                totalWeightDiff += Math.abs(gene1.weight - gene2.weight);\r\n                similarGenes++;\r\n            }\r\n            else if (indexG1 > indexG2) {\r\n                // disjoint of b\r\n                indexG2++;\r\n                disjointGenes++;\r\n            }\r\n            else {\r\n                // disjoint of a\r\n                indexG1++;\r\n                disjointGenes++;\r\n            }\r\n        }\r\n        totalWeightDiff /= similarGenes;\r\n        const excessGenes = this.connections.size - indexG1;\r\n        let N = Math.max(this.connections.size, g2.connections.size);\r\n        if (N < 20) {\r\n            N = 1;\r\n        }\r\n        return ((c1 * excessGenes) / N + (c2 * disjointGenes) / N + c3 * totalWeightDiff);\r\n    }\r\n    /**\r\n     * Performs one training epoch and returns the error - this is a private function used in `self.train`\r\n     *\r\n     * @private\r\n     *\r\n     * @returns {number}\r\n     */\r\n    trainEpoch(options) {\r\n        let errorSum = 0;\r\n        for (let i = 0; i < options.dataset.length; i++) {\r\n            const input = options.dataset[i].input;\r\n            const correctOutput = options.dataset[i].output;\r\n            const update = (i + 1) % options.batchSize === 0 || i + 1 === options.dataset.length;\r\n            const output = this.activate(input, {\r\n                dropoutRate: options.dropoutRate,\r\n            });\r\n            this.propagate(correctOutput, {\r\n                rate: options.trainingRate,\r\n                momentum: options.momentum,\r\n                update,\r\n            });\r\n            errorSum += options.loss(correctOutput, output);\r\n        }\r\n        return errorSum / options.dataset.length;\r\n    }\r\n}\r\nexports.Network = Network;\r\n//# sourceMappingURL=Network.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Network.js?");

/***/ }),

/***/ "./build/src/architecture/Node.js":
/*!****************************************!*\
  !*** ./build/src/architecture/Node.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Node = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Mutation_1 = __webpack_require__(/*! ../methods/Mutation */ \"./build/src/methods/Mutation.js\");\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst Connection_1 = __webpack_require__(/*! ./Connection */ \"./build/src/architecture/Connection.js\");\r\n/**\r\n * Creates a new neuron/node\r\n *\r\n * Neurons are the basic unit of the neural network. They can be connected together, or used to gate connections between other neurons. A Neuron can perform basically 4 operations: form connections, gate connections, activate and [propagate](https://www.youtube.com/watch?v=Ilg3gGewQ5U).\r\n *\r\n * For more information check:\r\n * - [BecomingHuman](https://becominghuman.ai/what-is-an-artificial-neuron-8b2e421ce42e)\r\n * - [Wikipedia](https://en.wikipedia.org/wiki/Artificial_neuron)\r\n * - [Neataptic](https://wagenaartje.github.io/neataptic/docs/architecture/node/)\r\n * - [Synaptic](https://github.com/cazala/synaptic/wiki/Neural-Networks-101)\r\n * - [Keras](https://keras.io/backend/#bias_add)\r\n */\r\nclass Node {\r\n    constructor(type = NodeType_1.NodeType.HIDDEN) {\r\n        this.type = type;\r\n        this.bias = Utils_1.randDouble(-1, 1);\r\n        this.squash = activations_1.Logistic;\r\n        this.activation = 0;\r\n        this.derivativeState = 1;\r\n        this.state = 0;\r\n        this.prevState = 0;\r\n        this.mask = 1;\r\n        this.deltaBiasPrevious = 0;\r\n        this.deltaBiasTotal = 0;\r\n        this.incoming = new Set();\r\n        this.outgoing = new Set();\r\n        this.gated = new Set();\r\n        this.selfConnection = new Connection_1.Connection(this, this, 0);\r\n        this.errorResponsibility = 0;\r\n        this.errorProjected = 0;\r\n        this.errorGated = 0;\r\n        this.index = NaN;\r\n    }\r\n    /**\r\n     * Convert a json object to a node\r\n     *\r\n     * @param json A node represented as a JSON object\r\n     *\r\n     * @returns itself\r\n     */\r\n    fromJSON(json) {\r\n        this.bias = json.bias;\r\n        this.type = json.type;\r\n        this.squash = activations_1.ALL_ACTIVATIONS.filter(activation => activation.name === json.squash)[0];\r\n        this.mask = json.mask;\r\n        this.index = json.index;\r\n        this.errorResponsibility = json.errorResponsibility;\r\n        this.errorProjected = json.errorProjected;\r\n        this.errorGated = json.errorGated;\r\n        this.deltaBiasPrevious = json.deltaBiasPrevious;\r\n        this.deltaBiasTotal = json.deltaBiasTotal;\r\n        this.derivativeState = json.derivativeState;\r\n        this.state = json.state;\r\n        this.prevState = json.prevState;\r\n        this.activation = json.activation;\r\n        return this;\r\n    }\r\n    /**\r\n     * Clears this node's state information - _i.e. resets node and its connections to \"factory settings\"_\r\n     *\r\n     * `node.clear()` is useful for predicting time series.\r\n     */\r\n    clear() {\r\n        this.incoming.forEach(connection => {\r\n            connection.eligibility = 0;\r\n            connection.xTrace.clear();\r\n        });\r\n        this.gated.forEach(conn => (conn.gain = 0));\r\n        this.errorResponsibility = this.errorProjected = this.errorGated = 0;\r\n        this.prevState = this.state = this.activation = 0;\r\n    }\r\n    /**\r\n     * Mutates the node's bias\r\n     *\r\n     * @param method The method is needed for the min and max value of the node's bias otherwise a range of [-1,1] is chosen\r\n     */\r\n    mutateBias(method = new Mutation_1.ModBiasMutation()) {\r\n        this.bias += Utils_1.randDouble(method.min, method.max); // add a random value in range [min,max)\r\n    }\r\n    /**\r\n     * Mutates the node's activation function\r\n     */\r\n    mutateActivation(allowedActivations = Object.values(activations_1.ALL_ACTIVATIONS)) {\r\n        // pick a random activation from allowed activations except the current activation\r\n        const possible = allowedActivations.filter(activation => activation !== this.squash);\r\n        if (possible.length > 0) {\r\n            this.squash = Utils_1.pickRandom(possible);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the given node(s) are have outgoing connections to this node\r\n     *\r\n     * @param node Checks if `node(s)` have outgoing connections into this node\r\n     *\r\n     * @return Returns true, if every node(s) has an outgoing connection into this node\r\n     */\r\n    isProjectedBy(node) {\r\n        if (node === this) {\r\n            // self connection\r\n            return this.selfConnection.weight !== 0; // is projected, if weight of self connection is unequal 0\r\n        }\r\n        else {\r\n            return Array.from(this.incoming)\r\n                .map(conn => conn.from)\r\n                .includes(node); // check every incoming connection for node\r\n        }\r\n    }\r\n    /**\r\n     * Checks if this node has an outgoing connection(s) into the given node(s)\r\n     *\r\n     * @param node Checks if this node has outgoing connection(s) into `node(s)`\r\n     *\r\n     * @returns Returns true, if this node has an outgoing connection into every node(s)\r\n     */\r\n    isProjectingTo(node) {\r\n        if (node === this) {\r\n            // self connection\r\n            return this.selfConnection.weight !== 0; // is projected, if weight of self connection is unequal 0\r\n        }\r\n        else {\r\n            return Array.from(this.outgoing)\r\n                .map(conn => conn.to)\r\n                .includes(node); // check every outgoing connection for node\r\n        }\r\n    }\r\n    /**\r\n     * This node gates (influences) the given connection\r\n     *\r\n     * @param connection Connection to be gated (influenced) by a neuron\r\n     */\r\n    addGate(connection) {\r\n        this.gated.add(connection);\r\n        connection.gateNode = this;\r\n    }\r\n    /**\r\n     * Stops this node from gating (manipulating) the given connection(s)\r\n     *\r\n     * @param connection Connections to remove gate - _i.e. remove this node from_\r\n     */\r\n    removeGate(connection) {\r\n        this.gated.delete(connection);\r\n        connection.gateNode = null;\r\n        connection.gain = 1;\r\n    }\r\n    /**\r\n     * Connects this node to the given node(s)\r\n     *\r\n     * @param target Node(s) to project connection(s) to\r\n     * @param weight Initial connection(s) [weight](https://en.wikipedia.org/wiki/Synaptic_weight)\r\n     * @param twoSided If `true` connect nodes to each other\r\n     */\r\n    connect(target, weight = 1, twoSided = false) {\r\n        if (target === this) {\r\n            // self connection\r\n            this.selfConnection.weight = weight;\r\n            return this.selfConnection;\r\n        }\r\n        else if (this.isProjectingTo(target)) {\r\n            throw new ReferenceError('There is already a connection!'); // already connected\r\n        }\r\n        else {\r\n            const connection = new Connection_1.Connection(this, target, weight); // create new connection\r\n            // add it to the arrays\r\n            this.outgoing.add(connection);\r\n            target.incoming.add(connection);\r\n            if (twoSided) {\r\n                target.connect(this); // connect in the other direction\r\n            }\r\n            return connection;\r\n        }\r\n    }\r\n    /**\r\n     * Disconnects this node from the given node(s)\r\n     *\r\n     * @param node Node(s) to remove connection(s) to\r\n     * @param twoSided=false If `true` disconnects nodes from each other (i.e. both sides)\r\n     */\r\n    disconnect(node, twoSided = false) {\r\n        if (node === this) {\r\n            // self connection\r\n            this.selfConnection.weight = 0; // set weight to 0\r\n            return this.selfConnection;\r\n        }\r\n        const connections = Array.from(this.outgoing).filter(conn => conn.to === node);\r\n        if (connections.length === 0) {\r\n            throw new Error('No Connection found');\r\n        }\r\n        const connection = connections[0];\r\n        // remove it from the arrays\r\n        this.outgoing.delete(connection);\r\n        connection.to.incoming.delete(connection);\r\n        if (connection.gateNode !== undefined && connection.gateNode !== null) {\r\n            connection.gateNode.removeGate(connection); // if connection is gated -> remove gate\r\n        }\r\n        if (twoSided) {\r\n            node.disconnect(this); // disconnect the other direction\r\n        }\r\n        return connection;\r\n    }\r\n    /**\r\n     * Backpropagate the error (a.k.a. learn).\r\n     *\r\n     * After an activation, you can teach the node what should have been the correct output (a.k.a. train). This is done by backpropagating. [Momentum](https://www.willamette.edu/~gorr/classes/cs449/momrate.html) adds a fraction of the previous weight update to the current one. When the gradient keeps pointing in the same direction, this will increase the size of the steps taken towards the minimum.\r\n     *\r\n     * If you combine a high learning rate with a lot of momentum, you will rush past the minimum (of the error function) with huge steps. It is therefore often necessary to reduce the global learning rate µ when using a lot of momentum (m close to 1).\r\n     *\r\n     * @param target The target value (i.e. \"the value the network SHOULD have given\")\r\n     * @param options More options for propagation\r\n     *\r\n     * @see [Regularization Neataptic](https://wagenaartje.github.io/neataptic/docs/methods/regularization/)\r\n     * @see [What is backpropagation | YouTube](https://www.youtube.com/watch?v=Ilg3gGewQ5U)\r\n     */\r\n    propagate(target, options = {}) {\r\n        var _a, _b, _c;\r\n        options.momentum = (_a = options.momentum) !== null && _a !== void 0 ? _a : 0;\r\n        options.rate = (_b = options.rate) !== null && _b !== void 0 ? _b : 0.3;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : true;\r\n        if (target !== undefined && Number.isFinite(target)) {\r\n            this.errorResponsibility = this.errorProjected = target - this.activation;\r\n        }\r\n        else {\r\n            this.errorProjected = 0;\r\n            this.outgoing.forEach(connection => {\r\n                this.errorProjected +=\r\n                    connection.to.errorResponsibility *\r\n                        connection.weight *\r\n                        connection.gain;\r\n            });\r\n            this.errorProjected *= this.derivativeState;\r\n            this.errorGated = 0;\r\n            this.gated.forEach(connection => {\r\n                let influence;\r\n                if (connection.to.selfConnection.gateNode === this) {\r\n                    // self connection is gated with this node\r\n                    influence =\r\n                        connection.to.prevState +\r\n                            connection.weight * connection.from.activation;\r\n                }\r\n                else {\r\n                    influence = connection.weight * connection.from.activation;\r\n                }\r\n                this.errorGated += connection.to.errorResponsibility * influence;\r\n            });\r\n            this.errorGated *= this.derivativeState;\r\n            this.errorResponsibility = this.errorProjected + this.errorGated;\r\n        }\r\n        this.incoming.forEach(connection => {\r\n            var _a, _b;\r\n            // calculate gradient\r\n            let gradient = this.errorProjected * connection.eligibility;\r\n            connection.xTrace.forEach((xTraceValue, xTraceNode) => (gradient += xTraceNode.errorResponsibility * xTraceValue));\r\n            connection.deltaWeightsTotal +=\r\n                ((_a = options.rate) !== null && _a !== void 0 ? _a : 0.3) * gradient * this.mask;\r\n            if (options.update) {\r\n                connection.deltaWeightsTotal +=\r\n                    ((_b = options.momentum) !== null && _b !== void 0 ? _b : 0) * connection.deltaWeightsPrevious;\r\n                connection.weight += connection.deltaWeightsTotal;\r\n                connection.deltaWeightsPrevious = connection.deltaWeightsTotal;\r\n                connection.deltaWeightsTotal = 0;\r\n            }\r\n        });\r\n        this.deltaBiasTotal += options.rate * this.errorResponsibility;\r\n        if (options.update) {\r\n            this.deltaBiasTotal += options.momentum * this.deltaBiasPrevious;\r\n            this.bias += this.deltaBiasTotal;\r\n            this.deltaBiasPrevious = this.deltaBiasTotal;\r\n            this.deltaBiasTotal = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Actives the node.\r\n     *\r\n     * When a neuron activates, it computes its state from all its input connections and 'squashes' it using its activation function, and returns the output (activation).\r\n     *\r\n     * You can also provide the activation (a float between 0 and 1) as a parameter, which is useful for neurons in the input layer.\r\n     *\r\n     * @param [input] Environment signal (i.e. optional numerical value passed to the network as input)  - _should only be passed in input neurons_\r\n     * @param [trace] Controls whether traces are created when activation happens (a trace is meta information left behind for different uses, e.g. backpropagation).\r\n     *\r\n     * @returns A neuron's ['Squashed'](https://medium.com/the-theory-of-everything/understanding-activation-functions-in-neural-networks-9491262884e0) output value\r\n     */\r\n    activate(input, trace = true) {\r\n        if (input !== undefined) {\r\n            return (this.activation = input);\r\n        }\r\n        else if (this.isInputNode()) {\r\n            throw new ReferenceError('There is no input given to an input node!');\r\n        }\r\n        if (trace) {\r\n            this.prevState = this.state;\r\n            this.state =\r\n                this.selfConnection.gain * this.selfConnection.weight * this.state +\r\n                    this.bias;\r\n            this.incoming.forEach(conn => {\r\n                this.state += conn.from.activation * conn.weight * conn.gain;\r\n            });\r\n            this.activation = this.squash(this.state, false) * this.mask;\r\n            this.derivativeState = this.squash(this.state, true);\r\n            // store traces\r\n            const nodes = [];\r\n            const influences = [];\r\n            // Adjust 'gain' (to gated connections) & Build traces\r\n            this.gated.forEach(connection => {\r\n                connection.gain = this.activation;\r\n                // Build traces\r\n                const index = nodes.indexOf(connection.to);\r\n                if (index > -1) {\r\n                    // Node & influence exist\r\n                    influences[index] += connection.weight * connection.from.activation;\r\n                }\r\n                else {\r\n                    // Add node & corresponding influence\r\n                    nodes.push(connection.to);\r\n                    if (connection.to.selfConnection.gateNode === this) {\r\n                        influences.push(connection.weight * connection.from.activation +\r\n                            connection.to.prevState);\r\n                    }\r\n                    else {\r\n                        influences.push(connection.weight * connection.from.activation);\r\n                    }\r\n                }\r\n            });\r\n            // Forwarding 'xTrace' (to incoming connections)\r\n            this.incoming.forEach(connection => {\r\n                var _a;\r\n                connection.eligibility =\r\n                    this.selfConnection.gain *\r\n                        this.selfConnection.weight *\r\n                        connection.eligibility +\r\n                        connection.from.activation * connection.gain;\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                    const node = nodes[i];\r\n                    const influence = influences[i];\r\n                    if (connection.xTrace.has(node)) {\r\n                        connection.xTrace.set(node, node.selfConnection.gain *\r\n                            node.selfConnection.weight *\r\n                            ((_a = connection.xTrace.get(node)) !== null && _a !== void 0 ? _a : 0) +\r\n                            this.derivativeState * connection.eligibility * influence);\r\n                    }\r\n                    else {\r\n                        connection.xTrace.set(node, this.derivativeState * connection.eligibility * influence);\r\n                    }\r\n                }\r\n            });\r\n            return this.activation;\r\n        }\r\n        else {\r\n            if (this.isInputNode())\r\n                return (this.activation = 0);\r\n            this.state =\r\n                this.selfConnection.gain * this.selfConnection.weight * this.state +\r\n                    this.bias;\r\n            this.incoming.forEach(connection => (this.state +=\r\n                connection.from.activation * connection.weight * connection.gain));\r\n            this.activation = this.squash(this.state, false);\r\n            // Adjust gain\r\n            this.gated.forEach(connection => (connection.gain = this.activation));\r\n            return this.activation;\r\n        }\r\n    }\r\n    /**\r\n     * Converts the node to a json object that can later be converted back\r\n     *\r\n     * @returns A node representing json object\r\n     */\r\n    toJSON() {\r\n        return {\r\n            bias: this.bias,\r\n            type: this.type,\r\n            squash: this.squash.name,\r\n            mask: this.mask,\r\n            index: this.index,\r\n            errorResponsibility: this.errorResponsibility,\r\n            errorProjected: this.errorProjected,\r\n            errorGated: this.errorGated,\r\n            deltaBiasPrevious: this.deltaBiasPrevious,\r\n            deltaBiasTotal: this.deltaBiasTotal,\r\n            derivativeState: this.derivativeState,\r\n            state: this.state,\r\n            prevState: this.prevState,\r\n            activation: this.activation,\r\n        };\r\n    }\r\n    /**\r\n     * Is this a input Node?\r\n     */\r\n    isInputNode() {\r\n        return this.type === NodeType_1.NodeType.INPUT;\r\n    }\r\n    /**\r\n     * Is this a hidden Node?\r\n     */\r\n    isHiddenNode() {\r\n        return this.type === NodeType_1.NodeType.HIDDEN;\r\n    }\r\n    /**\r\n     * Is this a output Node?\r\n     */\r\n    isOutputNode() {\r\n        return this.type === NodeType_1.NodeType.OUTPUT;\r\n    }\r\n    /**\r\n     * Set bias.\r\n     *\r\n     * @param bias the new bias value\r\n     */\r\n    setBias(bias) {\r\n        this.bias = bias;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set activation type\r\n     *\r\n     * @param activation the new activation type\r\n     */\r\n    setActivationType(activation) {\r\n        this.squash = activation;\r\n        return this;\r\n    }\r\n}\r\nexports.Node = Node;\r\n//# sourceMappingURL=Node.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Node.js?");

/***/ }),

/***/ "./build/src/architecture/Nodes/ActivationNode.js":
/*!********************************************************!*\
  !*** ./build/src/architecture/Nodes/ActivationNode.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ActivationNode = void 0;\r\nconst Utils_1 = __webpack_require__(/*! ../../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst ConstantNode_1 = __webpack_require__(/*! ./ConstantNode */ \"./build/src/architecture/Nodes/ConstantNode.js\");\r\n/**\r\n * Activation node\r\n */\r\nclass ActivationNode extends ConstantNode_1.ConstantNode {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Actives the node.\r\n     *\r\n     * When a neuron activates, it computes its state from all its input connections and 'squashes' it using its activation function, and returns the output (activation).\r\n     *\r\n     * You can also provide the activation (a float between 0 and 1) as a parameter, which is useful for neurons in the input layer.\r\n     *\r\n     * @returns A neuron's output value\r\n     */\r\n    activate() {\r\n        this.prevState = this.state;\r\n        const incomingStates = Array.from(this.incoming).map(conn => conn.from.activation * conn.weight * conn.gain);\r\n        if (incomingStates.length !== 1) {\r\n            throw new ReferenceError('Only 1 incoming connections is allowed!');\r\n        }\r\n        this.state = incomingStates[0];\r\n        this.activation = this.squash(this.state, false) * this.mask;\r\n        this.derivativeState = this.squash(this.state, true);\r\n        return this.activation;\r\n    }\r\n    /**\r\n     * Backpropagate the error (a.k.a. learn).\r\n     *\r\n     * After an activation, you can teach the node what should have been the correct output (a.k.a. train). This is done by backpropagating. [Momentum](https://www.willamette.edu/~gorr/classes/cs449/momrate.html) adds a fraction of the previous weight update to the current one. When the gradient keeps pointing in the same direction, this will increase the size of the steps taken towards the minimum.\r\n     *\r\n     * If you combine a high learning rate with a lot of momentum, you will rush past the minimum (of the error function) with huge steps. It is therefore often necessary to reduce the global learning rate µ when using a lot of momentum (m close to 1).\r\n     *\r\n     * @param target The target value (i.e. \"the value the network SHOULD have given\")\r\n     * @param options More options for propagation\r\n     */\r\n    propagate(target, options) {\r\n        var _a, _b, _c;\r\n        options.momentum = (_a = options.momentum) !== null && _a !== void 0 ? _a : 0;\r\n        options.rate = (_b = options.rate) !== null && _b !== void 0 ? _b : 0.3;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : true;\r\n        const connectionsStates = Array.from(this.outgoing).map(conn => conn.to.errorResponsibility * conn.weight * conn.gain);\r\n        this.errorResponsibility = this.errorProjected =\r\n            Utils_1.sum(connectionsStates) * this.derivativeState;\r\n        this.incoming.forEach(connection => {\r\n            var _a, _b;\r\n            // calculate gradient\r\n            let gradient = this.errorProjected * connection.eligibility;\r\n            connection.xTrace.forEach((value, key) => {\r\n                gradient += key.errorResponsibility * value;\r\n            });\r\n            connection.deltaWeightsTotal +=\r\n                ((_a = options.rate) !== null && _a !== void 0 ? _a : 0.3) * gradient * this.mask;\r\n            if (options.update) {\r\n                connection.deltaWeightsTotal +=\r\n                    ((_b = options.momentum) !== null && _b !== void 0 ? _b : 0) * connection.deltaWeightsPrevious;\r\n                connection.weight += connection.deltaWeightsTotal;\r\n                connection.deltaWeightsPrevious = connection.deltaWeightsTotal;\r\n                connection.deltaWeightsTotal = 0;\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.ActivationNode = ActivationNode;\r\n//# sourceMappingURL=ActivationNode.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Nodes/ActivationNode.js?");

/***/ }),

/***/ "./build/src/architecture/Nodes/ConstantNode.js":
/*!******************************************************!*\
  !*** ./build/src/architecture/Nodes/ConstantNode.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConstantNode = void 0;\r\nconst NodeType_1 = __webpack_require__(/*! ../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Node_1 = __webpack_require__(/*! ../Node */ \"./build/src/architecture/Node.js\");\r\n/**\r\n * Constant node\r\n */\r\nclass ConstantNode extends Node_1.Node {\r\n    constructor() {\r\n        super(NodeType_1.NodeType.HIDDEN);\r\n        this.bias = 1;\r\n    }\r\n    /**\r\n     * Create a constant node from json object.\r\n     *\r\n     * @param json the json object representing the node\r\n     *\r\n     * @returns the created node\r\n     */\r\n    fromJSON(json) {\r\n        var _a;\r\n        this.index = (_a = json.index) !== null && _a !== void 0 ? _a : -1;\r\n        return this;\r\n    }\r\n    /**\r\n     * Convert this node into a json object.\r\n     *\r\n     * @returns the json object representing this node\r\n     */\r\n    toJSON() {\r\n        return super.toJSON();\r\n    }\r\n    /**\r\n     * Bias mutations aren't allowed for a constant node.\r\n     */\r\n    mutateBias() {\r\n        throw new ReferenceError('Cannot mutate a pool node!');\r\n    }\r\n    /**\r\n     * Activation mutations aren't allowed for a constant node.\r\n     */\r\n    mutateActivation() {\r\n        throw new ReferenceError('Cannot mutate a pool node!');\r\n    }\r\n    /**\r\n     * Constant nodes can't gate a connection.\r\n     */\r\n    addGate() {\r\n        throw new ReferenceError(\"A pool node can't gate a connection!\");\r\n    }\r\n    /**\r\n     * Constant nodes can't gate a connection.\r\n     */\r\n    removeGate() {\r\n        throw new ReferenceError(\"A pool node can't gate a connection!\");\r\n    }\r\n    /**\r\n     * Can't set the bias of a constant node.\r\n     */\r\n    setBias() {\r\n        throw new ReferenceError('Cannot set the bias of a pool node!');\r\n    }\r\n}\r\nexports.ConstantNode = ConstantNode;\r\n//# sourceMappingURL=ConstantNode.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Nodes/ConstantNode.js?");

/***/ }),

/***/ "./build/src/architecture/Nodes/DropoutNode.js":
/*!*****************************************************!*\
  !*** ./build/src/architecture/Nodes/DropoutNode.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DropoutNode = void 0;\r\nconst Utils_1 = __webpack_require__(/*! ../../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst ConstantNode_1 = __webpack_require__(/*! ./ConstantNode */ \"./build/src/architecture/Nodes/ConstantNode.js\");\r\n/**\r\n * Dropout node\r\n */\r\nclass DropoutNode extends ConstantNode_1.ConstantNode {\r\n    constructor(probability) {\r\n        super();\r\n        this.probability = probability;\r\n        this.droppedOut = false;\r\n    }\r\n    /**\r\n     * Actives the node.\r\n     *\r\n     * When a neuron activates, it computes its state from all its input connections and 'squashes' it using its activation function, and returns the output (activation).\r\n     *\r\n     * You can also provide the activation (a float between 0 and 1) as a parameter, which is useful for neurons in the input layer.\r\n     *\r\n     * @returns A neuron's output value\r\n     */\r\n    activate() {\r\n        if (this.incoming.size !== 1) {\r\n            throw new RangeError('Dropout node should have exactly one incoming connection!');\r\n        }\r\n        const incomingConnection = Array.from(this.incoming)[0];\r\n        // https://stats.stackexchange.com/a/219240\r\n        if (Utils_1.randDouble(0, 1) < this.probability) {\r\n            // DROPOUT\r\n            this.droppedOut = true;\r\n            this.state = 0;\r\n        }\r\n        else {\r\n            this.droppedOut = false;\r\n            this.state =\r\n                incomingConnection.from.activation *\r\n                    incomingConnection.weight *\r\n                    incomingConnection.gain;\r\n            this.state *= 1 / (1 - this.probability);\r\n        }\r\n        this.activation = this.squash(this.state, false) * this.mask;\r\n        // Adjust gain\r\n        this.gated.forEach(conn => (conn.gain = this.activation));\r\n        return this.activation;\r\n    }\r\n    /**\r\n     * Backpropagate the error (a.k.a. learn).\r\n     *\r\n     * After an activation, you can teach the node what should have been the correct output (a.k.a. train). This is done by backpropagating. [Momentum](https://www.willamette.edu/~gorr/classes/cs449/momrate.html) adds a fraction of the previous weight update to the current one. When the gradient keeps pointing in the same direction, this will increase the size of the steps taken towards the minimum.\r\n     *\r\n     * If you combine a high learning rate with a lot of momentum, you will rush past the minimum (of the error function) with huge steps. It is therefore often necessary to reduce the global learning rate µ when using a lot of momentum (m close to 1).\r\n     *\r\n     * @param target The target value (i.e. \"the value the network SHOULD have given\")\r\n     * @param options More options for propagation\r\n     */\r\n    propagate(target, options = {}) {\r\n        var _a, _b, _c;\r\n        options.momentum = (_a = options.momentum) !== null && _a !== void 0 ? _a : 0;\r\n        options.rate = (_b = options.rate) !== null && _b !== void 0 ? _b : 0.3;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : true;\r\n        const connectionsStates = Array.from(this.outgoing).map(conn => conn.to.errorResponsibility * conn.weight * conn.gain);\r\n        this.errorResponsibility = this.errorProjected =\r\n            Utils_1.sum(connectionsStates) / (1 - this.probability);\r\n        if (this.incoming.size !== 1) {\r\n            throw new RangeError('Dropout node should have exactly one incoming connection!');\r\n        }\r\n        const connection = Array.from(this.incoming)[0];\r\n        // calculate gradient\r\n        if (!this.droppedOut) {\r\n            let gradient = this.errorProjected * connection.eligibility;\r\n            connection.xTrace.forEach((value, key) => {\r\n                gradient += key.errorResponsibility * value;\r\n            });\r\n            if (options.update) {\r\n                connection.deltaWeightsTotal +=\r\n                    options.rate * gradient * this.mask +\r\n                        options.momentum * connection.deltaWeightsPrevious;\r\n                connection.weight += connection.deltaWeightsTotal;\r\n                connection.deltaWeightsPrevious = connection.deltaWeightsTotal;\r\n                connection.deltaWeightsTotal = 0;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Create a constant node from json object.\r\n     *\r\n     * @param json the json object representing the node\r\n     *\r\n     * @returns the created node\r\n     */\r\n    fromJSON(json) {\r\n        super.fromJSON(json);\r\n        this.probability = json.probability;\r\n        return this;\r\n    }\r\n    /**\r\n     * Convert this node into a json object.\r\n     *\r\n     * @returns the json object representing this node\r\n     */\r\n    toJSON() {\r\n        return Object.assign(super.toJSON(), {\r\n            probability: this.probability,\r\n        });\r\n    }\r\n}\r\nexports.DropoutNode = DropoutNode;\r\n//# sourceMappingURL=DropoutNode.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Nodes/DropoutNode.js?");

/***/ }),

/***/ "./build/src/architecture/Nodes/NoiseNode.js":
/*!***************************************************!*\
  !*** ./build/src/architecture/Nodes/NoiseNode.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NoiseNode = void 0;\r\nconst NodeType_1 = __webpack_require__(/*! ../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Utils_1 = __webpack_require__(/*! ../../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst ConstantNode_1 = __webpack_require__(/*! ./ConstantNode */ \"./build/src/architecture/Nodes/ConstantNode.js\");\r\n/**\r\n * Noise node\r\n */\r\nclass NoiseNode extends ConstantNode_1.ConstantNode {\r\n    constructor(options = {}) {\r\n        var _a;\r\n        super();\r\n        this.noiseType = (_a = options.noiseType) !== null && _a !== void 0 ? _a : NodeType_1.NoiseNodeType.GAUSSIAN_NOISE;\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * Actives the node.\r\n     *\r\n     * When a neuron activates, it computes its state from all its input connections and 'squashes' it using its activation function, and returns the output (activation).\r\n     *\r\n     * You can also provide the activation (a float between 0 and 1) as a parameter, which is useful for neurons in the input layer.\r\n     *\r\n     * @returns A neuron's output value\r\n     */\r\n    activate() {\r\n        var _a, _b, _c, _d;\r\n        this.prevState = this.state;\r\n        const incomingStates = Array.from(this.incoming).map(conn => conn.from.activation * conn.weight * conn.gain);\r\n        switch (this.noiseType) {\r\n            case NodeType_1.NoiseNodeType.GAUSSIAN_NOISE:\r\n                this.state =\r\n                    Utils_1.avg(incomingStates) +\r\n                        Utils_1.generateGaussian((_b = (_a = this.options.gaussian) === null || _a === void 0 ? void 0 : _a.mean) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this.options.gaussian) === null || _c === void 0 ? void 0 : _c.deviation) !== null && _d !== void 0 ? _d : 2);\r\n                break;\r\n            default:\r\n                throw new ReferenceError('Cannot activate this noise type!');\r\n        }\r\n        this.activation = this.squash(this.state, false) * this.mask;\r\n        this.derivativeState = this.squash(this.state, true);\r\n        return this.activation;\r\n    }\r\n    /**\r\n     * Backpropagate the error (a.k.a. learn).\r\n     *\r\n     * After an activation, you can teach the node what should have been the correct output (a.k.a. train). This is done by backpropagating. [Momentum](https://www.willamette.edu/~gorr/classes/cs449/momrate.html) adds a fraction of the previous weight update to the current one. When the gradient keeps pointing in the same direction, this will increase the size of the steps taken towards the minimum.\r\n     *\r\n     * If you combine a high learning rate with a lot of momentum, you will rush past the minimum (of the error function) with huge steps. It is therefore often necessary to reduce the global learning rate µ when using a lot of momentum (m close to 1).\r\n     *\r\n     * @param target The target value (i.e. \"the value the network SHOULD have given\")\r\n     * @param options More options for propagation\r\n     */\r\n    propagate(target, options = {}) {\r\n        var _a, _b, _c;\r\n        options.momentum = (_a = options.momentum) !== null && _a !== void 0 ? _a : 0;\r\n        options.rate = (_b = options.rate) !== null && _b !== void 0 ? _b : 0.3;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : true;\r\n        const connectionsStates = Array.from(this.outgoing).map(conn => conn.to.errorResponsibility * conn.weight * conn.gain);\r\n        this.errorResponsibility = this.errorProjected =\r\n            Utils_1.sum(connectionsStates) * this.derivativeState;\r\n        this.incoming.forEach(connection => {\r\n            var _a, _b;\r\n            // calculate gradient\r\n            let gradient = this.errorProjected * connection.eligibility;\r\n            connection.xTrace.forEach((value, key) => {\r\n                gradient += key.errorResponsibility * value;\r\n            });\r\n            connection.deltaWeightsTotal +=\r\n                ((_a = options.rate) !== null && _a !== void 0 ? _a : 0.3) * gradient * this.mask;\r\n            if (options.update) {\r\n                connection.deltaWeightsTotal +=\r\n                    ((_b = options.momentum) !== null && _b !== void 0 ? _b : 0) * connection.deltaWeightsPrevious;\r\n                connection.weight += connection.deltaWeightsTotal;\r\n                connection.deltaWeightsPrevious = connection.deltaWeightsTotal;\r\n                connection.deltaWeightsTotal = 0;\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.NoiseNode = NoiseNode;\r\n//# sourceMappingURL=NoiseNode.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Nodes/NoiseNode.js?");

/***/ }),

/***/ "./build/src/architecture/Nodes/PoolNode.js":
/*!**************************************************!*\
  !*** ./build/src/architecture/Nodes/PoolNode.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PoolNode = void 0;\r\nconst NodeType_1 = __webpack_require__(/*! ../../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Utils_1 = __webpack_require__(/*! ../../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst ConstantNode_1 = __webpack_require__(/*! ./ConstantNode */ \"./build/src/architecture/Nodes/ConstantNode.js\");\r\n/**\r\n * Pool node\r\n */\r\nclass PoolNode extends ConstantNode_1.ConstantNode {\r\n    constructor(poolingType = NodeType_1.PoolNodeType.MAX_POOLING) {\r\n        super();\r\n        this.poolingType = poolingType;\r\n        this.receivingNode = null;\r\n    }\r\n    /**\r\n     * Create a constant node from json object.\r\n     *\r\n     * @param json the json object representing the node\r\n     *\r\n     * @returns the created node\r\n     */\r\n    fromJSON(json) {\r\n        super.fromJSON(json);\r\n        this.poolingType = json.poolType;\r\n        return this;\r\n    }\r\n    /**\r\n     * Actives the node.\r\n     *\r\n     * When a neuron activates, it computes its state from all its input connections and 'squashes' it using its activation function, and returns the output (activation).\r\n     *\r\n     * You can also provide the activation (a float between 0 and 1) as a parameter, which is useful for neurons in the input layer.\r\n     *\r\n     * @returns A neuron's output value\r\n     */\r\n    activate() {\r\n        const connections = Array.from(this.incoming);\r\n        const incomingStates = connections.map(conn => conn.from.activation * conn.weight * conn.gain);\r\n        if (this.poolingType === NodeType_1.PoolNodeType.MAX_POOLING) {\r\n            const index = Utils_1.maxValueIndex(incomingStates);\r\n            this.receivingNode = connections[index].from;\r\n            this.state = incomingStates[index];\r\n        }\r\n        else if (this.poolingType === NodeType_1.PoolNodeType.AVG_POOLING) {\r\n            this.state = Utils_1.avg(incomingStates);\r\n        }\r\n        else if (this.poolingType === NodeType_1.PoolNodeType.MIN_POOLING) {\r\n            const index = Utils_1.minValueIndex(incomingStates);\r\n            this.receivingNode = connections[index].from;\r\n            this.state = incomingStates[index];\r\n        }\r\n        else {\r\n            throw new ReferenceError('No valid pooling type! Type: ' + this.poolingType);\r\n        }\r\n        this.activation = this.squash(this.state, false) * this.mask;\r\n        if (this.poolingType === NodeType_1.PoolNodeType.AVG_POOLING) {\r\n            this.derivativeState = this.squash(this.state, true);\r\n        }\r\n        // Adjust gain\r\n        this.gated.forEach(conn => (conn.gain = this.activation));\r\n        return this.activation;\r\n    }\r\n    /**\r\n     * Backpropagate the error (a.k.a. learn).\r\n     *\r\n     * After an activation, you can teach the node what should have been the correct output (a.k.a. train). This is done by backpropagating. [Momentum](https://www.willamette.edu/~gorr/classes/cs449/momrate.html) adds a fraction of the previous weight update to the current one. When the gradient keeps pointing in the same direction, this will increase the size of the steps taken towards the minimum.\r\n     *\r\n     * If you combine a high learning rate with a lot of momentum, you will rush past the minimum (of the error function) with huge steps. It is therefore often necessary to reduce the global learning rate µ when using a lot of momentum (m close to 1).\r\n     *\r\n     * @param target The target value (i.e. \"the value the network SHOULD have given\")\r\n     * @param options More options for propagation\r\n     */\r\n    propagate(target, options = {}) {\r\n        var _a, _b, _c;\r\n        options.momentum = (_a = options.momentum) !== null && _a !== void 0 ? _a : 0;\r\n        options.rate = (_b = options.rate) !== null && _b !== void 0 ? _b : 0.3;\r\n        options.update = (_c = options.update) !== null && _c !== void 0 ? _c : true;\r\n        const connectionsStates = Array.from(this.outgoing).map(conn => conn.to.errorResponsibility * conn.weight * conn.gain);\r\n        this.errorResponsibility = this.errorProjected =\r\n            Utils_1.sum(connectionsStates) * this.derivativeState;\r\n        if (this.poolingType === NodeType_1.PoolNodeType.AVG_POOLING) {\r\n            this.incoming.forEach(connection => {\r\n                var _a, _b;\r\n                // calculate gradient\r\n                let gradient = this.errorProjected * connection.eligibility;\r\n                connection.xTrace.forEach((value, key) => {\r\n                    gradient += key.errorResponsibility * value;\r\n                });\r\n                connection.deltaWeightsTotal +=\r\n                    ((_a = options.rate) !== null && _a !== void 0 ? _a : 0.3) * gradient * this.mask;\r\n                if (options.update) {\r\n                    connection.deltaWeightsTotal +=\r\n                        ((_b = options.momentum) !== null && _b !== void 0 ? _b : 0) * connection.deltaWeightsPrevious;\r\n                    connection.weight += connection.deltaWeightsTotal;\r\n                    connection.deltaWeightsPrevious = connection.deltaWeightsTotal;\r\n                    connection.deltaWeightsTotal = 0;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // TODO: don't think that this is correct\r\n            // Passing only the connections that were used for getting the min or max\r\n            this.incoming.forEach(conn => {\r\n                conn.weight = this.receivingNode === conn.from ? 1 : 0;\r\n                conn.gain = this.receivingNode === conn.from ? 1 : 0;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Convert this node into a json object.\r\n     *\r\n     * @returns the json object representing this node\r\n     */\r\n    toJSON() {\r\n        return Object.assign(super.toJSON(), {\r\n            poolType: this.poolingType,\r\n        });\r\n    }\r\n}\r\nexports.PoolNode = PoolNode;\r\n//# sourceMappingURL=PoolNode.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Nodes/PoolNode.js?");

/***/ }),

/***/ "./build/src/architecture/Species.js":
/*!*******************************************!*\
  !*** ./build/src/architecture/Species.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Species = void 0;\r\nconst TimSort = __importStar(__webpack_require__(/*! timsort */ \"./node_modules/timsort/index.js\"));\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nconst Network_1 = __webpack_require__(/*! ./Network */ \"./build/src/architecture/Network.js\");\r\n/**\r\n * A class holding a species\r\n */\r\nclass Species {\r\n    constructor(representative) {\r\n        this.representative = representative;\r\n        this.representative.species = this;\r\n        this.members = new Set();\r\n        this.members.add(representative);\r\n        this._score = 0;\r\n        this.lastScore = 0;\r\n        this._stagnation = 0;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get score() {\r\n        return this._score;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get stagnation() {\r\n        return this._stagnation;\r\n    }\r\n    /**\r\n     * Puts a network to the species, after checking the distance\r\n     * @param network\r\n     * @param c1\r\n     * @param c2\r\n     * @param c3\r\n     * @param distanceThreshold\r\n     */\r\n    put(network, c1, c2, c3, distanceThreshold) {\r\n        if (network.distance(this.representative, c1, c2, c3) < distanceThreshold) {\r\n            this.forcePut(network);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Puts a network to the species without checking the distance\r\n     * @param network\r\n     */\r\n    forcePut(network) {\r\n        if (network === undefined) {\r\n            return;\r\n        }\r\n        this.members.add(network);\r\n        network.species = this;\r\n    }\r\n    /**\r\n     * Calculate the score of this species\r\n     */\r\n    evaluateScore() {\r\n        let sum = 0;\r\n        this.members.forEach(network => { var _a; return (sum += (_a = network.score) !== null && _a !== void 0 ? _a : 0); });\r\n        const score = sum / this.members.size;\r\n        if (this.lastScore < score) {\r\n            this._stagnation++;\r\n        }\r\n        else {\r\n            this._stagnation = 0;\r\n        }\r\n        this._score = score;\r\n    }\r\n    /**\r\n     * Reset this object\r\n     */\r\n    reset() {\r\n        this.representative = Utils_1.pickRandom(this.members);\r\n        this.members.forEach(genome => (genome.species = null));\r\n        this.members.clear();\r\n        this.members.add(this.representative);\r\n        this.representative.species = this;\r\n        this.lastScore = this.score;\r\n        this._score = 0;\r\n    }\r\n    /**\r\n     * Kill a specific percentage of networks\r\n     * @param percentage\r\n     */\r\n    kill(percentage) {\r\n        const arr = Array.from(this.members);\r\n        TimSort.sort(arr, (a, b) => {\r\n            return a.score === undefined || b.score === undefined\r\n                ? 0\r\n                : a.score - b.score;\r\n        });\r\n        const amount = Math.floor(percentage * this.members.size);\r\n        for (let i = 0; i < amount; i++) {\r\n            this.members.delete(arr[i]);\r\n            arr[i].species = null;\r\n        }\r\n    }\r\n    /**\r\n     * Create offspring\r\n     */\r\n    breed() {\r\n        return Network_1.Network.crossOver(Utils_1.pickRandom(this.members), Utils_1.pickRandom(this.members));\r\n    }\r\n    /**\r\n     * The size of this species\r\n     */\r\n    size() {\r\n        return this.members.size;\r\n    }\r\n    /**\r\n     * Returns the best genome from this species\r\n     */\r\n    getBest() {\r\n        const networks = Array.from(this.members);\r\n        return networks[Utils_1.maxValueIndex(networks.map(genome => { var _a; return (_a = genome.score) !== null && _a !== void 0 ? _a : -Infinity; }))];\r\n    }\r\n    /**\r\n     * to string\r\n     */\r\n    print() {\r\n        console.log('Species={Members: ' +\r\n            this.members.size +\r\n            '; Score: ' +\r\n            this._score +\r\n            '; Stagnation: ' +\r\n            this.stagnation +\r\n            '}');\r\n    }\r\n}\r\nexports.Species = Species;\r\n//# sourceMappingURL=Species.js.map\n\n//# sourceURL=webpack:///./build/src/architecture/Species.js?");

/***/ }),

/***/ "./build/src/enums/ConnectionType.js":
/*!*******************************************!*\
  !*** ./build/src/enums/ConnectionType.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectionType = void 0;\r\n/**\r\n * The type of a connection.\r\n */\r\nvar ConnectionType;\r\n(function (ConnectionType) {\r\n    /**\r\n     * No connection used for exceptions.\r\n     */\r\n    ConnectionType[ConnectionType[\"NO_CONNECTION\"] = 0] = \"NO_CONNECTION\";\r\n    /**\r\n     * Connect all input to all output nodes\r\n     */\r\n    ConnectionType[ConnectionType[\"ALL_TO_ALL\"] = 1] = \"ALL_TO_ALL\";\r\n    /**\r\n     * Connect one input to one output node\r\n     */\r\n    ConnectionType[ConnectionType[\"ONE_TO_ONE\"] = 2] = \"ONE_TO_ONE\";\r\n    /**\r\n     * Connect with pooling\r\n     */\r\n    ConnectionType[ConnectionType[\"POOLING\"] = 3] = \"POOLING\";\r\n})(ConnectionType = exports.ConnectionType || (exports.ConnectionType = {}));\r\n//# sourceMappingURL=ConnectionType.js.map\n\n//# sourceURL=webpack:///./build/src/enums/ConnectionType.js?");

/***/ }),

/***/ "./build/src/enums/GatingType.js":
/*!***************************************!*\
  !*** ./build/src/enums/GatingType.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GatingType = void 0;\r\n/**\r\n * The type of gating.\r\n */\r\nvar GatingType;\r\n(function (GatingType) {\r\n    /**\r\n     * Gate incoming connections.\r\n     */\r\n    GatingType[GatingType[\"INPUT\"] = 0] = \"INPUT\";\r\n    /**\r\n     * Gate self connections.\r\n     */\r\n    GatingType[GatingType[\"SELF\"] = 1] = \"SELF\";\r\n    /**\r\n     * Gate outgoing connections.\r\n     */\r\n    GatingType[GatingType[\"OUTPUT\"] = 2] = \"OUTPUT\";\r\n})(GatingType = exports.GatingType || (exports.GatingType = {}));\r\n//# sourceMappingURL=GatingType.js.map\n\n//# sourceURL=webpack:///./build/src/enums/GatingType.js?");

/***/ }),

/***/ "./build/src/enums/NodeType.js":
/*!*************************************!*\
  !*** ./build/src/enums/NodeType.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NoiseNodeType = exports.PoolNodeType = exports.NodeType = void 0;\r\n/**\r\n * The type of node.\r\n */\r\nvar NodeType;\r\n(function (NodeType) {\r\n    /**\r\n     * Node is an input node.\r\n     */\r\n    NodeType[NodeType[\"INPUT\"] = 0] = \"INPUT\";\r\n    /**\r\n     * Node is a hidden node.\r\n     */\r\n    NodeType[NodeType[\"HIDDEN\"] = 1] = \"HIDDEN\";\r\n    /**\r\n     * Node is a output node.\r\n     */\r\n    NodeType[NodeType[\"OUTPUT\"] = 2] = \"OUTPUT\";\r\n})(NodeType = exports.NodeType || (exports.NodeType = {}));\r\n/**\r\n * The type of pool node.\r\n */\r\nvar PoolNodeType;\r\n(function (PoolNodeType) {\r\n    /**\r\n     * Maximum pooling node.\r\n     */\r\n    PoolNodeType[PoolNodeType[\"MAX_POOLING\"] = 0] = \"MAX_POOLING\";\r\n    /**\r\n     * Average pooling node.\r\n     */\r\n    PoolNodeType[PoolNodeType[\"AVG_POOLING\"] = 1] = \"AVG_POOLING\";\r\n    /**\r\n     * Minimum pooling node.\r\n     */\r\n    PoolNodeType[PoolNodeType[\"MIN_POOLING\"] = 2] = \"MIN_POOLING\";\r\n})(PoolNodeType = exports.PoolNodeType || (exports.PoolNodeType = {}));\r\n/**\r\n * The type of noise node.\r\n */\r\nvar NoiseNodeType;\r\n(function (NoiseNodeType) {\r\n    /**\r\n     * Gaussian noise node\r\n     */\r\n    NoiseNodeType[NoiseNodeType[\"GAUSSIAN_NOISE\"] = 0] = \"GAUSSIAN_NOISE\";\r\n})(NoiseNodeType = exports.NoiseNodeType || (exports.NoiseNodeType = {}));\r\n//# sourceMappingURL=NodeType.js.map\n\n//# sourceURL=webpack:///./build/src/enums/NodeType.js?");

/***/ }),

/***/ "./build/src/index.js":
/*!****************************!*\
  !*** ./build/src/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.generateGaussian = exports.avg = exports.sum = exports.min = exports.minValueIndex = exports.maxValueIndex = exports.max = exports.shuffle = exports.removeFromArray = exports.randBoolean = exports.randDouble = exports.randInt = exports.pickRandom = exports.TournamentSelection = exports.PowerSelection = exports.FitnessProportionateSelection = exports.Selection = exports.InverseRate = exports.ExponentialRate = exports.StepRate = exports.FixedRate = exports.Rate = exports.SwapNodesMutation = exports.SubBackConnectionMutation = exports.AddBackConnectionMutation = exports.SubSelfConnectionMutation = exports.AddSelfConnectionMutation = exports.SubGateMutation = exports.AddGateMutation = exports.ModActivationMutation = exports.ModBiasMutation = exports.ModWeightMutation = exports.SubConnectionMutation = exports.AddConnectionMutation = exports.SubNodeMutation = exports.AddNodeMutation = exports.Mutation = exports.ONLY_STRUCTURE = exports.NO_STRUCTURE_MUTATIONS = exports.FEEDFORWARD_MUTATIONS = exports.ALL_MUTATIONS = exports.HINGELoss = exports.MSLELoss = exports.WAPELoss = exports.MAPELoss = exports.MAELoss = exports.BinaryLoss = exports.MBELoss = exports.MSELoss = exports.ALL_LOSSES = exports.TrainOptions = exports.EvolveOptions = exports.NoiseNodeType = exports.PoolNodeType = exports.NodeType = exports.GatingType = exports.ConnectionType = exports.Node = exports.Species = exports.Network = exports.Connection = exports.Architect = exports.PoolNode = exports.NoiseNode = exports.DropoutNode = exports.ConstantNode = exports.Layer = exports.MemoryLayer = exports.LSTMLayer = exports.GRULayer = exports.RNNLayer = exports.HopfieldLayer = exports.ActivationLayer = exports.PoolingLayer = exports.GlobalMaxPooling1DLayer = exports.GlobalMinPooling1DLayer = exports.GlobalAvgPooling1DLayer = exports.MaxPooling1DLayer = exports.MinPooling1DLayer = exports.AvgPooling1DLayer = exports.NoiseLayer = exports.OutputLayer = exports.InputLayer = exports.DropoutLayer = exports.DenseLayer = void 0;\r\nconst Architect_1 = __webpack_require__(/*! ./architecture/Architect */ \"./build/src/architecture/Architect.js\");\r\nObject.defineProperty(exports, \"Architect\", { enumerable: true, get: function () { return Architect_1.Architect; } });\r\nconst Connection_1 = __webpack_require__(/*! ./architecture/Connection */ \"./build/src/architecture/Connection.js\");\r\nObject.defineProperty(exports, \"Connection\", { enumerable: true, get: function () { return Connection_1.Connection; } });\r\nconst ActivationLayer_1 = __webpack_require__(/*! ./architecture/Layers/CoreLayers/ActivationLayer */ \"./build/src/architecture/Layers/CoreLayers/ActivationLayer.js\");\r\nObject.defineProperty(exports, \"ActivationLayer\", { enumerable: true, get: function () { return ActivationLayer_1.ActivationLayer; } });\r\nconst DenseLayer_1 = __webpack_require__(/*! ./architecture/Layers/CoreLayers/DenseLayer */ \"./build/src/architecture/Layers/CoreLayers/DenseLayer.js\");\r\nObject.defineProperty(exports, \"DenseLayer\", { enumerable: true, get: function () { return DenseLayer_1.DenseLayer; } });\r\nconst DropoutLayer_1 = __webpack_require__(/*! ./architecture/Layers/CoreLayers/DropoutLayer */ \"./build/src/architecture/Layers/CoreLayers/DropoutLayer.js\");\r\nObject.defineProperty(exports, \"DropoutLayer\", { enumerable: true, get: function () { return DropoutLayer_1.DropoutLayer; } });\r\nconst InputLayer_1 = __webpack_require__(/*! ./architecture/Layers/CoreLayers/InputLayer */ \"./build/src/architecture/Layers/CoreLayers/InputLayer.js\");\r\nObject.defineProperty(exports, \"InputLayer\", { enumerable: true, get: function () { return InputLayer_1.InputLayer; } });\r\nconst OutputLayer_1 = __webpack_require__(/*! ./architecture/Layers/CoreLayers/OutputLayer */ \"./build/src/architecture/Layers/CoreLayers/OutputLayer.js\");\r\nObject.defineProperty(exports, \"OutputLayer\", { enumerable: true, get: function () { return OutputLayer_1.OutputLayer; } });\r\nconst Layer_1 = __webpack_require__(/*! ./architecture/Layers/Layer */ \"./build/src/architecture/Layers/Layer.js\");\r\nObject.defineProperty(exports, \"Layer\", { enumerable: true, get: function () { return Layer_1.Layer; } });\r\nconst NoiseLayer_1 = __webpack_require__(/*! ./architecture/Layers/NoiseLayers/NoiseLayer */ \"./build/src/architecture/Layers/NoiseLayers/NoiseLayer.js\");\r\nObject.defineProperty(exports, \"NoiseLayer\", { enumerable: true, get: function () { return NoiseLayer_1.NoiseLayer; } });\r\nconst AvgPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/AvgPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/AvgPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"AvgPooling1DLayer\", { enumerable: true, get: function () { return AvgPooling1DLayer_1.AvgPooling1DLayer; } });\r\nconst GlobalAvgPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/GlobalAvgPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/GlobalAvgPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"GlobalAvgPooling1DLayer\", { enumerable: true, get: function () { return GlobalAvgPooling1DLayer_1.GlobalAvgPooling1DLayer; } });\r\nconst GlobalMaxPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/GlobalMaxPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/GlobalMaxPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"GlobalMaxPooling1DLayer\", { enumerable: true, get: function () { return GlobalMaxPooling1DLayer_1.GlobalMaxPooling1DLayer; } });\r\nconst GlobalMinPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/GlobalMinPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/GlobalMinPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"GlobalMinPooling1DLayer\", { enumerable: true, get: function () { return GlobalMinPooling1DLayer_1.GlobalMinPooling1DLayer; } });\r\nconst MaxPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/MaxPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/MaxPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"MaxPooling1DLayer\", { enumerable: true, get: function () { return MaxPooling1DLayer_1.MaxPooling1DLayer; } });\r\nconst MinPooling1DLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/MinPooling1DLayer */ \"./build/src/architecture/Layers/PoolingLayers/MinPooling1DLayer.js\");\r\nObject.defineProperty(exports, \"MinPooling1DLayer\", { enumerable: true, get: function () { return MinPooling1DLayer_1.MinPooling1DLayer; } });\r\nconst PoolingLayer_1 = __webpack_require__(/*! ./architecture/Layers/PoolingLayers/PoolingLayer */ \"./build/src/architecture/Layers/PoolingLayers/PoolingLayer.js\");\r\nObject.defineProperty(exports, \"PoolingLayer\", { enumerable: true, get: function () { return PoolingLayer_1.PoolingLayer; } });\r\nconst GRULayer_1 = __webpack_require__(/*! ./architecture/Layers/RecurrentLayers/GRULayer */ \"./build/src/architecture/Layers/RecurrentLayers/GRULayer.js\");\r\nObject.defineProperty(exports, \"GRULayer\", { enumerable: true, get: function () { return GRULayer_1.GRULayer; } });\r\nconst HopfieldLayer_1 = __webpack_require__(/*! ./architecture/Layers/RecurrentLayers/HopfieldLayer */ \"./build/src/architecture/Layers/RecurrentLayers/HopfieldLayer.js\");\r\nObject.defineProperty(exports, \"HopfieldLayer\", { enumerable: true, get: function () { return HopfieldLayer_1.HopfieldLayer; } });\r\nconst LSTMLayer_1 = __webpack_require__(/*! ./architecture/Layers/RecurrentLayers/LSTMLayer */ \"./build/src/architecture/Layers/RecurrentLayers/LSTMLayer.js\");\r\nObject.defineProperty(exports, \"LSTMLayer\", { enumerable: true, get: function () { return LSTMLayer_1.LSTMLayer; } });\r\nconst MemoryLayer_1 = __webpack_require__(/*! ./architecture/Layers/RecurrentLayers/MemoryLayer */ \"./build/src/architecture/Layers/RecurrentLayers/MemoryLayer.js\");\r\nObject.defineProperty(exports, \"MemoryLayer\", { enumerable: true, get: function () { return MemoryLayer_1.MemoryLayer; } });\r\nconst RNNLayer_1 = __webpack_require__(/*! ./architecture/Layers/RecurrentLayers/RNNLayer */ \"./build/src/architecture/Layers/RecurrentLayers/RNNLayer.js\");\r\nObject.defineProperty(exports, \"RNNLayer\", { enumerable: true, get: function () { return RNNLayer_1.RNNLayer; } });\r\nconst Network_1 = __webpack_require__(/*! ./architecture/Network */ \"./build/src/architecture/Network.js\");\r\nObject.defineProperty(exports, \"Network\", { enumerable: true, get: function () { return Network_1.Network; } });\r\nconst Node_1 = __webpack_require__(/*! ./architecture/Node */ \"./build/src/architecture/Node.js\");\r\nObject.defineProperty(exports, \"Node\", { enumerable: true, get: function () { return Node_1.Node; } });\r\nconst ConstantNode_1 = __webpack_require__(/*! ./architecture/Nodes/ConstantNode */ \"./build/src/architecture/Nodes/ConstantNode.js\");\r\nObject.defineProperty(exports, \"ConstantNode\", { enumerable: true, get: function () { return ConstantNode_1.ConstantNode; } });\r\nconst DropoutNode_1 = __webpack_require__(/*! ./architecture/Nodes/DropoutNode */ \"./build/src/architecture/Nodes/DropoutNode.js\");\r\nObject.defineProperty(exports, \"DropoutNode\", { enumerable: true, get: function () { return DropoutNode_1.DropoutNode; } });\r\nconst NoiseNode_1 = __webpack_require__(/*! ./architecture/Nodes/NoiseNode */ \"./build/src/architecture/Nodes/NoiseNode.js\");\r\nObject.defineProperty(exports, \"NoiseNode\", { enumerable: true, get: function () { return NoiseNode_1.NoiseNode; } });\r\nconst PoolNode_1 = __webpack_require__(/*! ./architecture/Nodes/PoolNode */ \"./build/src/architecture/Nodes/PoolNode.js\");\r\nObject.defineProperty(exports, \"PoolNode\", { enumerable: true, get: function () { return PoolNode_1.PoolNode; } });\r\nconst Species_1 = __webpack_require__(/*! ./architecture/Species */ \"./build/src/architecture/Species.js\");\r\nObject.defineProperty(exports, \"Species\", { enumerable: true, get: function () { return Species_1.Species; } });\r\nconst ConnectionType_1 = __webpack_require__(/*! ./enums/ConnectionType */ \"./build/src/enums/ConnectionType.js\");\r\nObject.defineProperty(exports, \"ConnectionType\", { enumerable: true, get: function () { return ConnectionType_1.ConnectionType; } });\r\nconst GatingType_1 = __webpack_require__(/*! ./enums/GatingType */ \"./build/src/enums/GatingType.js\");\r\nObject.defineProperty(exports, \"GatingType\", { enumerable: true, get: function () { return GatingType_1.GatingType; } });\r\nconst NodeType_1 = __webpack_require__(/*! ./enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nObject.defineProperty(exports, \"NodeType\", { enumerable: true, get: function () { return NodeType_1.NodeType; } });\r\nObject.defineProperty(exports, \"NoiseNodeType\", { enumerable: true, get: function () { return NodeType_1.NoiseNodeType; } });\r\nObject.defineProperty(exports, \"PoolNodeType\", { enumerable: true, get: function () { return NodeType_1.PoolNodeType; } });\r\nconst EvolveOptions_1 = __webpack_require__(/*! ./interfaces/EvolveOptions */ \"./build/src/interfaces/EvolveOptions.js\");\r\nObject.defineProperty(exports, \"EvolveOptions\", { enumerable: true, get: function () { return EvolveOptions_1.EvolveOptions; } });\r\nconst TrainOptions_1 = __webpack_require__(/*! ./interfaces/TrainOptions */ \"./build/src/interfaces/TrainOptions.js\");\r\nObject.defineProperty(exports, \"TrainOptions\", { enumerable: true, get: function () { return TrainOptions_1.TrainOptions; } });\r\nconst Loss_1 = __webpack_require__(/*! ./methods/Loss */ \"./build/src/methods/Loss.js\");\r\nObject.defineProperty(exports, \"ALL_LOSSES\", { enumerable: true, get: function () { return Loss_1.ALL_LOSSES; } });\r\nObject.defineProperty(exports, \"BinaryLoss\", { enumerable: true, get: function () { return Loss_1.BinaryLoss; } });\r\nObject.defineProperty(exports, \"HINGELoss\", { enumerable: true, get: function () { return Loss_1.HINGELoss; } });\r\nObject.defineProperty(exports, \"MAELoss\", { enumerable: true, get: function () { return Loss_1.MAELoss; } });\r\nObject.defineProperty(exports, \"MAPELoss\", { enumerable: true, get: function () { return Loss_1.MAPELoss; } });\r\nObject.defineProperty(exports, \"MBELoss\", { enumerable: true, get: function () { return Loss_1.MBELoss; } });\r\nObject.defineProperty(exports, \"MSELoss\", { enumerable: true, get: function () { return Loss_1.MSELoss; } });\r\nObject.defineProperty(exports, \"MSLELoss\", { enumerable: true, get: function () { return Loss_1.MSLELoss; } });\r\nObject.defineProperty(exports, \"WAPELoss\", { enumerable: true, get: function () { return Loss_1.WAPELoss; } });\r\nconst Mutation_1 = __webpack_require__(/*! ./methods/Mutation */ \"./build/src/methods/Mutation.js\");\r\nObject.defineProperty(exports, \"AddBackConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.AddBackConnectionMutation; } });\r\nObject.defineProperty(exports, \"AddConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.AddConnectionMutation; } });\r\nObject.defineProperty(exports, \"AddGateMutation\", { enumerable: true, get: function () { return Mutation_1.AddGateMutation; } });\r\nObject.defineProperty(exports, \"AddNodeMutation\", { enumerable: true, get: function () { return Mutation_1.AddNodeMutation; } });\r\nObject.defineProperty(exports, \"AddSelfConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.AddSelfConnectionMutation; } });\r\nObject.defineProperty(exports, \"ALL_MUTATIONS\", { enumerable: true, get: function () { return Mutation_1.ALL_MUTATIONS; } });\r\nObject.defineProperty(exports, \"FEEDFORWARD_MUTATIONS\", { enumerable: true, get: function () { return Mutation_1.FEEDFORWARD_MUTATIONS; } });\r\nObject.defineProperty(exports, \"ModActivationMutation\", { enumerable: true, get: function () { return Mutation_1.ModActivationMutation; } });\r\nObject.defineProperty(exports, \"ModBiasMutation\", { enumerable: true, get: function () { return Mutation_1.ModBiasMutation; } });\r\nObject.defineProperty(exports, \"ModWeightMutation\", { enumerable: true, get: function () { return Mutation_1.ModWeightMutation; } });\r\nObject.defineProperty(exports, \"Mutation\", { enumerable: true, get: function () { return Mutation_1.Mutation; } });\r\nObject.defineProperty(exports, \"NO_STRUCTURE_MUTATIONS\", { enumerable: true, get: function () { return Mutation_1.NO_STRUCTURE_MUTATIONS; } });\r\nObject.defineProperty(exports, \"ONLY_STRUCTURE\", { enumerable: true, get: function () { return Mutation_1.ONLY_STRUCTURE; } });\r\nObject.defineProperty(exports, \"SubBackConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.SubBackConnectionMutation; } });\r\nObject.defineProperty(exports, \"SubConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.SubConnectionMutation; } });\r\nObject.defineProperty(exports, \"SubGateMutation\", { enumerable: true, get: function () { return Mutation_1.SubGateMutation; } });\r\nObject.defineProperty(exports, \"SubNodeMutation\", { enumerable: true, get: function () { return Mutation_1.SubNodeMutation; } });\r\nObject.defineProperty(exports, \"SubSelfConnectionMutation\", { enumerable: true, get: function () { return Mutation_1.SubSelfConnectionMutation; } });\r\nObject.defineProperty(exports, \"SwapNodesMutation\", { enumerable: true, get: function () { return Mutation_1.SwapNodesMutation; } });\r\nconst Rate_1 = __webpack_require__(/*! ./methods/Rate */ \"./build/src/methods/Rate.js\");\r\nObject.defineProperty(exports, \"ExponentialRate\", { enumerable: true, get: function () { return Rate_1.ExponentialRate; } });\r\nObject.defineProperty(exports, \"FixedRate\", { enumerable: true, get: function () { return Rate_1.FixedRate; } });\r\nObject.defineProperty(exports, \"InverseRate\", { enumerable: true, get: function () { return Rate_1.InverseRate; } });\r\nObject.defineProperty(exports, \"Rate\", { enumerable: true, get: function () { return Rate_1.Rate; } });\r\nObject.defineProperty(exports, \"StepRate\", { enumerable: true, get: function () { return Rate_1.StepRate; } });\r\nconst Selection_1 = __webpack_require__(/*! ./methods/Selection */ \"./build/src/methods/Selection.js\");\r\nObject.defineProperty(exports, \"FitnessProportionateSelection\", { enumerable: true, get: function () { return Selection_1.FitnessProportionateSelection; } });\r\nObject.defineProperty(exports, \"PowerSelection\", { enumerable: true, get: function () { return Selection_1.PowerSelection; } });\r\nObject.defineProperty(exports, \"Selection\", { enumerable: true, get: function () { return Selection_1.Selection; } });\r\nObject.defineProperty(exports, \"TournamentSelection\", { enumerable: true, get: function () { return Selection_1.TournamentSelection; } });\r\nconst Utils_1 = __webpack_require__(/*! ./utils/Utils */ \"./build/src/utils/Utils.js\");\r\nObject.defineProperty(exports, \"avg\", { enumerable: true, get: function () { return Utils_1.avg; } });\r\nObject.defineProperty(exports, \"generateGaussian\", { enumerable: true, get: function () { return Utils_1.generateGaussian; } });\r\nObject.defineProperty(exports, \"max\", { enumerable: true, get: function () { return Utils_1.max; } });\r\nObject.defineProperty(exports, \"maxValueIndex\", { enumerable: true, get: function () { return Utils_1.maxValueIndex; } });\r\nObject.defineProperty(exports, \"min\", { enumerable: true, get: function () { return Utils_1.min; } });\r\nObject.defineProperty(exports, \"minValueIndex\", { enumerable: true, get: function () { return Utils_1.minValueIndex; } });\r\nObject.defineProperty(exports, \"pickRandom\", { enumerable: true, get: function () { return Utils_1.pickRandom; } });\r\nObject.defineProperty(exports, \"randBoolean\", { enumerable: true, get: function () { return Utils_1.randBoolean; } });\r\nObject.defineProperty(exports, \"randDouble\", { enumerable: true, get: function () { return Utils_1.randDouble; } });\r\nObject.defineProperty(exports, \"randInt\", { enumerable: true, get: function () { return Utils_1.randInt; } });\r\nObject.defineProperty(exports, \"removeFromArray\", { enumerable: true, get: function () { return Utils_1.removeFromArray; } });\r\nObject.defineProperty(exports, \"shuffle\", { enumerable: true, get: function () { return Utils_1.shuffle; } });\r\nObject.defineProperty(exports, \"sum\", { enumerable: true, get: function () { return Utils_1.sum; } });\r\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./build/src/index.js?");

/***/ }),

/***/ "./build/src/interfaces/EvolveOptions.js":
/*!***********************************************!*\
  !*** ./build/src/interfaces/EvolveOptions.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EvolveOptions = void 0;\r\nconst activations_1 = __webpack_require__(/*! activations */ \"./node_modules/activations/build/src/index.js\");\r\nconst Network_1 = __webpack_require__(/*! ../architecture/Network */ \"./build/src/architecture/Network.js\");\r\nconst Loss_1 = __webpack_require__(/*! ../methods/Loss */ \"./build/src/methods/Loss.js\");\r\nconst Mutation_1 = __webpack_require__(/*! ../methods/Mutation */ \"./build/src/methods/Mutation.js\");\r\nconst Selection_1 = __webpack_require__(/*! ../methods/Selection */ \"./build/src/methods/Selection.js\");\r\n/**\r\n * Options used to evolve network\r\n */\r\nclass EvolveOptions {\r\n    constructor() {\r\n        /**\r\n         * How big could the distance be between a network and the represent of a species?\r\n         */\r\n        this.speciesDistanceThreshold = 4;\r\n        this.c1 = 1;\r\n        this.c2 = 1;\r\n        this.c3 = 1;\r\n        this.survivors = 0.8;\r\n        this.input = 1;\r\n        this.output = 1;\r\n        this.generation = 0;\r\n        this.elitism = 1;\r\n        this.equal = true;\r\n        this.clear = false;\r\n        this.populationSize = 50;\r\n        this.mutationRate = 0.6;\r\n        this.mutationAmount = 5;\r\n        this.selection = new Selection_1.FitnessProportionateSelection();\r\n        this.loss = Loss_1.MSELoss;\r\n        this.mutations = Mutation_1.FEEDFORWARD_MUTATIONS;\r\n        this.activations = Object.values(activations_1.ALL_ACTIVATIONS);\r\n        this.template = new Network_1.Network(this.input, this.output);\r\n        this.maxNodes = Infinity;\r\n        this.maxConnections = Infinity;\r\n        this.maxGates = Infinity;\r\n        this.threads = 4;\r\n        this.log = -1;\r\n        this.iterations = 1000;\r\n        this.error = 0.05;\r\n        this.maxStagnation = 3;\r\n    }\r\n}\r\nexports.EvolveOptions = EvolveOptions;\r\n//# sourceMappingURL=EvolveOptions.js.map\n\n//# sourceURL=webpack:///./build/src/interfaces/EvolveOptions.js?");

/***/ }),

/***/ "./build/src/interfaces/TrainOptions.js":
/*!**********************************************!*\
  !*** ./build/src/interfaces/TrainOptions.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TrainOptions = void 0;\r\nconst Loss_1 = __webpack_require__(/*! ../methods/Loss */ \"./build/src/methods/Loss.js\");\r\nconst Rate_1 = __webpack_require__(/*! ../methods/Rate */ \"./build/src/methods/Rate.js\");\r\n/**\r\n * Options used to train network\r\n */\r\nclass TrainOptions {\r\n    constructor(dataset) {\r\n        this._dataset = dataset;\r\n        this._iterations = -1;\r\n        this._error = -1;\r\n        this._loss = Loss_1.MSELoss;\r\n        this._dropout = 0;\r\n        this._momentum = 0;\r\n        this._batchSize = this.dataset.length;\r\n        this._rate = new Rate_1.FixedRate(0.3);\r\n        this._log = -1;\r\n        this._crossValidateTestSize = -1;\r\n        this._shuffle = false;\r\n        this._clear = false;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get dataset() {\r\n        return this._dataset;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set dataset(value) {\r\n        this._dataset = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get shuffle() {\r\n        return this._shuffle;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set shuffle(value) {\r\n        this._shuffle = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get clear() {\r\n        return this._clear;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set clear(value) {\r\n        this._clear = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get schedule() {\r\n        return this._schedule;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set schedule(value) {\r\n        this._schedule = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get crossValidateTestSize() {\r\n        return this._crossValidateTestSize;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set crossValidateTestSize(value) {\r\n        this._crossValidateTestSize = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get rate() {\r\n        return this._rate;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set rate(value) {\r\n        this._rate = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get loss() {\r\n        return this._loss;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set loss(value) {\r\n        this._loss = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get iterations() {\r\n        return this._iterations;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set iterations(value) {\r\n        this._iterations = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get error() {\r\n        return this._error;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set error(value) {\r\n        this._error = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get momentum() {\r\n        return this._momentum;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set momentum(value) {\r\n        this._momentum = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get dropout() {\r\n        return this._dropout;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set dropout(value) {\r\n        this._dropout = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get log() {\r\n        return this._log;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set log(value) {\r\n        this._log = value;\r\n    }\r\n    /**\r\n     * Getter\r\n     */\r\n    get batchSize() {\r\n        return this._batchSize;\r\n    }\r\n    /**\r\n     * Setter\r\n     */\r\n    set batchSize(value) {\r\n        this._batchSize = value;\r\n    }\r\n}\r\nexports.TrainOptions = TrainOptions;\r\n//# sourceMappingURL=TrainOptions.js.map\n\n//# sourceURL=webpack:///./build/src/interfaces/TrainOptions.js?");

/***/ }),

/***/ "./build/src/methods/Loss.js":
/*!***********************************!*\
  !*** ./build/src/methods/Loss.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ALL_LOSSES = exports.HINGELoss = exports.MSLELoss = exports.WAPELoss = exports.MAPELoss = exports.MAELoss = exports.BinaryLoss = exports.MBELoss = exports.MSELoss = void 0;\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\nexports.MSELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.pow((targets[index] - value), 2);\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.MBELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += targets[index] - value;\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.BinaryLoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.round(targets[index] * 2) !== Math.round(value * 2) ? 1 : 0;\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.MAELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.abs(targets[index] - value);\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.MAPELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.abs((value - targets[index]) / Math.max(targets[index], 1e-15));\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.WAPELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.abs(targets[index] - value);\r\n    });\r\n    return error / Utils_1.sum(targets);\r\n};\r\nexports.MSLELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error +=\r\n            Math.log(Math.max(targets[index], 1e-15)) -\r\n                Math.log(Math.max(value, 1e-15));\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.HINGELoss = function (targets, outputs) {\r\n    let error = 0;\r\n    outputs.forEach((value, index) => {\r\n        error += Math.max(0, 1 - value * targets[index]);\r\n    });\r\n    return error / outputs.length;\r\n};\r\nexports.ALL_LOSSES = {\r\n    MSELoss: exports.MSELoss,\r\n    MBELoss: exports.MBELoss,\r\n    BinaryLoss: exports.BinaryLoss,\r\n    MAELoss: exports.MAELoss,\r\n    MAPELoss: exports.MAPELoss,\r\n    WAPELoss: exports.WAPELoss,\r\n    MSLELoss: exports.MSLELoss,\r\n    HINGELoss: exports.HINGELoss,\r\n};\r\n//# sourceMappingURL=Loss.js.map\n\n//# sourceURL=webpack:///./build/src/methods/Loss.js?");

/***/ }),

/***/ "./build/src/methods/Mutation.js":
/*!***************************************!*\
  !*** ./build/src/methods/Mutation.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SwapNodesMutation = exports.SubBackConnectionMutation = exports.AddBackConnectionMutation = exports.SubSelfConnectionMutation = exports.AddSelfConnectionMutation = exports.SubGateMutation = exports.AddGateMutation = exports.ModActivationMutation = exports.ModBiasMutation = exports.ModWeightMutation = exports.SubConnectionMutation = exports.AddConnectionMutation = exports.SubNodeMutation = exports.AddNodeMutation = exports.Mutation = exports.ONLY_STRUCTURE = exports.NO_STRUCTURE_MUTATIONS = exports.FEEDFORWARD_MUTATIONS = exports.ALL_MUTATIONS = void 0;\r\nconst Node_1 = __webpack_require__(/*! ../architecture/Node */ \"./build/src/architecture/Node.js\");\r\nconst NodeType_1 = __webpack_require__(/*! ../enums/NodeType */ \"./build/src/enums/NodeType.js\");\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\n/**\r\n *\r\n * Genetic algorithm mutation methods. Creates variations (mutations) in neural networks which are then selected for better performance.\r\n *\r\n * @see {@link https://en.wikipedia.org/wiki/mutation_(genetic_algorithm)|Mutation (genetic algorithms) on Wikipedia}\r\n * @see {@link https://en.wikipedia.org/wiki/Genetic_algorithm#Selection|Selection (genetic algorithms) on Wikipedia}\r\n */\r\nclass Mutation {\r\n}\r\nexports.Mutation = Mutation;\r\n/**\r\n * Add node mutation.\r\n *\r\n * Adds a hidden node to the network.\r\n */\r\nclass AddNodeMutation extends Mutation {\r\n    /**\r\n     * Constructs a AddNodeMutation object\r\n     * @param randomActivation Should choose a random activation for a new node?\r\n     */\r\n    constructor(randomActivation = true) {\r\n        super();\r\n        this.randomActivation = randomActivation;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     * @param options\r\n     */\r\n    mutate(network, options = {}) {\r\n        // check if max nodes is already reached\r\n        if (options.maxNodes !== undefined &&\r\n            network.nodes.length >= options.maxNodes) {\r\n            return;\r\n        }\r\n        // create a new hidden node\r\n        const node = new Node_1.Node(NodeType_1.NodeType.HIDDEN);\r\n        if (this.randomActivation) {\r\n            node.mutateActivation(); // choose random activation\r\n        }\r\n        // take a random connection\r\n        const connection = Utils_1.pickRandom(Array.from(network.connections));\r\n        const from = connection.from;\r\n        const to = connection.to;\r\n        network.disconnect(from, to); // disconnect it\r\n        // put the node in between the connection\r\n        const minBound = Math.max(network.inputSize, 1 + network.nodes.indexOf(from));\r\n        network.nodes.splice(minBound, 0, node);\r\n        const newConnection1 = network.connect(from, node, 1);\r\n        const newConnection2 = network.connect(node, to, connection.weight);\r\n        if (connection.gateNode !== null) {\r\n            // if connection had a gate node\r\n            // choose randomly which new connection should get this gate node\r\n            if (Utils_1.randBoolean()) {\r\n                network.addGate(connection.gateNode, newConnection1);\r\n            }\r\n            else {\r\n                network.addGate(connection.gateNode, newConnection2);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.AddNodeMutation = AddNodeMutation;\r\n/**\r\n * Sub node mutation.\r\n *\r\n * Removes a random node from the network.\r\n */\r\nclass SubNodeMutation extends Mutation {\r\n    constructor(keepGates = true) {\r\n        super();\r\n        this.keepGates = keepGates;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = network.nodes.filter(node => node !== undefined && node.isHiddenNode()); // hidden nodes\r\n        if (possible.length > 0) {\r\n            network.removeNode(Utils_1.pickRandom(possible), this.keepGates); // remove a random node from the filtered array\r\n        }\r\n    }\r\n}\r\nexports.SubNodeMutation = SubNodeMutation;\r\n/**\r\n * Add connections mutation.\r\n *\r\n * Adds a connection to the network.\r\n */\r\nclass AddConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     * @param options\r\n     */\r\n    mutate(network, options = {}) {\r\n        // check if max connections is already reached\r\n        if (options.maxConnections !== undefined &&\r\n            network.connections.size >= options.maxConnections) {\r\n            return;\r\n        }\r\n        const possible = [];\r\n        for (let i = 0; i < network.nodes.length - network.outputSize; i++) {\r\n            const from = network.nodes[i];\r\n            for (let j = Math.max(i + 1, network.inputSize); j < network.nodes.length; j++) {\r\n                const to = network.nodes[j];\r\n                if (!from.isProjectingTo(to)) {\r\n                    possible.push([from, to]);\r\n                }\r\n            }\r\n        }\r\n        if (possible.length > 0) {\r\n            const pair = Utils_1.pickRandom(possible);\r\n            network.connect(pair[0], pair[1]);\r\n        }\r\n    }\r\n}\r\nexports.AddConnectionMutation = AddConnectionMutation;\r\n/**\r\n * Sub connection mutation.\r\n *\r\n * Removes a random connection from the network.\r\n */\r\nclass SubConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = Array.from(network.connections)\r\n            .filter(conn => conn.from.outgoing.size > 1) // do not deactivate a neuron\r\n            .filter(conn => conn.to.incoming.size > 1) // do not deactivate a neuron\r\n            .filter(conn => network.nodes.indexOf(conn.to) > network.nodes.indexOf(conn.from)); // look for forward pointing connections\r\n        if (possible.length > 0) {\r\n            const randomConnection = Utils_1.pickRandom(possible); // pick a random connection from the filtered array\r\n            network.disconnect(randomConnection.from, randomConnection.to); // remove the connection from the network\r\n        }\r\n    }\r\n}\r\nexports.SubConnectionMutation = SubConnectionMutation;\r\n/**\r\n * Mod weight mutation.\r\n *\r\n * Modifies the weight of a random connection.\r\n */\r\nclass ModWeightMutation extends Mutation {\r\n    /**\r\n     * Constructs a ModWeightMutation object\r\n     * @param min The minimum weight.\r\n     * @param max The maximum weight.\r\n     */\r\n    constructor(min = -1, max = 1) {\r\n        super();\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        // pick random connection and mutate it's weight\r\n        Utils_1.pickRandom(Array.from(network.connections)).weight += Utils_1.randDouble(this.min, this.max);\r\n    }\r\n}\r\nexports.ModWeightMutation = ModWeightMutation;\r\n/**\r\n * Mod bias mutation.\r\n *\r\n * Modifies the bias value of a random hidden or output node\r\n */\r\nclass ModBiasMutation extends Mutation {\r\n    /**\r\n     * Constructs a ModBiasMutation object\r\n     * @param min The minimum bias.\r\n     * @param max The maximum bias.\r\n     */\r\n    constructor(min = -1, max = 1) {\r\n        super();\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        Utils_1.pickRandom(network.nodes.filter(node => !node.isInputNode())) // pick random hidden or output node\r\n            .mutateBias(this); // mutate it's bias\r\n    }\r\n}\r\nexports.ModBiasMutation = ModBiasMutation;\r\n/**\r\n * Mod activation mutation.\r\n *\r\n * Modifies the activation function of a random node\r\n */\r\nclass ModActivationMutation extends Mutation {\r\n    /**\r\n     * Constructs a ModActivationMutation object\r\n     * @param mutateOutput Can the output be mutated?\r\n     */\r\n    constructor(mutateOutput = false) {\r\n        super();\r\n        this.mutateOutput = mutateOutput;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     * @param options\r\n     */\r\n    mutate(network, options = {}) {\r\n        const possible = this.mutateOutput\r\n            ? network.nodes.filter(node => !node.isInputNode()) // hidden and output nodes\r\n            : network.nodes.filter(node => node.isHiddenNode()); // hidden nodes\r\n        if (possible.length > 0) {\r\n            Utils_1.pickRandom(possible).mutateActivation(options.allowedActivations); // mutate the activation of the node\r\n        }\r\n    }\r\n}\r\nexports.ModActivationMutation = ModActivationMutation;\r\n/**\r\n * Add self connection.\r\n *\r\n * Adds a connection from a node to itself.\r\n */\r\nclass AddSelfConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = network.nodes\r\n            .filter(node => !node.isInputNode()) // no input nodes\r\n            .filter(node => node.selfConnection.weight === 0); // only nodes that doesn't have an self connection already\r\n        if (possible.length > 0) {\r\n            const node = Utils_1.pickRandom(possible); // pick a random node from the filtered array\r\n            network.connect(node, node); // connection the node to itself\r\n        }\r\n    }\r\n}\r\nexports.AddSelfConnectionMutation = AddSelfConnectionMutation;\r\n/**\r\n * Sub self connection.\r\n *\r\n * Removes a connection from a node to itself.\r\n */\r\nclass SubSelfConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = Array.from(network.connections).filter(conn => conn.from === conn.to);\r\n        if (possible.length > 0) {\r\n            const randomConnection = Utils_1.pickRandom(possible);\r\n            network.disconnect(randomConnection.from, randomConnection.to);\r\n        }\r\n    }\r\n}\r\nexports.SubSelfConnectionMutation = SubSelfConnectionMutation;\r\n/**\r\n * Add gate mutation.\r\n *\r\n * Adds a gate to the network.\r\n */\r\nclass AddGateMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     * @param options\r\n     */\r\n    mutate(network, options = {}) {\r\n        // check if max gates isn't reached already\r\n        if (options.maxGates !== undefined &&\r\n            network.gates.size >= options.maxGates) {\r\n            return;\r\n        }\r\n        // use only connections that aren't already gated\r\n        const possible = Array.from(network.connections).filter(conn => conn.gateNode === null);\r\n        if (possible.length > 0) {\r\n            const node = Utils_1.pickRandom(network.nodes.filter(node => !node.isInputNode())); // hidden or output node\r\n            const connection = Utils_1.pickRandom(possible); // random connection from filtered array\r\n            network.addGate(node, connection); // use the node to gate the connection\r\n        }\r\n    }\r\n}\r\nexports.AddGateMutation = AddGateMutation;\r\n/**\r\n * Sub gate mutation.\r\n *\r\n * Removes a gate from the network.\r\n */\r\nclass SubGateMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        if (network.gates.size > 0) {\r\n            network.removeGate(Utils_1.pickRandom(Array.from(network.gates)));\r\n        }\r\n    }\r\n}\r\nexports.SubGateMutation = SubGateMutation;\r\n/**\r\n * Add back connection mutation.\r\n *\r\n * Adds a backward pointing connection to the network.\r\n */\r\nclass AddBackConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = [];\r\n        for (let i = network.inputSize; i < network.nodes.length; i++) {\r\n            const from = network.nodes[i];\r\n            for (let j = network.inputSize; j < i; j++) {\r\n                const to = network.nodes[j];\r\n                if (!from.isProjectingTo(to)) {\r\n                    possible.push([from, to]);\r\n                }\r\n            }\r\n        }\r\n        if (possible.length > 0) {\r\n            const pair = Utils_1.pickRandom(possible);\r\n            network.connect(pair[0], pair[1]);\r\n        }\r\n    }\r\n}\r\nexports.AddBackConnectionMutation = AddBackConnectionMutation;\r\n/**\r\n * Sub back connection mutation.\r\n *\r\n * Removes a backward pointing connection to the network.\r\n */\r\nclass SubBackConnectionMutation extends Mutation {\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = Array.from(network.connections)\r\n            .filter(conn => conn.from.outgoing.size > 1)\r\n            .filter(conn => conn.to.incoming.size > 1)\r\n            .filter(conn => network.nodes.indexOf(conn.from) > network.nodes.indexOf(conn.to));\r\n        if (possible.length > 0) {\r\n            const randomConnection = Utils_1.pickRandom(possible);\r\n            network.disconnect(randomConnection.from, randomConnection.to);\r\n        }\r\n    }\r\n}\r\nexports.SubBackConnectionMutation = SubBackConnectionMutation;\r\n/**\r\n * Swap nodes mutation.\r\n *\r\n * Swaps the values of two randomly picked nodes.\r\n */\r\nclass SwapNodesMutation extends Mutation {\r\n    /**\r\n     * Constructs a SwapNodeMutation object\r\n     * @param mutateOutput Can the output be mutated?\r\n     */\r\n    constructor(mutateOutput = false) {\r\n        super();\r\n        this.mutateOutput = mutateOutput;\r\n    }\r\n    /**\r\n     * Mutates the network.\r\n     *\r\n     * @param network The network which gets mutated\r\n     */\r\n    mutate(network) {\r\n        const possible = this.mutateOutput\r\n            ? network.nodes.filter(node => node !== undefined && !node.isInputNode()) // hidden or output nodes\r\n            : network.nodes.filter(node => node !== undefined && node.isHiddenNode()); // only hidden nodes\r\n        if (possible.length >= 2) {\r\n            // select two different nodes from the filtered array\r\n            const node1 = Utils_1.pickRandom(possible);\r\n            const node2 = Utils_1.pickRandom(possible.filter(node => node !== node1));\r\n            // change there parameters\r\n            const biasTemp = node1.bias;\r\n            const squashTemp = node1.squash;\r\n            node1.bias = node2.bias;\r\n            node1.squash = node2.squash;\r\n            node2.bias = biasTemp;\r\n            node2.squash = squashTemp;\r\n        }\r\n    }\r\n}\r\nexports.SwapNodesMutation = SwapNodesMutation;\r\n/**\r\n * Array of all mutation methods\r\n */\r\nconst ALL_MUTATIONS = [\r\n    new AddNodeMutation(),\r\n    new SubNodeMutation(),\r\n    new AddConnectionMutation(),\r\n    new SubConnectionMutation(),\r\n    new ModWeightMutation(),\r\n    new ModBiasMutation(),\r\n    new ModActivationMutation(),\r\n    new AddGateMutation(),\r\n    new SubGateMutation(),\r\n    new AddSelfConnectionMutation(),\r\n    new SubSelfConnectionMutation(),\r\n    new AddBackConnectionMutation(),\r\n    new SubBackConnectionMutation(),\r\n    new SwapNodesMutation(),\r\n];\r\nexports.ALL_MUTATIONS = ALL_MUTATIONS;\r\n/**\r\n * Array of all feed forward mutation methods\r\n */\r\nconst FEEDFORWARD_MUTATIONS = [\r\n    new AddNodeMutation(),\r\n    new SubNodeMutation(),\r\n    new AddConnectionMutation(),\r\n    new SubConnectionMutation(),\r\n    new ModWeightMutation(),\r\n    new ModBiasMutation(),\r\n    new ModActivationMutation(),\r\n    new SwapNodesMutation(),\r\n];\r\nexports.FEEDFORWARD_MUTATIONS = FEEDFORWARD_MUTATIONS;\r\nconst NO_STRUCTURE_MUTATIONS = [\r\n    new ModWeightMutation(),\r\n    new ModBiasMutation(),\r\n    new ModActivationMutation(),\r\n];\r\nexports.NO_STRUCTURE_MUTATIONS = NO_STRUCTURE_MUTATIONS;\r\nconst ONLY_STRUCTURE = [\r\n    new AddNodeMutation(),\r\n    new SubNodeMutation(),\r\n    new AddConnectionMutation(),\r\n    new SubConnectionMutation(),\r\n    new AddGateMutation(),\r\n    new SubGateMutation(),\r\n    new AddSelfConnectionMutation(),\r\n    new SubSelfConnectionMutation(),\r\n    new AddBackConnectionMutation(),\r\n    new SubBackConnectionMutation(),\r\n    new SwapNodesMutation(),\r\n];\r\nexports.ONLY_STRUCTURE = ONLY_STRUCTURE;\r\n//# sourceMappingURL=Mutation.js.map\n\n//# sourceURL=webpack:///./build/src/methods/Mutation.js?");

/***/ }),

/***/ "./build/src/methods/Rate.js":
/*!***********************************!*\
  !*** ./build/src/methods/Rate.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.InverseRate = exports.ExponentialRate = exports.StepRate = exports.FixedRate = exports.Rate = void 0;\r\n/**\r\n * Built-in learning rate policies, which allow for a dynamic learning rate during neural network training.\r\n *\r\n * @see [Learning rates and how-to improve performance](https://towardsdatascience.com/understanding-learning-rates-and-how-it-improves-performance-in-deep-learning-d0d4059c1c10)\r\n * @see [Learning rate policy](https://stackoverflow.com/questions/30033096/what-is-lr-policy-in-caffe/30045244)\r\n *\r\n */\r\nclass Rate {\r\n    /**\r\n     * Constructs a rate policy\r\n     * @param baseRate the rate at first iteration\r\n     */\r\n    constructor(baseRate) {\r\n        this.baseRate = baseRate;\r\n    }\r\n}\r\nexports.Rate = Rate;\r\n/**\r\n * Fixed Learning Rate\r\n *\r\n * Default rate policy. Using this will make learning rate static (no change). Useful as a way to update a previous rate policy.\r\n */\r\nclass FixedRate extends Rate {\r\n    /**\r\n     * Calculates the current training rate.\r\n     *\r\n     * @returns the current training rate\r\n     */\r\n    calc() {\r\n        return this.baseRate;\r\n    }\r\n}\r\nexports.FixedRate = FixedRate;\r\n/**\r\n * Step Learning Rate\r\n *\r\n * The learning rate will decrease (i.e. 'step down') every `stepSize` iterations.\r\n */\r\nclass StepRate extends Rate {\r\n    /**\r\n     * Constructs a step rate policy.\r\n     *\r\n     * @param baseRate the rate at first iteration\r\n     * @param gamma=0.9 Learning rate retention per step; - _0 < `gamma` < 1_ - _large `gamma` CAN cause networks to never converge, low `gamma` CAN cause networks to converge too quickly_\r\n     * @param stepSize=100 Learning rate is updated every `step_size` iterations\r\n     */\r\n    constructor(baseRate, gamma = 0.9, stepSize = 100) {\r\n        super(baseRate);\r\n        this.gamma = gamma;\r\n        this.stepSize = stepSize;\r\n    }\r\n    /**\r\n     * Calculates the current training rate.\r\n     *\r\n     * @param iteration count\r\n     * @returns the current training rate\r\n     */\r\n    calc(iteration) {\r\n        return this.baseRate * Math.pow(this.gamma, Math.floor(iteration / this.stepSize));\r\n    }\r\n}\r\nexports.StepRate = StepRate;\r\n/**\r\n * Exponential Learning Rate\r\n *\r\n * The learning rate will exponentially decrease.\r\n *\r\n * The rate at `iteration` is calculated as: `rate = base_rate * Math.pow(gamma, iteration)`\r\n */\r\nclass ExponentialRate extends Rate {\r\n    /**\r\n     * Constructs a step rate policy.\r\n     *\r\n     * @param baseRate the rate at first iteration\r\n     * @param gamma=0.9 Learning rate retention per step; - _0 < `gamma` < 1_ - _large `gamma` CAN cause networks to never converge, low `gamma` CAN cause networks to converge too quickly_\r\n     */\r\n    constructor(baseRate, gamma = 0.999) {\r\n        super(baseRate);\r\n        this.gamma = gamma;\r\n    }\r\n    /**\r\n     * Calculates the current training rate.\r\n     *\r\n     * @param iteration count\r\n     * @returns the current training rate\r\n     */\r\n    calc(iteration) {\r\n        return this.baseRate * Math.pow(this.gamma, iteration);\r\n    }\r\n}\r\nexports.ExponentialRate = ExponentialRate;\r\n/**\r\n * Inverse Exponential Learning Rate\r\n *\r\n * The learning rate will exponentially decrease.\r\n *\r\n * The rate at `iteration` is calculated as: `rate = baseRate * Math.pow(1 + gamma * iteration, -power)`\r\n */\r\nclass InverseRate extends Rate {\r\n    /**\r\n     * Constructs a step rate policy.\r\n     *\r\n     * @param baseRate the rate at first iteration\r\n     * @param gamma=0.001 Learning rate decay per iteration; - _0 < `gamma` < 1_ - _large `gamma` CAN cause networks to converge too quickly and stop learning, low `gamma` CAN cause networks to converge to learn VERY slowly_\r\n     * @param power=2 Decay rate per iteration - _0 < `power`_ - _large `power` CAN cause networks to stop learning quickly, low `power` CAN cause networks to learn VERY slowly_\r\n     */\r\n    constructor(baseRate, gamma = 0.001, power = 2) {\r\n        super(baseRate);\r\n        this.gamma = gamma;\r\n        this.power = power;\r\n    }\r\n    /**\r\n     * Calculates the current training rate.\r\n     *\r\n     * @param iteration count\r\n     * @returns the current training rate\r\n     */\r\n    calc(iteration) {\r\n        return this.baseRate * Math.pow((1 + this.gamma * iteration), -this.power);\r\n    }\r\n}\r\nexports.InverseRate = InverseRate;\r\n//# sourceMappingURL=Rate.js.map\n\n//# sourceURL=webpack:///./build/src/methods/Rate.js?");

/***/ }),

/***/ "./build/src/methods/Selection.js":
/*!****************************************!*\
  !*** ./build/src/methods/Selection.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TournamentSelection = exports.PowerSelection = exports.FitnessProportionateSelection = exports.Selection = void 0;\r\nconst TimSort = __importStar(__webpack_require__(/*! timsort */ \"./node_modules/timsort/index.js\"));\r\nconst Utils_1 = __webpack_require__(/*! ../utils/Utils */ \"./build/src/utils/Utils.js\");\r\n/**\r\n * Genetic Algorithm Selection Methods (Genetic Operator)\r\n *\r\n * @see [Genetic Algorithm - Selection]{@link https://en.wikipedia.org/wiki/Selection_(genetic_algorithm)}\r\n */\r\nclass Selection {\r\n}\r\nexports.Selection = Selection;\r\n/**\r\n * Fitness proportionate selection\r\n *\r\n * [Fitness Proportionate / Roulette Wheel Selection on Wikipedia](https://en.wikipedia.org/wiki/Fitness_proportionate_selection)\r\n */\r\nclass FitnessProportionateSelection extends Selection {\r\n    /**\r\n     * Selects a genome from the population according to the Selection method.\r\n     *\r\n     * @param population the pool of networks\r\n     * @returns the selected genome\r\n     */\r\n    select(population) {\r\n        var _a, _b, _c;\r\n        let totalFitness = 0;\r\n        let minimalFitness = 0;\r\n        for (const genome of population) {\r\n            minimalFitness = Math.min((_a = genome.score) !== null && _a !== void 0 ? _a : minimalFitness, minimalFitness);\r\n            totalFitness += (_b = genome.score) !== null && _b !== void 0 ? _b : 0;\r\n        }\r\n        minimalFitness = Math.abs(minimalFitness);\r\n        totalFitness += minimalFitness * population.length;\r\n        const random = Utils_1.randDouble(0, totalFitness);\r\n        let value = 0;\r\n        for (const genome of population) {\r\n            value += ((_c = genome.score) !== null && _c !== void 0 ? _c : 0) + minimalFitness;\r\n            if (random < value) {\r\n                return genome;\r\n            }\r\n        }\r\n        return Utils_1.pickRandom(population);\r\n    }\r\n}\r\nexports.FitnessProportionateSelection = FitnessProportionateSelection;\r\n/**\r\n * Power selection\r\n *\r\n * A random decimal value between 0 and 1 will be generated (e.g. 0.5) then this value will get an exponential value (power, default is 4). So 0.5**4 = 0.0625. This is converted into an index for the array of the current population, sorted from fittest to worst.\r\n */\r\nclass PowerSelection extends Selection {\r\n    /**\r\n     * Constructs a power selection.\r\n     * @param power Probability of picking better networks.\r\n     */\r\n    constructor(power = 4) {\r\n        super();\r\n        this.power = power;\r\n    }\r\n    /**\r\n     * Selects a genome from the population according to the Selection method.\r\n     *\r\n     * @param population the pool of networks\r\n     * @returns the selected genome\r\n     */\r\n    select(population) {\r\n        return population[Math.floor(Math.pow(Math.random(), this.power) * population.length)];\r\n    }\r\n}\r\nexports.PowerSelection = PowerSelection;\r\n/**\r\n * Tournament selection\r\n *\r\n * [Tournament Selection on Wikipedia](https://en.wikipedia.org/wiki/Tournament_selection)\r\n */\r\nclass TournamentSelection extends Selection {\r\n    /**\r\n     * Constructs a tournament selection.\r\n     * @param size the size of a tournament\r\n     * @param probability Selects the best individual (when probability = 1).\r\n     */\r\n    constructor(size = 5, probability = 0.5) {\r\n        super();\r\n        this.size = size;\r\n        this.probability = probability;\r\n    }\r\n    /**\r\n     * Selects a genome from the population according to the Selection method.\r\n     *\r\n     * @param population the pool of networks\r\n     * @returns the selected genome\r\n     */\r\n    select(population) {\r\n        if (this.size > population.length) {\r\n            throw new Error('Your tournament size should be lower than the population size, please change methods.selection.TOURNAMENT.size');\r\n        }\r\n        // Create a tournament\r\n        const individuals = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            individuals.push(Utils_1.pickRandom(population));\r\n        }\r\n        // Sort the tournament individuals by score\r\n        TimSort.sort(individuals, (a, b) => {\r\n            return b.score === undefined || a.score === undefined\r\n                ? 0\r\n                : b.score - a.score;\r\n        });\r\n        // Select an individual\r\n        for (let i = 0; i < this.size; i++) {\r\n            if (Math.random() < this.probability || i === this.size - 1) {\r\n                return individuals[i];\r\n            }\r\n        }\r\n        return Utils_1.pickRandom(population);\r\n    }\r\n}\r\nexports.TournamentSelection = TournamentSelection;\r\n//# sourceMappingURL=Selection.js.map\n\n//# sourceURL=webpack:///./build/src/methods/Selection.js?");

/***/ }),

/***/ "./build/src/utils/Utils.js":
/*!**********************************!*\
  !*** ./build/src/utils/Utils.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.pairing = exports.generateGaussian = exports.avg = exports.sum = exports.min = exports.minValueIndex = exports.maxValueIndex = exports.max = exports.shuffle = exports.removeFromArray = exports.randBoolean = exports.randDouble = exports.randInt = exports.pickRandom = void 0;\r\n/**\r\n * Returns an random element from the given array.\r\n *\r\n * @param arr the array to pick from\r\n * @returns the random picked element\r\n */\r\nfunction pickRandom(arr) {\r\n    if (Array.isArray(arr)) {\r\n        if (arr.length === 0) {\r\n            throw new RangeError('Cannot pick from an empty array');\r\n        }\r\n        return arr[randInt(0, arr.length)];\r\n    }\r\n    else {\r\n        return pickRandom(Array.from(arr));\r\n    }\r\n}\r\nexports.pickRandom = pickRandom;\r\n/**\r\n * Returns a random integer in the range [min,max)\r\n *\r\n * @param min bound\r\n * @param max bound\r\n * @returns random integer in [min,max)\r\n */\r\nfunction randInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\nexports.randInt = randInt;\r\n/**\r\n * Returns a random double in the range [min,max)\r\n *\r\n * @param min bound\r\n * @param max bound\r\n * @returns random double in [min,max)\r\n */\r\nfunction randDouble(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nexports.randDouble = randDouble;\r\n/**\r\n * Returns a random boolean\r\n *\r\n * @returns random boolean\r\n */\r\nfunction randBoolean() {\r\n    return Math.random() >= 0.5;\r\n}\r\nexports.randBoolean = randBoolean;\r\n/**\r\n * Removes an element from an array.\r\n *\r\n * @param arr the array\r\n * @param elem the element which will be removed\r\n * @returns false -> element does not exists on array; true -> element removed from array\r\n */\r\nfunction removeFromArray(arr, elem) {\r\n    const index = arr.indexOf(elem);\r\n    if (index === -1) {\r\n        return false;\r\n    }\r\n    else {\r\n        arr.splice(index, 1);\r\n        return true;\r\n    }\r\n}\r\nexports.removeFromArray = removeFromArray;\r\n/**\r\n * Shuffles an array\r\n * @param array the array\r\n * @returns the shuffled array\r\n */\r\nfunction shuffle(array) {\r\n    // While there are elements in the array\r\n    for (let counter = array.length - 1; counter > 0; counter--) {\r\n        // Pick a random index\r\n        const index = randInt(0, counter);\r\n        // And swap the last element with it\r\n        const temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n}\r\nexports.shuffle = shuffle;\r\n/**\r\n * Finds the maximum value of an number array\r\n *\r\n * @param array\r\n */\r\nfunction max(array) {\r\n    if (array.length === 0) {\r\n        throw new RangeError();\r\n    }\r\n    let maxValue = array[0];\r\n    for (let i = 1; i < array.length; i++) {\r\n        if (array[i] > maxValue) {\r\n            maxValue = array[i];\r\n        }\r\n    }\r\n    return maxValue;\r\n}\r\nexports.max = max;\r\n/**\r\n * Finds the maximum value index of an number array\r\n *\r\n * @param array\r\n */\r\nfunction maxValueIndex(array) {\r\n    if (array.length === 0) {\r\n        throw new RangeError();\r\n    }\r\n    let maxValue = array[0];\r\n    let maxValueIndex = 0;\r\n    for (let i = 1; i < array.length; i++) {\r\n        if (array[i] > maxValue) {\r\n            maxValue = array[i];\r\n            maxValueIndex = i;\r\n        }\r\n    }\r\n    return maxValueIndex;\r\n}\r\nexports.maxValueIndex = maxValueIndex;\r\n/**\r\n * Finds the minimum value index of an number array\r\n *\r\n * @param array\r\n */\r\nfunction minValueIndex(array) {\r\n    if (array.length === 0) {\r\n        throw new RangeError();\r\n    }\r\n    let minValue = array[0];\r\n    let minValueIndex = 0;\r\n    for (let i = 1; i < array.length; i++) {\r\n        if (array[i] < minValue) {\r\n            minValue = array[i];\r\n            minValueIndex = i;\r\n        }\r\n    }\r\n    return minValueIndex;\r\n}\r\nexports.minValueIndex = minValueIndex;\r\n/**\r\n * Finds the minimum value of an number array\r\n *\r\n * @param array\r\n */\r\nfunction min(array) {\r\n    if (array.length === 0) {\r\n        throw new RangeError();\r\n    }\r\n    let minValue = array[0];\r\n    for (let i = 1; i < array.length; i++) {\r\n        if (array[i] < minValue) {\r\n            minValue = array[i];\r\n        }\r\n    }\r\n    return minValue;\r\n}\r\nexports.min = min;\r\n/**\r\n * Calculates the average value of an array\r\n *\r\n * @param array\r\n */\r\nfunction avg(array) {\r\n    return sum(array) / array.length;\r\n}\r\nexports.avg = avg;\r\n/**\r\n * Calculates the sum of all values of an array\r\n *\r\n * @param array\r\n */\r\nfunction sum(array) {\r\n    if (array.length === 0) {\r\n        throw new RangeError();\r\n    }\r\n    let sum = 0;\r\n    for (const value of array) {\r\n        sum += value;\r\n    }\r\n    return sum;\r\n}\r\nexports.sum = sum;\r\n/**\r\n * Generates a random number with the gaussian distribution.\r\n *\r\n * @see https://en.wikipedia.org/wiki/Normal_distribution\r\n *\r\n * @param mean the mean value\r\n * @param deviation the standard deviation\r\n */\r\nfunction generateGaussian(mean = 0, deviation = 2) {\r\n    let sum = 0;\r\n    const numSamples = 10;\r\n    for (let i = 0; i < numSamples; i++) {\r\n        sum += Math.random();\r\n    }\r\n    return (deviation * sum) / numSamples + mean - 0.5 * deviation;\r\n}\r\nexports.generateGaussian = generateGaussian;\r\n/**\r\n * Pairing two numbers\r\n *\r\n * @see {@link https://en.wikipedia.org/wiki/Pairing_function (Cantor pairing function)|Pairing function (Cantor pairing function)}\r\n *\r\n * @param a - A [natural number](https://en.wikipedia.org/wiki/Natural_number), which is an integer greater than or equal to zero\r\n * @param b - A [natural number](https://en.wikipedia.org/wiki/Natural_number), which is an integer greater than or equal to zero\r\n *\r\n * @return An Integer that uniquely represents a pair of Integers\r\n */\r\nfunction pairing(a, b) {\r\n    if (a < 0 || b < 0)\r\n        throw new RangeError('Should be a positive integer!');\r\n    return (1 / 2) * (a + b) * (a + b + 1) + b;\r\n}\r\nexports.pairing = pairing;\r\n//# sourceMappingURL=Utils.js.map\n\n//# sourceURL=webpack:///./build/src/utils/Utils.js?");

/***/ }),

/***/ "./node_modules/activations/build/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/activations/build/src/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ALL_ACTIVATIONS = exports.GAUSSIAN = exports.Sinc = exports.Sinusiod = exports.SiLU = exports.BentIdentity = exports.SoftPlus = exports.LeakyRELU = exports.RELU = exports.SoftSign = exports.ArSinH = exports.ArcTan = exports.SQNL = exports.TANH = exports.Logistic = exports.BinaryStep = exports.Identitiy = void 0;\n/**\n * The Identity activation function.\n * @see Identity function {@link https://en.wikipedia.org/wiki/Identity_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst Identitiy = (x, derivative = false) => !derivative ? x : 1;\nexports.Identitiy = Identitiy;\n/**\n * The Binary-Step activation function.\n * @see Binary Step function {@link https://en.wikipedia.org/wiki/Heaviside_step_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst BinaryStep = (x, derivative = false) => {\n    if (!derivative) {\n        return x < 0 ? 0 : 1;\n    }\n    else {\n        return 0;\n    }\n};\nexports.BinaryStep = BinaryStep;\n/**\n * The Logistic activation function.\n * @see Logistic function {@link https://en.wikipedia.org/wiki/Logistic_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst Logistic = (x, derivative = false) => {\n    const negativeEX = Math.exp(-x);\n    if (!derivative) {\n        return 1 / (1 + negativeEX);\n    }\n    else {\n        return 1 / (1 + negativeEX) * (1 - 1 / (1 + negativeEX));\n    }\n};\nexports.Logistic = Logistic;\n/**\n * The TANH activation function.\n * @see TanH function {@link https://en.wikipedia.org/wiki/Hyperbolic_function#Hyperbolic_tangent}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst TANH = (x, derivative = false) => {\n    if (!derivative) {\n        return Math.tanh(x);\n    }\n    else {\n        return 1 - Math.pow(Math.tanh(x), 2);\n    }\n};\nexports.TANH = TANH;\n/**\n * The SQNL activation function.\n * @see SQNL function {@link https://ieeexplore.ieee.org/document/8489043}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst SQNL = (x, derivative = false) => {\n    if (!derivative) {\n        if (x > 2) {\n            return 1;\n        }\n        else if (x >= 0) {\n            return x - Math.pow((x / 2), 2);\n        }\n        else if (x >= -2) {\n            return x + Math.pow((x / 2), 2);\n        }\n        else {\n            return -1;\n        }\n    }\n    else {\n        if (x > 2) {\n            return 0;\n        }\n        else if (x >= 0) {\n            return 1 - x / 2;\n        }\n        else if (x >= -2) {\n            return 1 + x / 2;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nexports.SQNL = SQNL;\n/**\n * The ArcTAN activation function.\n * @see ArcTAN function {@link https://en.wikipedia.org/wiki/Inverse_trigonometric_functions}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst ArcTan = (x, derivative = false) => {\n    if (!derivative) {\n        return Math.atan(x);\n    }\n    else {\n        return 1 / (Math.pow(x, 2) + 1);\n    }\n};\nexports.ArcTan = ArcTan;\n/**\n * The ArSinH activation function.\n * @see ArSinH function {@link https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#Inverse_hyperbolic_sine}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst ArSinH = (x, derivative = false) => {\n    if (!derivative) {\n        return Math.asinh(x);\n    }\n    else {\n        return 1 / Math.pow((Math.pow(x, 2) + 1), (1 / 2));\n    }\n};\nexports.ArSinH = ArSinH;\n/**\n * The SoftSign activation function.\n * @see SoftSign function {@link https://sefiks.com/2017/11/10/softsign-as-a-neural-networks-activation-function/}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst SoftSign = (x, derivative = false) => {\n    if (!derivative) {\n        return x / (1 + Math.abs(x));\n    }\n    else {\n        return 1 / Math.pow((1 + Math.abs(x)), 2);\n    }\n};\nexports.SoftSign = SoftSign;\n/**\n * The RELU activation function.\n * @see RELU function {@link https://en.wikipedia.org/wiki/Rectifier_(neural_networks)}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst RELU = (x, derivative = false) => {\n    if (!derivative) {\n        return x > 0 ? x : 0;\n    }\n    else {\n        return x > 0 ? 1 : 0;\n    }\n};\nexports.RELU = RELU;\n/**\n * The Leaky RELU activation function.\n * @see Leaky RELU function {@link https://medium.com/@himanshuxd/activation-functions-sigmoid-relu-leaky-relu-and-softmax-basics-for-neural-networks-and-deep-8d9c70eed91e}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst LeakyRELU = (x, derivative = false) => {\n    if (!derivative) {\n        return x > 0 ? x : 0.01 * x;\n    }\n    else {\n        return x > 0 ? 1 : 0.01;\n    }\n};\nexports.LeakyRELU = LeakyRELU;\n/**\n * The SoftPlus activation function.\n * @see SoftPlus function {@link https://sefiks.com/2017/08/11/softplus-as-a-neural-networks-activation-function/}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst SoftPlus = (x, derivative = false) => {\n    if (!derivative) {\n        return Math.log(1 + Math.exp(x));\n    }\n    else {\n        return 1 / (1 + Math.exp(-x));\n    }\n};\nexports.SoftPlus = SoftPlus;\n/**\n * The Bent-Identity activation function.\n * @see Bent-Identity function {@link https://en.wikipedia.org/wiki/Activation_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst BentIdentity = (x, derivative = false) => {\n    if (!derivative) {\n        return (Math.pow((Math.pow(x, 2) + 1), (1 / 2)) - 1) / 2 + x;\n    }\n    else {\n        return x / (2 * Math.pow((Math.pow(x, 2) + 1), (1 / 2))) + 1;\n    }\n};\nexports.BentIdentity = BentIdentity;\n/**\n * The SiLU activation function.\n * @see SiLU function {@link https://arxiv.org/pdf/1702.03118.pdf}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst SiLU = (x, derivative = false) => {\n    const negativeEX = Math.exp(-x);\n    if (!derivative) {\n        return x / (1 + negativeEX);\n    }\n    else {\n        return (1 + negativeEX + x * negativeEX) / Math.pow((1 + negativeEX), 2);\n    }\n};\nexports.SiLU = SiLU;\n/**\n * The Sinusoid activation function.\n * @see Sinusoid function {@link https://en.wikipedia.org/wiki/Sine_wave}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst Sinusiod = (x, derivative = false) => {\n    if (!derivative) {\n        return Math.sin(x);\n    }\n    else {\n        return Math.cos(x);\n    }\n};\nexports.Sinusiod = Sinusiod;\n/**\n * The Sinc activation function.\n * @see Sinc function {@link https://en.wikipedia.org/wiki/Sinc_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst Sinc = (x, derivative = false) => {\n    if (!derivative) {\n        return x === 0 ? 1 : Math.sin(x) / x;\n    }\n    else {\n        return x === 0 ? 0 : Math.cos(x) / x - Math.sin(x) / Math.pow(x, 2);\n    }\n};\nexports.Sinc = Sinc;\n/**\n * The Gaussian activation function.\n * @see Gaussian function {@link https://en.wikipedia.org/wiki/Gaussian_function}\n * @param x the input value\n * @param derivative calculate the derivative\n */\nconst GAUSSIAN = (x, derivative = false) => {\n    if (!derivative) {\n        return 1 / Math.exp(Math.pow(x, 2));\n    }\n    else {\n        return -2 * x * Math.exp(-(Math.pow(x, 2)));\n    }\n};\nexports.GAUSSIAN = GAUSSIAN;\nexports.ALL_ACTIVATIONS = [\n    Identitiy,\n    BinaryStep,\n    Logistic,\n    TANH,\n    SQNL,\n    ArcTan,\n    ArSinH,\n    SoftSign,\n    RELU,\n    LeakyRELU,\n    SoftPlus,\n    BentIdentity,\n    SiLU,\n    Sinusiod,\n    Sinc,\n    GAUSSIAN\n];\n\n\n//# sourceURL=webpack:///./node_modules/activations/build/src/index.js?");

/***/ }),

/***/ "./node_modules/is-observable/index.js":
/*!*********************************************!*\
  !*** ./node_modules/is-observable/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst symbolObservable = __webpack_require__(/*! symbol-observable */ \"./node_modules/symbol-observable/es/index.js\").default;\n\nmodule.exports = value => Boolean(value && value[symbolObservable] && value === value[symbolObservable]());\n\n\n//# sourceURL=webpack:///./node_modules/is-observable/index.js?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack:///./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/_scheduler.js":
/*!************************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/_scheduler.js ***!
  \************************************************************/
/*! exports provided: AsyncSerialScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AsyncSerialScheduler\", function() { return AsyncSerialScheduler; });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass AsyncSerialScheduler {\n    constructor(observer) {\n        this._baseObserver = observer;\n        this._pendingPromises = new Set();\n    }\n    complete() {\n        Promise.all(this._pendingPromises)\n            .then(() => this._baseObserver.complete())\n            .catch(error => this._baseObserver.error(error));\n    }\n    error(error) {\n        this._baseObserver.error(error);\n    }\n    schedule(task) {\n        const prevPromisesCompletion = Promise.all(this._pendingPromises);\n        const values = [];\n        const next = (value) => values.push(value);\n        const promise = Promise.resolve()\n            .then(() => __awaiter(this, void 0, void 0, function* () {\n            yield prevPromisesCompletion;\n            yield task(next);\n            this._pendingPromises.delete(promise);\n            for (const value of values) {\n                this._baseObserver.next(value);\n            }\n        }))\n            .catch(error => {\n            this._pendingPromises.delete(promise);\n            this._baseObserver.error(error);\n        });\n        this._pendingPromises.add(promise);\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/_scheduler.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/_symbols.js":
/*!**********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/_symbols.js ***!
  \**********************************************************/
/*! exports provided: hasSymbols, hasSymbol, getSymbol, registerObservableSymbol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasSymbols\", function() { return hasSymbols; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasSymbol\", function() { return hasSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSymbol\", function() { return getSymbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerObservableSymbol\", function() { return registerObservableSymbol; });\nconst hasSymbols = () => typeof Symbol === \"function\";\nconst hasSymbol = (name) => hasSymbols() && Boolean(Symbol[name]);\nconst getSymbol = (name) => hasSymbol(name) ? Symbol[name] : \"@@\" + name;\nfunction registerObservableSymbol() {\n    if (hasSymbols() && !hasSymbol(\"observable\")) {\n        Symbol.observable = Symbol(\"observable\");\n    }\n}\nif (!hasSymbol(\"asyncIterator\")) {\n    Symbol.asyncIterator = Symbol.asyncIterator || Symbol.for(\"Symbol.asyncIterator\");\n}\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/_symbols.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/_util.js":
/*!*******************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/_util.js ***!
  \*******************************************************/
/*! exports provided: isAsyncIterator, isIterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isAsyncIterator\", function() { return isAsyncIterator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIterator\", function() { return isIterator; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_symbols */ \"./node_modules/observable-fns/dist.esm/_symbols.js\");\n/// <reference lib=\"es2018\" />\n\nfunction isAsyncIterator(thing) {\n    return thing && Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"hasSymbol\"])(\"asyncIterator\") && thing[Symbol.asyncIterator];\n}\nfunction isIterator(thing) {\n    return thing && Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"hasSymbol\"])(\"iterator\") && thing[Symbol.iterator];\n}\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/_util.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/filter.js":
/*!********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/filter.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_scheduler */ \"./node_modules/observable-fns/dist.esm/_scheduler.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n/**\n * Filters the values emitted by another observable.\n * To be applied to an input observable using `pipe()`.\n */\nfunction filter(test) {\n    return (observable) => {\n        return new _observable__WEBPACK_IMPORTED_MODULE_1__[\"default\"](observer => {\n            const scheduler = new _scheduler__WEBPACK_IMPORTED_MODULE_0__[\"AsyncSerialScheduler\"](observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(input) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        if (yield test(input)) {\n                            next(input);\n                        }\n                    }));\n                }\n            });\n            return () => Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(subscription);\n        });\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (filter);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/filter.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/flatMap.js":
/*!*********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/flatMap.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_scheduler */ \"./node_modules/observable-fns/dist.esm/_scheduler.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_util */ \"./node_modules/observable-fns/dist.esm/_util.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (undefined && undefined.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\n\n\n\n\n/**\n * Maps the values emitted by another observable. In contrast to `map()`\n * the `mapper` function returns an array of values that will be emitted\n * separately.\n * Use `flatMap()` to map input values to zero, one or multiple output\n * values. To be applied to an input observable using `pipe()`.\n */\nfunction flatMap(mapper) {\n    return (observable) => {\n        return new _observable__WEBPACK_IMPORTED_MODULE_2__[\"default\"](observer => {\n            const scheduler = new _scheduler__WEBPACK_IMPORTED_MODULE_0__[\"AsyncSerialScheduler\"](observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(input) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        var e_1, _a;\n                        const mapped = yield mapper(input);\n                        if (Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"isIterator\"])(mapped) || Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"isAsyncIterator\"])(mapped)) {\n                            try {\n                                for (var mapped_1 = __asyncValues(mapped), mapped_1_1; mapped_1_1 = yield mapped_1.next(), !mapped_1_1.done;) {\n                                    const element = mapped_1_1.value;\n                                    next(element);\n                                }\n                            }\n                            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                            finally {\n                                try {\n                                    if (mapped_1_1 && !mapped_1_1.done && (_a = mapped_1.return)) yield _a.call(mapped_1);\n                                }\n                                finally { if (e_1) throw e_1.error; }\n                            }\n                        }\n                        else {\n                            mapped.map(output => next(output));\n                        }\n                    }));\n                }\n            });\n            return () => Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(subscription);\n        });\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (flatMap);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/flatMap.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/index.js ***!
  \*******************************************************/
/*! exports provided: filter, flatMap, interval, map, merge, multicast, Observable, scan, Subject, unsubscribe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ \"./node_modules/observable-fns/dist.esm/filter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"filter\", function() { return _filter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _flatMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flatMap */ \"./node_modules/observable-fns/dist.esm/flatMap.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flatMap\", function() { return _flatMap__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interval */ \"./node_modules/observable-fns/dist.esm/interval.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interval\", function() { return _interval__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ \"./node_modules/observable-fns/dist.esm/map.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return _map__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./merge */ \"./node_modules/observable-fns/dist.esm/merge.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"merge\", function() { return _merge__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multicast */ \"./node_modules/observable-fns/dist.esm/multicast.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"multicast\", function() { return _multicast__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Observable\", function() { return _observable__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scan */ \"./node_modules/observable-fns/dist.esm/scan.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"scan\", function() { return _scan__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _subject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./subject */ \"./node_modules/observable-fns/dist.esm/subject.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Subject\", function() { return _subject__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"unsubscribe\", function() { return _unsubscribe__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/index.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/interval.js":
/*!**********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/interval.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return interval; });\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n\n/**\n * Creates an observable that yields a new value every `period` milliseconds.\n * The first value emitted is 0, then 1, 2, etc. The first value is not emitted\n * immediately, but after the first interval.\n */\nfunction interval(period) {\n    return new _observable__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"](observer => {\n        let counter = 0;\n        const handle = setInterval(() => {\n            observer.next(counter++);\n        }, period);\n        return () => clearInterval(handle);\n    });\n}\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/interval.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/map.js":
/*!*****************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/map.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_scheduler */ \"./node_modules/observable-fns/dist.esm/_scheduler.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n/**\n * Maps the values emitted by another observable to different values.\n * To be applied to an input observable using `pipe()`.\n */\nfunction map(mapper) {\n    return (observable) => {\n        return new _observable__WEBPACK_IMPORTED_MODULE_1__[\"default\"](observer => {\n            const scheduler = new _scheduler__WEBPACK_IMPORTED_MODULE_0__[\"AsyncSerialScheduler\"](observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(input) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        const mapped = yield mapper(input);\n                        next(mapped);\n                    }));\n                }\n            });\n            return () => Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(subscription);\n        });\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (map);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/map.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/merge.js":
/*!*******************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/merge.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\n\n\nfunction merge(...observables) {\n    if (observables.length === 0) {\n        return _observable__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"].from([]);\n    }\n    return new _observable__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"](observer => {\n        let completed = 0;\n        const subscriptions = observables.map(input => {\n            return input.subscribe({\n                error(error) {\n                    observer.error(error);\n                    unsubscribeAll();\n                },\n                next(value) {\n                    observer.next(value);\n                },\n                complete() {\n                    if (++completed === observables.length) {\n                        observer.complete();\n                        unsubscribeAll();\n                    }\n                }\n            });\n        });\n        const unsubscribeAll = () => {\n            subscriptions.forEach(subscription => Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(subscription));\n        };\n        return unsubscribeAll;\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (merge);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/merge.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/multicast.js":
/*!***********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/multicast.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subject */ \"./node_modules/observable-fns/dist.esm/subject.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\n\n\n\n// TODO: Subject already creates additional observables \"under the hood\",\n//       now we introduce even more. A true native MulticastObservable\n//       would be preferable.\n/**\n * Takes a \"cold\" observable and returns a wrapping \"hot\" observable that\n * proxies the input observable's values and errors.\n *\n * An observable is called \"cold\" when its initialization function is run\n * for each new subscriber. This is how observable-fns's `Observable`\n * implementation works.\n *\n * A hot observable is an observable where new subscribers subscribe to\n * the upcoming values of an already-initialiazed observable.\n *\n * The multicast observable will lazily subscribe to the source observable\n * once it has its first own subscriber and will unsubscribe from the\n * source observable when its last own subscriber unsubscribed.\n */\nfunction multicast(coldObservable) {\n    const subject = new _subject__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    let sourceSubscription;\n    let subscriberCount = 0;\n    return new _observable__WEBPACK_IMPORTED_MODULE_0__[\"default\"](observer => {\n        // Init source subscription lazily\n        if (!sourceSubscription) {\n            sourceSubscription = coldObservable.subscribe(subject);\n        }\n        // Pipe all events from `subject` into this observable\n        const subscription = subject.subscribe(observer);\n        subscriberCount++;\n        return () => {\n            subscriberCount--;\n            subscription.unsubscribe();\n            // Close source subscription once last subscriber has unsubscribed\n            if (subscriberCount === 0) {\n                Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sourceSubscription);\n                sourceSubscription = undefined;\n            }\n        };\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (multicast);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/multicast.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/observable.js":
/*!************************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/observable.js ***!
  \************************************************************/
/*! exports provided: Subscription, SubscriptionObserver, Observable, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Subscription\", function() { return Subscription; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubscriptionObserver\", function() { return SubscriptionObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Observable\", function() { return Observable; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_symbols */ \"./node_modules/observable-fns/dist.esm/_symbols.js\");\n/**\n * Based on <https://raw.githubusercontent.com/zenparsing/zen-observable/master/src/Observable.js>\n * At commit: f63849a8c60af5d514efc8e9d6138d8273c49ad6\n */\n/// <reference path=\"../types/symbols.d.ts\" />\n\nconst SymbolIterator = Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"getSymbol\"])(\"iterator\");\nconst SymbolObservable = Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"getSymbol\"])(\"observable\");\nconst SymbolSpecies = Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"getSymbol\"])(\"species\");\n// === Abstract Operations ===\nfunction getMethod(obj, key) {\n    const value = obj[key];\n    if (value == null) {\n        return undefined;\n    }\n    if (typeof value !== \"function\") {\n        throw new TypeError(value + \" is not a function\");\n    }\n    return value;\n}\nfunction getSpecies(obj) {\n    let ctor = obj.constructor;\n    if (ctor !== undefined) {\n        ctor = ctor[SymbolSpecies];\n        if (ctor === null) {\n            ctor = undefined;\n        }\n    }\n    return ctor !== undefined ? ctor : Observable;\n}\nfunction isObservable(x) {\n    return x instanceof Observable; // SPEC: Brand check\n}\nfunction hostReportError(error) {\n    if (hostReportError.log) {\n        hostReportError.log(error);\n    }\n    else {\n        setTimeout(() => { throw error; }, 0);\n    }\n}\nfunction enqueue(fn) {\n    Promise.resolve().then(() => {\n        try {\n            fn();\n        }\n        catch (e) {\n            hostReportError(e);\n        }\n    });\n}\nfunction cleanupSubscription(subscription) {\n    const cleanup = subscription._cleanup;\n    if (cleanup === undefined) {\n        return;\n    }\n    subscription._cleanup = undefined;\n    if (!cleanup) {\n        return;\n    }\n    try {\n        if (typeof cleanup === \"function\") {\n            cleanup();\n        }\n        else {\n            const unsubscribe = getMethod(cleanup, \"unsubscribe\");\n            if (unsubscribe) {\n                unsubscribe.call(cleanup);\n            }\n        }\n    }\n    catch (e) {\n        hostReportError(e);\n    }\n}\nfunction closeSubscription(subscription) {\n    subscription._observer = undefined;\n    subscription._queue = undefined;\n    subscription._state = \"closed\";\n}\nfunction flushSubscription(subscription) {\n    const queue = subscription._queue;\n    if (!queue) {\n        return;\n    }\n    subscription._queue = undefined;\n    subscription._state = \"ready\";\n    for (const item of queue) {\n        notifySubscription(subscription, item.type, item.value);\n        if (subscription._state === \"closed\") {\n            break;\n        }\n    }\n}\nfunction notifySubscription(subscription, type, value) {\n    subscription._state = \"running\";\n    const observer = subscription._observer;\n    try {\n        const m = observer ? getMethod(observer, type) : undefined;\n        switch (type) {\n            case \"next\":\n                if (m)\n                    m.call(observer, value);\n                break;\n            case \"error\":\n                closeSubscription(subscription);\n                if (m)\n                    m.call(observer, value);\n                else\n                    throw value;\n                break;\n            case \"complete\":\n                closeSubscription(subscription);\n                if (m)\n                    m.call(observer);\n                break;\n        }\n    }\n    catch (e) {\n        hostReportError(e);\n    }\n    if (subscription._state === \"closed\") {\n        cleanupSubscription(subscription);\n    }\n    else if (subscription._state === \"running\") {\n        subscription._state = \"ready\";\n    }\n}\nfunction onNotify(subscription, type, value) {\n    if (subscription._state === \"closed\") {\n        return;\n    }\n    if (subscription._state === \"buffering\") {\n        subscription._queue = subscription._queue || [];\n        subscription._queue.push({ type, value });\n        return;\n    }\n    if (subscription._state !== \"ready\") {\n        subscription._state = \"buffering\";\n        subscription._queue = [{ type, value }];\n        enqueue(() => flushSubscription(subscription));\n        return;\n    }\n    notifySubscription(subscription, type, value);\n}\nclass Subscription {\n    constructor(observer, subscriber) {\n        // ASSERT: observer is an object\n        // ASSERT: subscriber is callable\n        this._cleanup = undefined;\n        this._observer = observer;\n        this._queue = undefined;\n        this._state = \"initializing\";\n        const subscriptionObserver = new SubscriptionObserver(this);\n        try {\n            this._cleanup = subscriber.call(undefined, subscriptionObserver);\n        }\n        catch (e) {\n            subscriptionObserver.error(e);\n        }\n        if (this._state === \"initializing\") {\n            this._state = \"ready\";\n        }\n    }\n    get closed() {\n        return this._state === \"closed\";\n    }\n    unsubscribe() {\n        if (this._state !== \"closed\") {\n            closeSubscription(this);\n            cleanupSubscription(this);\n        }\n    }\n}\nclass SubscriptionObserver {\n    constructor(subscription) { this._subscription = subscription; }\n    get closed() { return this._subscription._state === \"closed\"; }\n    next(value) { onNotify(this._subscription, \"next\", value); }\n    error(value) { onNotify(this._subscription, \"error\", value); }\n    complete() { onNotify(this._subscription, \"complete\"); }\n}\n/**\n * The basic Observable class. This primitive is used to wrap asynchronous\n * data streams in a common standardized data type that is interoperable\n * between libraries and can be composed to represent more complex processes.\n */\nclass Observable {\n    constructor(subscriber) {\n        if (!(this instanceof Observable)) {\n            throw new TypeError(\"Observable cannot be called as a function\");\n        }\n        if (typeof subscriber !== \"function\") {\n            throw new TypeError(\"Observable initializer must be a function\");\n        }\n        this._subscriber = subscriber;\n    }\n    subscribe(nextOrObserver, onError, onComplete) {\n        if (typeof nextOrObserver !== \"object\" || nextOrObserver === null) {\n            nextOrObserver = {\n                next: nextOrObserver,\n                error: onError,\n                complete: onComplete\n            };\n        }\n        return new Subscription(nextOrObserver, this._subscriber);\n    }\n    pipe(first, ...mappers) {\n        // tslint:disable-next-line no-this-assignment\n        let intermediate = this;\n        for (const mapper of [first, ...mappers]) {\n            intermediate = mapper(intermediate);\n        }\n        return intermediate;\n    }\n    tap(nextOrObserver, onError, onComplete) {\n        const tapObserver = typeof nextOrObserver !== \"object\" || nextOrObserver === null\n            ? {\n                next: nextOrObserver,\n                error: onError,\n                complete: onComplete\n            }\n            : nextOrObserver;\n        return new Observable(observer => {\n            return this.subscribe({\n                next(value) {\n                    tapObserver.next && tapObserver.next(value);\n                    observer.next(value);\n                },\n                error(error) {\n                    tapObserver.error && tapObserver.error(error);\n                    observer.error(error);\n                },\n                complete() {\n                    tapObserver.complete && tapObserver.complete();\n                    observer.complete();\n                },\n                start(subscription) {\n                    tapObserver.start && tapObserver.start(subscription);\n                }\n            });\n        });\n    }\n    forEach(fn) {\n        return new Promise((resolve, reject) => {\n            if (typeof fn !== \"function\") {\n                reject(new TypeError(fn + \" is not a function\"));\n                return;\n            }\n            function done() {\n                subscription.unsubscribe();\n                resolve();\n            }\n            const subscription = this.subscribe({\n                next(value) {\n                    try {\n                        fn(value, done);\n                    }\n                    catch (e) {\n                        reject(e);\n                        subscription.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n        });\n    }\n    map(fn) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(fn + \" is not a function\");\n        }\n        const C = getSpecies(this);\n        return new C(observer => this.subscribe({\n            next(value) {\n                let propagatedValue = value;\n                try {\n                    propagatedValue = fn(value);\n                }\n                catch (e) {\n                    return observer.error(e);\n                }\n                observer.next(propagatedValue);\n            },\n            error(e) { observer.error(e); },\n            complete() { observer.complete(); },\n        }));\n    }\n    filter(fn) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(fn + \" is not a function\");\n        }\n        const C = getSpecies(this);\n        return new C(observer => this.subscribe({\n            next(value) {\n                try {\n                    if (!fn(value))\n                        return;\n                }\n                catch (e) {\n                    return observer.error(e);\n                }\n                observer.next(value);\n            },\n            error(e) { observer.error(e); },\n            complete() { observer.complete(); },\n        }));\n    }\n    reduce(fn, seed) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(fn + \" is not a function\");\n        }\n        const C = getSpecies(this);\n        const hasSeed = arguments.length > 1;\n        let hasValue = false;\n        let acc = seed;\n        return new C(observer => this.subscribe({\n            next(value) {\n                const first = !hasValue;\n                hasValue = true;\n                if (!first || hasSeed) {\n                    try {\n                        acc = fn(acc, value);\n                    }\n                    catch (e) {\n                        return observer.error(e);\n                    }\n                }\n                else {\n                    acc = value;\n                }\n            },\n            error(e) { observer.error(e); },\n            complete() {\n                if (!hasValue && !hasSeed) {\n                    return observer.error(new TypeError(\"Cannot reduce an empty sequence\"));\n                }\n                observer.next(acc);\n                observer.complete();\n            },\n        }));\n    }\n    concat(...sources) {\n        const C = getSpecies(this);\n        return new C(observer => {\n            let subscription;\n            let index = 0;\n            function startNext(next) {\n                subscription = next.subscribe({\n                    next(v) { observer.next(v); },\n                    error(e) { observer.error(e); },\n                    complete() {\n                        if (index === sources.length) {\n                            subscription = undefined;\n                            observer.complete();\n                        }\n                        else {\n                            startNext(C.from(sources[index++]));\n                        }\n                    },\n                });\n            }\n            startNext(this);\n            return () => {\n                if (subscription) {\n                    subscription.unsubscribe();\n                    subscription = undefined;\n                }\n            };\n        });\n    }\n    flatMap(fn) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(fn + \" is not a function\");\n        }\n        const C = getSpecies(this);\n        return new C(observer => {\n            const subscriptions = [];\n            const outer = this.subscribe({\n                next(value) {\n                    let normalizedValue;\n                    if (fn) {\n                        try {\n                            normalizedValue = fn(value);\n                        }\n                        catch (e) {\n                            return observer.error(e);\n                        }\n                    }\n                    else {\n                        normalizedValue = value;\n                    }\n                    const inner = C.from(normalizedValue).subscribe({\n                        next(innerValue) { observer.next(innerValue); },\n                        error(e) { observer.error(e); },\n                        complete() {\n                            const i = subscriptions.indexOf(inner);\n                            if (i >= 0)\n                                subscriptions.splice(i, 1);\n                            completeIfDone();\n                        },\n                    });\n                    subscriptions.push(inner);\n                },\n                error(e) { observer.error(e); },\n                complete() { completeIfDone(); },\n            });\n            function completeIfDone() {\n                if (outer.closed && subscriptions.length === 0) {\n                    observer.complete();\n                }\n            }\n            return () => {\n                subscriptions.forEach(s => s.unsubscribe());\n                outer.unsubscribe();\n            };\n        });\n    }\n    [SymbolObservable]() { return this; }\n    static from(x) {\n        const C = (typeof this === \"function\" ? this : Observable);\n        if (x == null) {\n            throw new TypeError(x + \" is not an object\");\n        }\n        const observableMethod = getMethod(x, SymbolObservable);\n        if (observableMethod) {\n            const observable = observableMethod.call(x);\n            if (Object(observable) !== observable) {\n                throw new TypeError(observable + \" is not an object\");\n            }\n            if (isObservable(observable) && observable.constructor === C) {\n                return observable;\n            }\n            return new C(observer => observable.subscribe(observer));\n        }\n        if (Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"hasSymbol\"])(\"iterator\")) {\n            const iteratorMethod = getMethod(x, SymbolIterator);\n            if (iteratorMethod) {\n                return new C(observer => {\n                    enqueue(() => {\n                        if (observer.closed)\n                            return;\n                        for (const item of iteratorMethod.call(x)) {\n                            observer.next(item);\n                            if (observer.closed)\n                                return;\n                        }\n                        observer.complete();\n                    });\n                });\n            }\n        }\n        if (Array.isArray(x)) {\n            return new C(observer => {\n                enqueue(() => {\n                    if (observer.closed)\n                        return;\n                    for (const item of x) {\n                        observer.next(item);\n                        if (observer.closed)\n                            return;\n                    }\n                    observer.complete();\n                });\n            });\n        }\n        throw new TypeError(x + \" is not observable\");\n    }\n    static of(...items) {\n        const C = (typeof this === \"function\" ? this : Observable);\n        return new C(observer => {\n            enqueue(() => {\n                if (observer.closed)\n                    return;\n                for (const item of items) {\n                    observer.next(item);\n                    if (observer.closed)\n                        return;\n                }\n                observer.complete();\n            });\n        });\n    }\n    static get [SymbolSpecies]() { return this; }\n}\nif (Object(_symbols__WEBPACK_IMPORTED_MODULE_0__[\"hasSymbols\"])()) {\n    Object.defineProperty(Observable, Symbol(\"extensions\"), {\n        value: {\n            symbol: SymbolObservable,\n            hostReportError,\n        },\n        configurable: true,\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Observable);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/observable.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/scan.js":
/*!******************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/scan.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_scheduler */ \"./node_modules/observable-fns/dist.esm/_scheduler.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n/* harmony import */ var _unsubscribe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsubscribe */ \"./node_modules/observable-fns/dist.esm/unsubscribe.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nfunction scan(accumulator, seed) {\n    return (observable) => {\n        return new _observable__WEBPACK_IMPORTED_MODULE_1__[\"default\"](observer => {\n            let accumulated;\n            let index = 0;\n            const scheduler = new _scheduler__WEBPACK_IMPORTED_MODULE_0__[\"AsyncSerialScheduler\"](observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(value) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        const prevAcc = index === 0\n                            ? (typeof seed === \"undefined\" ? value : seed)\n                            : accumulated;\n                        accumulated = yield accumulator(prevAcc, value, index++);\n                        next(accumulated);\n                    }));\n                }\n            });\n            return () => Object(_unsubscribe__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(subscription);\n        });\n    };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (scan);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/scan.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/subject.js":
/*!*********************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/subject.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable */ \"./node_modules/observable-fns/dist.esm/observable.js\");\n\n// TODO: This observer iteration approach looks inelegant and expensive\n// Idea: Come up with super class for Subscription that contains the\n//       notify*, ... methods and use it here\n/**\n * A subject is a \"hot\" observable (see `multicast`) that has its observer\n * methods (`.next(value)`, `.error(error)`, `.complete()`) exposed.\n *\n * Be careful, though! With great power comes great responsibility. Only use\n * the `Subject` when you really need to trigger updates \"from the outside\" and\n * try to keep the code that can access it to a minimum. Return\n * `Observable.from(mySubject)` to not allow other code to mutate.\n */\nclass MulticastSubject extends _observable__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super(observer => {\n            this._observers.add(observer);\n            return () => this._observers.delete(observer);\n        });\n        this._observers = new Set();\n    }\n    next(value) {\n        for (const observer of this._observers) {\n            observer.next(value);\n        }\n    }\n    error(error) {\n        for (const observer of this._observers) {\n            observer.error(error);\n        }\n    }\n    complete() {\n        for (const observer of this._observers) {\n            observer.complete();\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MulticastSubject);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/subject.js?");

/***/ }),

/***/ "./node_modules/observable-fns/dist.esm/unsubscribe.js":
/*!*************************************************************!*\
  !*** ./node_modules/observable-fns/dist.esm/unsubscribe.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Unsubscribe from a subscription returned by something that looks like an observable,\n * but is not necessarily our observable implementation.\n */\nfunction unsubscribe(subscription) {\n    if (typeof subscription === \"function\") {\n        subscription();\n    }\n    else if (subscription && typeof subscription.unsubscribe === \"function\") {\n        subscription.unsubscribe();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (unsubscribe);\n\n\n//# sourceURL=webpack:///./node_modules/observable-fns/dist.esm/unsubscribe.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/symbol-observable/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/symbol-observable/es/index.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ \"./node_modules/symbol-observable/es/ponyfill.js\");\n/* global window */\n\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (true) {\n  root = module;\n} else {}\n\nvar result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(root);\n/* harmony default export */ __webpack_exports__[\"default\"] = (result);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/symbol-observable/es/index.js?");

/***/ }),

/***/ "./node_modules/symbol-observable/es/ponyfill.js":
/*!*******************************************************!*\
  !*** ./node_modules/symbol-observable/es/ponyfill.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return symbolObservablePonyfill; });\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n//# sourceURL=webpack:///./node_modules/symbol-observable/es/ponyfill.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/common.js":
/*!*************************************************!*\
  !*** ./node_modules/threads/dist-esm/common.js ***!
  \*************************************************/
/*! exports provided: registerSerializer, deserialize, serialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerSerializer\", function() { return registerSerializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deserialize\", function() { return deserialize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"serialize\", function() { return serialize; });\n/* harmony import */ var _serializers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializers */ \"./node_modules/threads/dist-esm/serializers.js\");\n\nlet registeredSerializer = _serializers__WEBPACK_IMPORTED_MODULE_0__[\"DefaultSerializer\"];\nfunction registerSerializer(serializer) {\n    registeredSerializer = Object(_serializers__WEBPACK_IMPORTED_MODULE_0__[\"extendSerializer\"])(registeredSerializer, serializer);\n}\nfunction deserialize(message) {\n    return registeredSerializer.deserialize(message);\n}\nfunction serialize(input) {\n    return registeredSerializer.serialize(input);\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/common.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/threads/dist-esm/index.js ***!
  \************************************************/
/*! exports provided: registerSerializer, Pool, spawn, Thread, Worker, expose, DefaultSerializer, Transfer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ \"./node_modules/threads/dist-esm/common.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"registerSerializer\", function() { return _common__WEBPACK_IMPORTED_MODULE_0__[\"registerSerializer\"]; });\n\n/* harmony import */ var _master_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./master/index */ \"./node_modules/threads/dist-esm/master/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Pool\", function() { return _master_index__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"spawn\", function() { return _master_index__WEBPACK_IMPORTED_MODULE_1__[\"spawn\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Thread\", function() { return _master_index__WEBPACK_IMPORTED_MODULE_1__[\"Thread\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Worker\", function() { return _master_index__WEBPACK_IMPORTED_MODULE_1__[\"Worker\"]; });\n\n/* harmony import */ var _worker_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worker/index */ \"./node_modules/threads/dist-esm/worker/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"expose\", function() { return _worker_index__WEBPACK_IMPORTED_MODULE_2__[\"expose\"]; });\n\n/* harmony import */ var _serializers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serializers */ \"./node_modules/threads/dist-esm/serializers.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultSerializer\", function() { return _serializers__WEBPACK_IMPORTED_MODULE_3__[\"DefaultSerializer\"]; });\n\n/* harmony import */ var _transferable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transferable */ \"./node_modules/threads/dist-esm/transferable.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Transfer\", function() { return _transferable__WEBPACK_IMPORTED_MODULE_4__[\"Transfer\"]; });\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/index.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/get-bundle-url.browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/get-bundle-url.browser.js ***!
  \************************************************************************/
/*! exports provided: getBaseURL, getBundleURL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBaseURL\", function() { return getBaseURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBundleURL\", function() { return getBundleURLCached; });\n// Source: <https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/builtins/bundle-url.js>\nlet bundleURL;\nfunction getBundleURLCached() {\n    if (!bundleURL) {\n        bundleURL = getBundleURL();\n    }\n    return bundleURL;\n}\nfunction getBundleURL() {\n    // Attempt to find the URL of the current script and use that as the base URL\n    try {\n        throw new Error;\n    }\n    catch (err) {\n        const matches = (\"\" + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n        if (matches) {\n            return getBaseURL(matches[0]);\n        }\n    }\n    return \"/\";\n}\nfunction getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\n\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/get-bundle-url.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/implementation.browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/implementation.browser.js ***!
  \************************************************************************/
/*! exports provided: defaultPoolSize, selectWorkerImplementation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultPoolSize\", function() { return defaultPoolSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectWorkerImplementation\", function() { return selectWorkerImplementation; });\n/* harmony import */ var _get_bundle_url_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-bundle-url.browser */ \"./node_modules/threads/dist-esm/master/get-bundle-url.browser.js\");\n// tslint:disable max-classes-per-file\n\nconst defaultPoolSize = typeof navigator !== \"undefined\" && navigator.hardwareConcurrency\n    ? navigator.hardwareConcurrency\n    : 4;\nconst isAbsoluteURL = (value) => /^(file|https?:)?\\/\\//i.test(value);\nfunction createSourceBlobURL(code) {\n    const blob = new Blob([code], { type: \"application/javascript\" });\n    return URL.createObjectURL(blob);\n}\nfunction selectWorkerImplementation() {\n    if (typeof Worker === \"undefined\") {\n        // Might happen on Safari, for instance\n        // The idea is to only fail if the constructor is actually used\n        return class NoWebWorker {\n            constructor() {\n                throw Error(\"No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.\");\n            }\n        };\n    }\n    return class WebWorker extends Worker {\n        constructor(url, options) {\n            if (typeof url === \"string\" && options && options._baseURL) {\n                url = new URL(url, options._baseURL);\n            }\n            else if (typeof url === \"string\" && !isAbsoluteURL(url) && Object(_get_bundle_url_browser__WEBPACK_IMPORTED_MODULE_0__[\"getBundleURL\"])().match(/^file:\\/\\//i)) {\n                url = new URL(url, Object(_get_bundle_url_browser__WEBPACK_IMPORTED_MODULE_0__[\"getBundleURL\"])().replace(/\\/[^\\/]+$/, \"/\"));\n                url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n            }\n            if (typeof url === \"string\" && isAbsoluteURL(url)) {\n                // Create source code blob loading JS file via `importScripts()`\n                // to circumvent worker CORS restrictions\n                url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n            }\n            super(url, options);\n        }\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/implementation.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/index.js ***!
  \*******************************************************/
/*! exports provided: Pool, spawn, Thread, Worker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Worker\", function() { return Worker; });\n/* harmony import */ var _implementation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist-esm/master/implementation.browser.js\");\n/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pool */ \"./node_modules/threads/dist-esm/master/pool.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Pool\", function() { return _pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"]; });\n\n/* harmony import */ var _spawn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spawn */ \"./node_modules/threads/dist-esm/master/spawn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"spawn\", function() { return _spawn__WEBPACK_IMPORTED_MODULE_2__[\"spawn\"]; });\n\n/* harmony import */ var _thread__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./thread */ \"./node_modules/threads/dist-esm/master/thread.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Thread\", function() { return _thread__WEBPACK_IMPORTED_MODULE_3__[\"Thread\"]; });\n\n\n\n\n\n/** Worker implementation. Either web worker or a node.js Worker class. */\nconst Worker = Object(_implementation__WEBPACK_IMPORTED_MODULE_0__[\"selectWorkerImplementation\"])();\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/index.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/invocation-proxy.js":
/*!******************************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/invocation-proxy.js ***!
  \******************************************************************/
/*! exports provided: createProxyFunction, createProxyModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createProxyFunction\", function() { return createProxyFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createProxyModule\", function() { return createProxyModule; });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var observable_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist-esm/common.js\");\n/* harmony import */ var _observable_promise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable-promise */ \"./node_modules/threads/dist-esm/observable-promise.js\");\n/* harmony import */ var _transferable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transferable */ \"./node_modules/threads/dist-esm/transferable.js\");\n/* harmony import */ var _types_messages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/messages */ \"./node_modules/threads/dist-esm/types/messages.js\");\n/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize more…\n */\n\n\n\n\n\n\nconst debugMessages = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"threads:master:messages\");\nlet nextJobUID = 1;\nconst dedupe = (array) => Array.from(new Set(array));\nconst isJobErrorMessage = (data) => data && data.type === _types_messages__WEBPACK_IMPORTED_MODULE_5__[\"WorkerMessageType\"].error;\nconst isJobResultMessage = (data) => data && data.type === _types_messages__WEBPACK_IMPORTED_MODULE_5__[\"WorkerMessageType\"].result;\nconst isJobStartMessage = (data) => data && data.type === _types_messages__WEBPACK_IMPORTED_MODULE_5__[\"WorkerMessageType\"].running;\nfunction createObservableForJob(worker, jobUID) {\n    return new observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"Observable\"](observer => {\n        let asyncType;\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker:\", event.data);\n            if (!event.data || event.data.uid !== jobUID)\n                return;\n            if (isJobStartMessage(event.data)) {\n                asyncType = event.data.resultType;\n            }\n            else if (isJobResultMessage(event.data)) {\n                if (asyncType === \"promise\") {\n                    if (typeof event.data.payload !== \"undefined\") {\n                        observer.next(Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"deserialize\"])(event.data.payload));\n                    }\n                    observer.complete();\n                    worker.removeEventListener(\"message\", messageHandler);\n                }\n                else {\n                    if (event.data.payload) {\n                        observer.next(Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"deserialize\"])(event.data.payload));\n                    }\n                    if (event.data.complete) {\n                        observer.complete();\n                        worker.removeEventListener(\"message\", messageHandler);\n                    }\n                }\n            }\n            else if (isJobErrorMessage(event.data)) {\n                const error = Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"deserialize\"])(event.data.error);\n                if (asyncType === \"promise\" || !asyncType) {\n                    observer.error(error);\n                }\n                else {\n                    observer.error(error);\n                }\n                worker.removeEventListener(\"message\", messageHandler);\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        return () => worker.removeEventListener(\"message\", messageHandler);\n    });\n}\nfunction prepareArguments(rawArgs) {\n    if (rawArgs.length === 0) {\n        // Exit early if possible\n        return {\n            args: [],\n            transferables: []\n        };\n    }\n    const args = [];\n    const transferables = [];\n    for (const arg of rawArgs) {\n        if (Object(_transferable__WEBPACK_IMPORTED_MODULE_4__[\"isTransferDescriptor\"])(arg)) {\n            args.push(Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"serialize\"])(arg.send));\n            transferables.push(...arg.transferables);\n        }\n        else {\n            args.push(Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"serialize\"])(arg));\n        }\n    }\n    return {\n        args,\n        transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n    };\n}\nfunction createProxyFunction(worker, method) {\n    return ((...rawArgs) => {\n        const uid = nextJobUID++;\n        const { args, transferables } = prepareArguments(rawArgs);\n        const runMessage = {\n            type: _types_messages__WEBPACK_IMPORTED_MODULE_5__[\"MasterMessageType\"].run,\n            uid,\n            method,\n            args\n        };\n        debugMessages(\"Sending command to run function to worker:\", runMessage);\n        try {\n            worker.postMessage(runMessage, transferables);\n        }\n        catch (error) {\n            return _observable_promise__WEBPACK_IMPORTED_MODULE_3__[\"ObservablePromise\"].from(Promise.reject(error));\n        }\n        return _observable_promise__WEBPACK_IMPORTED_MODULE_3__[\"ObservablePromise\"].from(Object(observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"multicast\"])(createObservableForJob(worker, uid)));\n    });\n}\nfunction createProxyModule(worker, methodNames) {\n    const proxy = {};\n    for (const methodName of methodNames) {\n        proxy[methodName] = createProxyFunction(worker, methodName);\n    }\n    return proxy;\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/invocation-proxy.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/pool-types.js":
/*!************************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/pool-types.js ***!
  \************************************************************/
/*! exports provided: PoolEventType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PoolEventType\", function() { return PoolEventType; });\n/** Pool event type. Specifies the type of each `PoolEvent`. */\nvar PoolEventType;\n(function (PoolEventType) {\n    PoolEventType[\"initialized\"] = \"initialized\";\n    PoolEventType[\"taskCanceled\"] = \"taskCanceled\";\n    PoolEventType[\"taskCompleted\"] = \"taskCompleted\";\n    PoolEventType[\"taskFailed\"] = \"taskFailed\";\n    PoolEventType[\"taskQueued\"] = \"taskQueued\";\n    PoolEventType[\"taskQueueDrained\"] = \"taskQueueDrained\";\n    PoolEventType[\"taskStart\"] = \"taskStart\";\n    PoolEventType[\"terminated\"] = \"terminated\";\n})(PoolEventType || (PoolEventType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/pool-types.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/pool.js":
/*!******************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/pool.js ***!
  \******************************************************/
/*! exports provided: PoolEventType, Thread, Pool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pool\", function() { return Pool; });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var observable_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\n/* harmony import */ var _ponyfills__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ponyfills */ \"./node_modules/threads/dist-esm/ponyfills.js\");\n/* harmony import */ var _implementation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist-esm/master/implementation.browser.js\");\n/* harmony import */ var _pool_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pool-types */ \"./node_modules/threads/dist-esm/master/pool-types.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PoolEventType\", function() { return _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"]; });\n\n/* harmony import */ var _thread__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./thread */ \"./node_modules/threads/dist-esm/master/thread.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Thread\", function() { return _thread__WEBPACK_IMPORTED_MODULE_5__[\"Thread\"]; });\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nlet nextPoolID = 1;\nfunction createArray(size) {\n    const array = [];\n    for (let index = 0; index < size; index++) {\n        array.push(index);\n    }\n    return array;\n}\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction flatMap(array, mapper) {\n    return array.reduce((flattened, element) => [...flattened, ...mapper(element)], []);\n}\nfunction slugify(text) {\n    return text.replace(/\\W/g, \" \").trim().replace(/\\s+/g, \"-\");\n}\nfunction spawnWorkers(spawnWorker, count) {\n    return createArray(count).map(() => ({\n        init: spawnWorker(),\n        runningTasks: []\n    }));\n}\nclass WorkerPool {\n    constructor(spawnWorker, optionsOrSize) {\n        this.eventSubject = new observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"Subject\"]();\n        this.initErrors = [];\n        this.isClosing = false;\n        this.nextTaskID = 1;\n        this.taskQueue = [];\n        const options = typeof optionsOrSize === \"number\"\n            ? { size: optionsOrSize }\n            : optionsOrSize || {};\n        const { size = _implementation__WEBPACK_IMPORTED_MODULE_3__[\"defaultPoolSize\"] } = options;\n        this.debug = debug__WEBPACK_IMPORTED_MODULE_0___default()(`threads:pool:${slugify(options.name || String(nextPoolID++))}`);\n        this.options = options;\n        this.workers = spawnWorkers(spawnWorker, size);\n        this.eventObservable = Object(observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"multicast\"])(observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"Observable\"].from(this.eventSubject));\n        Promise.all(this.workers.map(worker => worker.init)).then(() => this.eventSubject.next({\n            type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].initialized,\n            size: this.workers.length\n        }), error => {\n            this.debug(\"Error while initializing pool worker:\", error);\n            this.eventSubject.error(error);\n            this.initErrors.push(error);\n        });\n    }\n    findIdlingWorker() {\n        const { concurrency = 1 } = this.options;\n        return this.workers.find(worker => worker.runningTasks.length < concurrency);\n    }\n    runPoolTask(worker, task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const workerID = this.workers.indexOf(worker) + 1;\n            this.debug(`Running task #${task.id} on worker #${workerID}...`);\n            this.eventSubject.next({\n                type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskStart,\n                taskID: task.id,\n                workerID\n            });\n            try {\n                const returnValue = yield task.run(yield worker.init);\n                this.debug(`Task #${task.id} completed successfully`);\n                this.eventSubject.next({\n                    type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskCompleted,\n                    returnValue,\n                    taskID: task.id,\n                    workerID\n                });\n            }\n            catch (error) {\n                this.debug(`Task #${task.id} failed`);\n                this.eventSubject.next({\n                    type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskFailed,\n                    taskID: task.id,\n                    error,\n                    workerID\n                });\n            }\n        });\n    }\n    run(worker, task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const runPromise = (() => __awaiter(this, void 0, void 0, function* () {\n                const removeTaskFromWorkersRunningTasks = () => {\n                    worker.runningTasks = worker.runningTasks.filter(someRunPromise => someRunPromise !== runPromise);\n                };\n                // Defer task execution by one tick to give handlers time to subscribe\n                yield delay(0);\n                try {\n                    yield this.runPoolTask(worker, task);\n                }\n                finally {\n                    removeTaskFromWorkersRunningTasks();\n                    if (!this.isClosing) {\n                        this.scheduleWork();\n                    }\n                }\n            }))();\n            worker.runningTasks.push(runPromise);\n        });\n    }\n    scheduleWork() {\n        this.debug(`Attempt de-queueing a task in order to run it...`);\n        const availableWorker = this.findIdlingWorker();\n        if (!availableWorker)\n            return;\n        const nextTask = this.taskQueue.shift();\n        if (!nextTask) {\n            this.debug(`Task queue is empty`);\n            this.eventSubject.next({ type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskQueueDrained });\n            return;\n        }\n        this.run(availableWorker, nextTask);\n    }\n    taskCompletion(taskID) {\n        return new Promise((resolve, reject) => {\n            const eventSubscription = this.events().subscribe(event => {\n                if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskCompleted && event.taskID === taskID) {\n                    eventSubscription.unsubscribe();\n                    resolve(event.returnValue);\n                }\n                else if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskFailed && event.taskID === taskID) {\n                    eventSubscription.unsubscribe();\n                    reject(event.error);\n                }\n                else if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].terminated) {\n                    eventSubscription.unsubscribe();\n                    reject(Error(\"Pool has been terminated before task was run.\"));\n                }\n            });\n        });\n    }\n    settled(allowResolvingImmediately = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const getCurrentlyRunningTasks = () => flatMap(this.workers, worker => worker.runningTasks);\n            const taskFailures = [];\n            const failureSubscription = this.eventObservable.subscribe(event => {\n                if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskFailed) {\n                    taskFailures.push(event.error);\n                }\n            });\n            if (this.initErrors.length > 0) {\n                return Promise.reject(this.initErrors[0]);\n            }\n            if (allowResolvingImmediately && this.taskQueue.length === 0) {\n                yield Object(_ponyfills__WEBPACK_IMPORTED_MODULE_2__[\"allSettled\"])(getCurrentlyRunningTasks());\n                return taskFailures;\n            }\n            yield new Promise((resolve, reject) => {\n                const subscription = this.eventObservable.subscribe({\n                    next(event) {\n                        if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskQueueDrained) {\n                            subscription.unsubscribe();\n                            resolve();\n                        }\n                    },\n                    error: reject // make a pool-wide error reject the completed() result promise\n                });\n            });\n            yield Object(_ponyfills__WEBPACK_IMPORTED_MODULE_2__[\"allSettled\"])(getCurrentlyRunningTasks());\n            failureSubscription.unsubscribe();\n            return taskFailures;\n        });\n    }\n    completed(allowResolvingImmediately = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const settlementPromise = this.settled(allowResolvingImmediately);\n            const earlyExitPromise = new Promise((resolve, reject) => {\n                const subscription = this.eventObservable.subscribe({\n                    next(event) {\n                        if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskQueueDrained) {\n                            subscription.unsubscribe();\n                            resolve(settlementPromise);\n                        }\n                        else if (event.type === _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskFailed) {\n                            subscription.unsubscribe();\n                            reject(event.error);\n                        }\n                    },\n                    error: reject // make a pool-wide error reject the completed() result promise\n                });\n            });\n            const errors = yield Promise.race([\n                settlementPromise,\n                earlyExitPromise\n            ]);\n            if (errors.length > 0) {\n                throw errors[0];\n            }\n        });\n    }\n    events() {\n        return this.eventObservable;\n    }\n    queue(taskFunction) {\n        const { maxQueuedJobs = Infinity } = this.options;\n        if (this.isClosing) {\n            throw Error(`Cannot schedule pool tasks after terminate() has been called.`);\n        }\n        if (this.initErrors.length > 0) {\n            throw this.initErrors[0];\n        }\n        const taskCompleted = () => this.taskCompletion(task.id);\n        let taskCompletionDotThen;\n        const task = {\n            id: this.nextTaskID++,\n            run: taskFunction,\n            cancel: () => {\n                if (this.taskQueue.indexOf(task) === -1)\n                    return;\n                this.taskQueue = this.taskQueue.filter(someTask => someTask !== task);\n                this.eventSubject.next({\n                    type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskCanceled,\n                    taskID: task.id\n                });\n            },\n            get then() {\n                if (!taskCompletionDotThen) {\n                    const promise = taskCompleted();\n                    taskCompletionDotThen = promise.then.bind(promise);\n                }\n                return taskCompletionDotThen;\n            }\n        };\n        if (this.taskQueue.length >= maxQueuedJobs) {\n            throw Error(\"Maximum number of pool tasks queued. Refusing to queue another one.\\n\" +\n                \"This usually happens for one of two reasons: We are either at peak \" +\n                \"workload right now or some tasks just won't finish, thus blocking the pool.\");\n        }\n        this.debug(`Queueing task #${task.id}...`);\n        this.taskQueue.push(task);\n        this.eventSubject.next({\n            type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].taskQueued,\n            taskID: task.id\n        });\n        this.scheduleWork();\n        return task;\n    }\n    terminate(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.isClosing = true;\n            if (!force) {\n                yield this.completed(true);\n            }\n            this.eventSubject.next({\n                type: _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"].terminated,\n                remainingQueue: [...this.taskQueue]\n            });\n            this.eventSubject.complete();\n            yield Promise.all(this.workers.map((worker) => __awaiter(this, void 0, void 0, function* () { return _thread__WEBPACK_IMPORTED_MODULE_5__[\"Thread\"].terminate(yield worker.init); })));\n        });\n    }\n}\nWorkerPool.EventType = _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"];\n/**\n * Thread pool constructor. Creates a new pool and spawns its worker threads.\n */\nfunction PoolConstructor(spawnWorker, optionsOrSize) {\n    // The function exists only so we don't need to use `new` to create a pool (we still can, though).\n    // If the Pool is a class or not is an implementation detail that should not concern the user.\n    return new WorkerPool(spawnWorker, optionsOrSize);\n}\nPoolConstructor.EventType = _pool_types__WEBPACK_IMPORTED_MODULE_4__[\"PoolEventType\"];\n/**\n * Thread pool constructor. Creates a new pool and spawns its worker threads.\n */\nconst Pool = PoolConstructor;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/pool.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/spawn.js":
/*!*******************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/spawn.js ***!
  \*******************************************************/
/*! exports provided: spawn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"spawn\", function() { return spawn; });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var observable_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist-esm/common.js\");\n/* harmony import */ var _promise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../promise */ \"./node_modules/threads/dist-esm/promise.js\");\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist-esm/symbols.js\");\n/* harmony import */ var _types_master__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/master */ \"./node_modules/threads/dist-esm/types/master.js\");\n/* harmony import */ var _invocation_proxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invocation-proxy */ \"./node_modules/threads/dist-esm/master/invocation-proxy.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst debugMessages = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"threads:master:messages\");\nconst debugSpawn = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"threads:master:spawn\");\nconst debugThreadUtils = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"threads:master:thread-utils\");\nconst isInitMessage = (data) => data && data.type === \"init\";\nconst isUncaughtErrorMessage = (data) => data && data.type === \"uncaughtError\";\nconst initMessageTimeout = typeof process !== \"undefined\" && process.env.THREADS_WORKER_INIT_TIMEOUT\n    ? Number.parseInt(process.env.THREADS_WORKER_INIT_TIMEOUT, 10)\n    : 10000;\nfunction withTimeout(promise, timeoutInMs, errorMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let timeoutHandle;\n        const timeout = new Promise((resolve, reject) => {\n            timeoutHandle = setTimeout(() => reject(Error(errorMessage)), timeoutInMs);\n        });\n        const result = yield Promise.race([\n            promise,\n            timeout\n        ]);\n        clearTimeout(timeoutHandle);\n        return result;\n    });\n}\nfunction receiveInitMessage(worker) {\n    return new Promise((resolve, reject) => {\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker before finishing initialization:\", event.data);\n            if (isInitMessage(event.data)) {\n                worker.removeEventListener(\"message\", messageHandler);\n                resolve(event.data);\n            }\n            else if (isUncaughtErrorMessage(event.data)) {\n                worker.removeEventListener(\"message\", messageHandler);\n                reject(Object(_common__WEBPACK_IMPORTED_MODULE_2__[\"deserialize\"])(event.data.error));\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n    });\n}\nfunction createEventObservable(worker, workerTermination) {\n    return new observable_fns__WEBPACK_IMPORTED_MODULE_1__[\"Observable\"](observer => {\n        const messageHandler = ((messageEvent) => {\n            const workerEvent = {\n                type: _types_master__WEBPACK_IMPORTED_MODULE_5__[\"WorkerEventType\"].message,\n                data: messageEvent.data\n            };\n            observer.next(workerEvent);\n        });\n        const rejectionHandler = ((errorEvent) => {\n            debugThreadUtils(\"Unhandled promise rejection event in thread:\", errorEvent);\n            const workerEvent = {\n                type: _types_master__WEBPACK_IMPORTED_MODULE_5__[\"WorkerEventType\"].internalError,\n                error: Error(errorEvent.reason)\n            };\n            observer.next(workerEvent);\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        worker.addEventListener(\"unhandledrejection\", rejectionHandler);\n        workerTermination.then(() => {\n            const terminationEvent = {\n                type: _types_master__WEBPACK_IMPORTED_MODULE_5__[\"WorkerEventType\"].termination\n            };\n            worker.removeEventListener(\"message\", messageHandler);\n            worker.removeEventListener(\"unhandledrejection\", rejectionHandler);\n            observer.next(terminationEvent);\n            observer.complete();\n        });\n    });\n}\nfunction createTerminator(worker) {\n    const [termination, resolver] = Object(_promise__WEBPACK_IMPORTED_MODULE_3__[\"createPromiseWithResolver\"])();\n    const terminate = () => __awaiter(this, void 0, void 0, function* () {\n        debugThreadUtils(\"Terminating worker\");\n        // Newer versions of worker_threads workers return a promise\n        yield worker.terminate();\n        resolver();\n    });\n    return { terminate, termination };\n}\nfunction setPrivateThreadProps(raw, worker, workerEvents, terminate) {\n    const workerErrors = workerEvents\n        .filter(event => event.type === _types_master__WEBPACK_IMPORTED_MODULE_5__[\"WorkerEventType\"].internalError)\n        .map(errorEvent => errorEvent.error);\n    // tslint:disable-next-line prefer-object-spread\n    return Object.assign(raw, {\n        [_symbols__WEBPACK_IMPORTED_MODULE_4__[\"$errors\"]]: workerErrors,\n        [_symbols__WEBPACK_IMPORTED_MODULE_4__[\"$events\"]]: workerEvents,\n        [_symbols__WEBPACK_IMPORTED_MODULE_4__[\"$terminate\"]]: terminate,\n        [_symbols__WEBPACK_IMPORTED_MODULE_4__[\"$worker\"]]: worker\n    });\n}\n/**\n * Spawn a new thread. Takes a fresh worker instance, wraps it in a thin\n * abstraction layer to provide the transparent API and verifies that\n * the worker has initialized successfully.\n *\n * @param worker Instance of `Worker`. Either a web worker, `worker_threads` worker or `tiny-worker` worker.\n * @param [options]\n * @param [options.timeout] Init message timeout. Default: 10000 or set by environment variable.\n */\nfunction spawn(worker, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        debugSpawn(\"Initializing new thread\");\n        const initMessage = yield withTimeout(receiveInitMessage(worker), options && options.timeout ? options.timeout : initMessageTimeout, `Timeout: Did not receive an init message from worker after ${initMessageTimeout}ms. Make sure the worker calls expose().`);\n        const exposed = initMessage.exposed;\n        const { termination, terminate } = createTerminator(worker);\n        const events = createEventObservable(worker, termination);\n        if (exposed.type === \"function\") {\n            const proxy = Object(_invocation_proxy__WEBPACK_IMPORTED_MODULE_6__[\"createProxyFunction\"])(worker);\n            return setPrivateThreadProps(proxy, worker, events, terminate);\n        }\n        else if (exposed.type === \"module\") {\n            const proxy = Object(_invocation_proxy__WEBPACK_IMPORTED_MODULE_6__[\"createProxyModule\"])(worker, exposed.methods);\n            return setPrivateThreadProps(proxy, worker, events, terminate);\n        }\n        else {\n            const type = exposed.type;\n            throw Error(`Worker init message states unexpected type of expose(): ${type}`);\n        }\n    });\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/spawn.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/master/thread.js":
/*!********************************************************!*\
  !*** ./node_modules/threads/dist-esm/master/thread.js ***!
  \********************************************************/
/*! exports provided: Thread */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Thread\", function() { return Thread; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist-esm/symbols.js\");\n\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nconst Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[_symbols__WEBPACK_IMPORTED_MODULE_0__[\"$errors\"]] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[_symbols__WEBPACK_IMPORTED_MODULE_0__[\"$events\"]] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[_symbols__WEBPACK_IMPORTED_MODULE_0__[\"$terminate\"]]();\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/master/thread.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/observable-promise.js":
/*!*************************************************************!*\
  !*** ./node_modules/threads/dist-esm/observable-promise.js ***!
  \*************************************************************/
/*! exports provided: ObservablePromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObservablePromise\", function() { return ObservablePromise; });\n/* harmony import */ var observable_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\n\nconst doNothing = () => undefined;\nconst returnInput = (input) => input;\nconst runDeferred = (fn) => Promise.resolve().then(fn);\nfunction fail(error) {\n    throw error;\n}\nfunction isThenable(thing) {\n    return thing && typeof thing.then === \"function\";\n}\n/**\n * Creates a hybrid, combining the APIs of an Observable and a Promise.\n *\n * It is used to proxy async process states when we are initially not sure\n * if that async process will yield values once (-> Promise) or multiple\n * times (-> Observable).\n *\n * Note that the observable promise inherits some of the observable's characteristics:\n * The `init` function will be called *once for every time anyone subscribes to it*.\n *\n * If this is undesired, derive a hot observable from it using `makeHot()` and\n * subscribe to that.\n */\nclass ObservablePromise extends observable_fns__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"] {\n    constructor(init) {\n        super(originalObserver => {\n            // tslint:disable-next-line no-this-assignment\n            const self = this;\n            const observer = Object.assign(Object.assign({}, originalObserver), { complete() {\n                    originalObserver.complete();\n                    self.onCompletion();\n                },\n                error(error) {\n                    originalObserver.error(error);\n                    self.onError(error);\n                },\n                next(value) {\n                    originalObserver.next(value);\n                    self.onNext(value);\n                } });\n            try {\n                this.initHasRun = true;\n                return init(observer);\n            }\n            catch (error) {\n                observer.error(error);\n            }\n        });\n        this.initHasRun = false;\n        this.fulfillmentCallbacks = [];\n        this.rejectionCallbacks = [];\n        this.firstValueSet = false;\n        this.state = \"pending\";\n    }\n    onNext(value) {\n        if (!this.firstValueSet) {\n            this.firstValue = value;\n            this.firstValueSet = true;\n        }\n    }\n    onError(error) {\n        this.state = \"rejected\";\n        this.rejection = error;\n        for (const onRejected of this.rejectionCallbacks) {\n            // Promisifying the call to turn errors into unhandled promise rejections\n            // instead of them failing sync and cancelling the iteration\n            runDeferred(() => onRejected(error));\n        }\n    }\n    onCompletion() {\n        this.state = \"fulfilled\";\n        for (const onFulfilled of this.fulfillmentCallbacks) {\n            // Promisifying the call to turn errors into unhandled promise rejections\n            // instead of them failing sync and cancelling the iteration\n            runDeferred(() => onFulfilled(this.firstValue));\n        }\n    }\n    then(onFulfilledRaw, onRejectedRaw) {\n        const onFulfilled = onFulfilledRaw || returnInput;\n        const onRejected = onRejectedRaw || fail;\n        let onRejectedCalled = false;\n        return new Promise((resolve, reject) => {\n            const rejectionCallback = (error) => {\n                if (onRejectedCalled)\n                    return;\n                onRejectedCalled = true;\n                try {\n                    resolve(onRejected(error));\n                }\n                catch (anotherError) {\n                    reject(anotherError);\n                }\n            };\n            const fulfillmentCallback = (value) => {\n                try {\n                    resolve(onFulfilled(value));\n                }\n                catch (error) {\n                    rejectionCallback(error);\n                }\n            };\n            if (!this.initHasRun) {\n                this.subscribe({ error: rejectionCallback });\n            }\n            if (this.state === \"fulfilled\") {\n                return resolve(onFulfilled(this.firstValue));\n            }\n            if (this.state === \"rejected\") {\n                onRejectedCalled = true;\n                return resolve(onRejected(this.rejection));\n            }\n            this.fulfillmentCallbacks.push(fulfillmentCallback);\n            this.rejectionCallbacks.push(rejectionCallback);\n        });\n    }\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onCompleted) {\n        const handler = onCompleted || doNothing;\n        return this.then((value) => {\n            handler();\n            return value;\n        }, () => handler());\n    }\n    static from(thing) {\n        if (isThenable(thing)) {\n            return new ObservablePromise(observer => {\n                const onFulfilled = (value) => {\n                    observer.next(value);\n                    observer.complete();\n                };\n                const onRejected = (error) => {\n                    observer.error(error);\n                };\n                thing.then(onFulfilled, onRejected);\n            });\n        }\n        else {\n            return super.from(thing);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/observable-promise.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/ponyfills.js":
/*!****************************************************!*\
  !*** ./node_modules/threads/dist-esm/ponyfills.js ***!
  \****************************************************/
/*! exports provided: allSettled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"allSettled\", function() { return allSettled; });\n// Based on <https://github.com/es-shims/Promise.allSettled/blob/master/implementation.js>\nfunction allSettled(values) {\n    return Promise.all(values.map(item => {\n        const onFulfill = (value) => {\n            return { status: 'fulfilled', value };\n        };\n        const onReject = (reason) => {\n            return { status: 'rejected', reason };\n        };\n        const itemPromise = Promise.resolve(item);\n        try {\n            return itemPromise.then(onFulfill, onReject);\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }));\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/ponyfills.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/promise.js":
/*!**************************************************!*\
  !*** ./node_modules/threads/dist-esm/promise.js ***!
  \**************************************************/
/*! exports provided: createPromiseWithResolver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPromiseWithResolver\", function() { return createPromiseWithResolver; });\nconst doNothing = () => undefined;\n/**\n * Creates a new promise and exposes its resolver function.\n * Use with care!\n */\nfunction createPromiseWithResolver() {\n    let alreadyResolved = false;\n    let resolvedTo;\n    let resolver = doNothing;\n    const promise = new Promise(resolve => {\n        if (alreadyResolved) {\n            resolve(resolvedTo);\n        }\n        else {\n            resolver = resolve;\n        }\n    });\n    const exposedResolver = (value) => {\n        alreadyResolved = true;\n        resolvedTo = value;\n        resolver();\n    };\n    return [promise, exposedResolver];\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/promise.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/serializers.js":
/*!******************************************************!*\
  !*** ./node_modules/threads/dist-esm/serializers.js ***!
  \******************************************************/
/*! exports provided: extendSerializer, DefaultSerializer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extendSerializer\", function() { return extendSerializer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultSerializer\", function() { return DefaultSerializer; });\nfunction extendSerializer(extend, implementation) {\n    const fallbackDeserializer = extend.deserialize.bind(extend);\n    const fallbackSerializer = extend.serialize.bind(extend);\n    return {\n        deserialize(message) {\n            return implementation.deserialize(message, fallbackDeserializer);\n        },\n        serialize(input) {\n            return implementation.serialize(input, fallbackSerializer);\n        }\n    };\n}\nconst DefaultErrorSerializer = {\n    deserialize(message) {\n        return Object.assign(Error(message.message), {\n            name: message.name,\n            stack: message.stack\n        });\n    },\n    serialize(error) {\n        return {\n            __error_marker: \"$$error\",\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        };\n    }\n};\nconst isSerializedError = (thing) => thing && typeof thing === \"object\" && \"__error_marker\" in thing && thing.__error_marker === \"$$error\";\nconst DefaultSerializer = {\n    deserialize(message) {\n        if (isSerializedError(message)) {\n            return DefaultErrorSerializer.deserialize(message);\n        }\n        else {\n            return message;\n        }\n    },\n    serialize(input) {\n        if (input instanceof Error) {\n            return DefaultErrorSerializer.serialize(input);\n        }\n        else {\n            return input;\n        }\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/serializers.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/symbols.js":
/*!**************************************************!*\
  !*** ./node_modules/threads/dist-esm/symbols.js ***!
  \**************************************************/
/*! exports provided: $errors, $events, $terminate, $transferable, $worker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$errors\", function() { return $errors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$events\", function() { return $events; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$terminate\", function() { return $terminate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$transferable\", function() { return $transferable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$worker\", function() { return $worker; });\nconst $errors = Symbol(\"thread.errors\");\nconst $events = Symbol(\"thread.events\");\nconst $terminate = Symbol(\"thread.terminate\");\nconst $transferable = Symbol(\"thread.transferable\");\nconst $worker = Symbol(\"thread.worker\");\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/symbols.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/transferable.js":
/*!*******************************************************!*\
  !*** ./node_modules/threads/dist-esm/transferable.js ***!
  \*******************************************************/
/*! exports provided: isTransferDescriptor, Transfer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isTransferDescriptor\", function() { return isTransferDescriptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Transfer\", function() { return Transfer; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./symbols */ \"./node_modules/threads/dist-esm/symbols.js\");\n\nfunction isTransferable(thing) {\n    if (!thing || typeof thing !== \"object\")\n        return false;\n    // Don't check too thoroughly, since the list of transferable things in JS might grow over time\n    return true;\n}\nfunction isTransferDescriptor(thing) {\n    return thing && typeof thing === \"object\" && thing[_symbols__WEBPACK_IMPORTED_MODULE_0__[\"$transferable\"]];\n}\nfunction Transfer(payload, transferables) {\n    if (!transferables) {\n        if (!isTransferable(payload))\n            throw Error();\n        transferables = [payload];\n    }\n    return {\n        [_symbols__WEBPACK_IMPORTED_MODULE_0__[\"$transferable\"]]: true,\n        send: payload,\n        transferables\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/transferable.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/types/master.js":
/*!*******************************************************!*\
  !*** ./node_modules/threads/dist-esm/types/master.js ***!
  \*******************************************************/
/*! exports provided: WorkerEventType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkerEventType\", function() { return WorkerEventType; });\n/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist-esm/symbols.js\");\n/// <reference lib=\"dom\" />\n\n/** Event as emitted by worker thread. Subscribe to using `Thread.events(thread)`. */\nvar WorkerEventType;\n(function (WorkerEventType) {\n    WorkerEventType[\"internalError\"] = \"internalError\";\n    WorkerEventType[\"message\"] = \"message\";\n    WorkerEventType[\"termination\"] = \"termination\";\n})(WorkerEventType || (WorkerEventType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/types/master.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/types/messages.js":
/*!*********************************************************!*\
  !*** ./node_modules/threads/dist-esm/types/messages.js ***!
  \*********************************************************/
/*! exports provided: MasterMessageType, WorkerMessageType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MasterMessageType\", function() { return MasterMessageType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkerMessageType\", function() { return WorkerMessageType; });\n/////////////////////////////\n// Messages sent by master:\nvar MasterMessageType;\n(function (MasterMessageType) {\n    MasterMessageType[\"run\"] = \"run\";\n})(MasterMessageType || (MasterMessageType = {}));\n////////////////////////////\n// Messages sent by worker:\nvar WorkerMessageType;\n(function (WorkerMessageType) {\n    WorkerMessageType[\"error\"] = \"error\";\n    WorkerMessageType[\"init\"] = \"init\";\n    WorkerMessageType[\"result\"] = \"result\";\n    WorkerMessageType[\"running\"] = \"running\";\n    WorkerMessageType[\"uncaughtError\"] = \"uncaughtError\";\n})(WorkerMessageType || (WorkerMessageType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/types/messages.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/worker/implementation.browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/threads/dist-esm/worker/implementation.browser.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nconst isWorkerRuntime = function isWorkerRuntime() {\n    return typeof self !== \"undefined\" && self.postMessage ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n});\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/worker/implementation.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist-esm/worker/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/threads/dist-esm/worker/index.js ***!
  \*******************************************************/
/*! exports provided: registerSerializer, Transfer, expose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expose\", function() { return expose; });\n/* harmony import */ var is_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-observable */ \"./node_modules/is-observable/index.js\");\n/* harmony import */ var is_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(is_observable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist-esm/common.js\");\n/* harmony import */ var _transferable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transferable */ \"./node_modules/threads/dist-esm/transferable.js\");\n/* harmony import */ var _types_messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/messages */ \"./node_modules/threads/dist-esm/types/messages.js\");\n/* harmony import */ var _implementation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist-esm/worker/implementation.browser.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"registerSerializer\", function() { return _common__WEBPACK_IMPORTED_MODULE_1__[\"registerSerializer\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Transfer\", function() { return _transferable__WEBPACK_IMPORTED_MODULE_2__[\"Transfer\"]; });\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nlet exposeCalled = false;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"MasterMessageType\"].run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable__WEBPACK_IMPORTED_MODULE_0___default()(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return Object(_transferable__WEBPACK_IMPORTED_MODULE_2__[\"isTransferDescriptor\"])(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].error,\n        uid,\n        error: Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(error)\n    };\n    _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].running,\n        uid,\n        resultType\n    };\n    _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: _types_messages__WEBPACK_IMPORTED_MODULE_3__[\"WorkerMessageType\"].uncaughtError,\n            error: Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(error)\n        };\n        _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            syncResult.subscribe(value => postJobResultMessage(jobUID, false, Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(value)), error => postJobErrorMessage(jobUID, Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(error)), () => postJobResultMessage(jobUID, true));\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"serialize\"])(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!_implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(_common__WEBPACK_IMPORTED_MODULE_1__[\"deserialize\"]));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(_common__WEBPACK_IMPORTED_MODULE_1__[\"deserialize\"]));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n}\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && _implementation__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/threads/dist-esm/worker/index.js?");

/***/ }),

/***/ "./node_modules/threads/dist/common.js":
/*!*********************************************!*\
  !*** ./node_modules/threads/dist/common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serializers_1 = __webpack_require__(/*! ./serializers */ \"./node_modules/threads/dist/serializers.js\");\nlet registeredSerializer = serializers_1.DefaultSerializer;\nfunction registerSerializer(serializer) {\n    registeredSerializer = serializers_1.extendSerializer(registeredSerializer, serializer);\n}\nexports.registerSerializer = registerSerializer;\nfunction deserialize(message) {\n    return registeredSerializer.deserialize(message);\n}\nexports.deserialize = deserialize;\nfunction serialize(input) {\n    return registeredSerializer.serialize(input);\n}\nexports.serialize = serialize;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/common.js?");

/***/ }),

/***/ "./node_modules/threads/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/threads/dist/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __webpack_require__(/*! ./common */ \"./node_modules/threads/dist/common.js\");\nexports.registerSerializer = common_1.registerSerializer;\n__export(__webpack_require__(/*! ./master/index */ \"./node_modules/threads/dist/master/index.js\"));\nvar index_1 = __webpack_require__(/*! ./worker/index */ \"./node_modules/threads/dist/worker/index.js\");\nexports.expose = index_1.expose;\nvar serializers_1 = __webpack_require__(/*! ./serializers */ \"./node_modules/threads/dist/serializers.js\");\nexports.DefaultSerializer = serializers_1.DefaultSerializer;\nvar transferable_1 = __webpack_require__(/*! ./transferable */ \"./node_modules/threads/dist/transferable.js\");\nexports.Transfer = transferable_1.Transfer;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/index.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/get-bundle-url.browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/threads/dist/master/get-bundle-url.browser.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// Source: <https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/builtins/bundle-url.js>\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet bundleURL;\nfunction getBundleURLCached() {\n    if (!bundleURL) {\n        bundleURL = getBundleURL();\n    }\n    return bundleURL;\n}\nexports.getBundleURL = getBundleURLCached;\nfunction getBundleURL() {\n    // Attempt to find the URL of the current script and use that as the base URL\n    try {\n        throw new Error;\n    }\n    catch (err) {\n        const matches = (\"\" + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n        if (matches) {\n            return getBaseURL(matches[0]);\n        }\n    }\n    return \"/\";\n}\nfunction getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\nexports.getBaseURL = getBaseURL;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/get-bundle-url.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/implementation.browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/threads/dist/master/implementation.browser.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// tslint:disable max-classes-per-file\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst get_bundle_url_browser_1 = __webpack_require__(/*! ./get-bundle-url.browser */ \"./node_modules/threads/dist/master/get-bundle-url.browser.js\");\nexports.defaultPoolSize = typeof navigator !== \"undefined\" && navigator.hardwareConcurrency\n    ? navigator.hardwareConcurrency\n    : 4;\nconst isAbsoluteURL = (value) => /^(file|https?:)?\\/\\//i.test(value);\nfunction createSourceBlobURL(code) {\n    const blob = new Blob([code], { type: \"application/javascript\" });\n    return URL.createObjectURL(blob);\n}\nfunction selectWorkerImplementation() {\n    if (typeof Worker === \"undefined\") {\n        // Might happen on Safari, for instance\n        // The idea is to only fail if the constructor is actually used\n        return class NoWebWorker {\n            constructor() {\n                throw Error(\"No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.\");\n            }\n        };\n    }\n    return class WebWorker extends Worker {\n        constructor(url, options) {\n            if (typeof url === \"string\" && options && options._baseURL) {\n                url = new URL(url, options._baseURL);\n            }\n            else if (typeof url === \"string\" && !isAbsoluteURL(url) && get_bundle_url_browser_1.getBundleURL().match(/^file:\\/\\//i)) {\n                url = new URL(url, get_bundle_url_browser_1.getBundleURL().replace(/\\/[^\\/]+$/, \"/\"));\n                url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n            }\n            if (typeof url === \"string\" && isAbsoluteURL(url)) {\n                // Create source code blob loading JS file via `importScripts()`\n                // to circumvent worker CORS restrictions\n                url = createSourceBlobURL(`importScripts(${JSON.stringify(url)});`);\n            }\n            super(url, options);\n        }\n    };\n}\nexports.selectWorkerImplementation = selectWorkerImplementation;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/implementation.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/index.js":
/*!***************************************************!*\
  !*** ./node_modules/threads/dist/master/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst implementation_1 = __webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist/master/implementation.browser.js\");\nvar pool_1 = __webpack_require__(/*! ./pool */ \"./node_modules/threads/dist/master/pool.js\");\nexports.Pool = pool_1.Pool;\nvar spawn_1 = __webpack_require__(/*! ./spawn */ \"./node_modules/threads/dist/master/spawn.js\");\nexports.spawn = spawn_1.spawn;\nvar thread_1 = __webpack_require__(/*! ./thread */ \"./node_modules/threads/dist/master/thread.js\");\nexports.Thread = thread_1.Thread;\n/** Worker implementation. Either web worker or a node.js Worker class. */\nexports.Worker = implementation_1.selectWorkerImplementation();\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/index.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/invocation-proxy.js":
/*!**************************************************************!*\
  !*** ./node_modules/threads/dist/master/invocation-proxy.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize more…\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\"));\nconst observable_fns_1 = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist/common.js\");\nconst observable_promise_1 = __webpack_require__(/*! ../observable-promise */ \"./node_modules/threads/dist/observable-promise.js\");\nconst transferable_1 = __webpack_require__(/*! ../transferable */ \"./node_modules/threads/dist/transferable.js\");\nconst messages_1 = __webpack_require__(/*! ../types/messages */ \"./node_modules/threads/dist/types/messages.js\");\nconst debugMessages = debug_1.default(\"threads:master:messages\");\nlet nextJobUID = 1;\nconst dedupe = (array) => Array.from(new Set(array));\nconst isJobErrorMessage = (data) => data && data.type === messages_1.WorkerMessageType.error;\nconst isJobResultMessage = (data) => data && data.type === messages_1.WorkerMessageType.result;\nconst isJobStartMessage = (data) => data && data.type === messages_1.WorkerMessageType.running;\nfunction createObservableForJob(worker, jobUID) {\n    return new observable_fns_1.Observable(observer => {\n        let asyncType;\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker:\", event.data);\n            if (!event.data || event.data.uid !== jobUID)\n                return;\n            if (isJobStartMessage(event.data)) {\n                asyncType = event.data.resultType;\n            }\n            else if (isJobResultMessage(event.data)) {\n                if (asyncType === \"promise\") {\n                    if (typeof event.data.payload !== \"undefined\") {\n                        observer.next(common_1.deserialize(event.data.payload));\n                    }\n                    observer.complete();\n                    worker.removeEventListener(\"message\", messageHandler);\n                }\n                else {\n                    if (event.data.payload) {\n                        observer.next(common_1.deserialize(event.data.payload));\n                    }\n                    if (event.data.complete) {\n                        observer.complete();\n                        worker.removeEventListener(\"message\", messageHandler);\n                    }\n                }\n            }\n            else if (isJobErrorMessage(event.data)) {\n                const error = common_1.deserialize(event.data.error);\n                if (asyncType === \"promise\" || !asyncType) {\n                    observer.error(error);\n                }\n                else {\n                    observer.error(error);\n                }\n                worker.removeEventListener(\"message\", messageHandler);\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        return () => worker.removeEventListener(\"message\", messageHandler);\n    });\n}\nfunction prepareArguments(rawArgs) {\n    if (rawArgs.length === 0) {\n        // Exit early if possible\n        return {\n            args: [],\n            transferables: []\n        };\n    }\n    const args = [];\n    const transferables = [];\n    for (const arg of rawArgs) {\n        if (transferable_1.isTransferDescriptor(arg)) {\n            args.push(common_1.serialize(arg.send));\n            transferables.push(...arg.transferables);\n        }\n        else {\n            args.push(common_1.serialize(arg));\n        }\n    }\n    return {\n        args,\n        transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n    };\n}\nfunction createProxyFunction(worker, method) {\n    return ((...rawArgs) => {\n        const uid = nextJobUID++;\n        const { args, transferables } = prepareArguments(rawArgs);\n        const runMessage = {\n            type: messages_1.MasterMessageType.run,\n            uid,\n            method,\n            args\n        };\n        debugMessages(\"Sending command to run function to worker:\", runMessage);\n        try {\n            worker.postMessage(runMessage, transferables);\n        }\n        catch (error) {\n            return observable_promise_1.ObservablePromise.from(Promise.reject(error));\n        }\n        return observable_promise_1.ObservablePromise.from(observable_fns_1.multicast(createObservableForJob(worker, uid)));\n    });\n}\nexports.createProxyFunction = createProxyFunction;\nfunction createProxyModule(worker, methodNames) {\n    const proxy = {};\n    for (const methodName of methodNames) {\n        proxy[methodName] = createProxyFunction(worker, methodName);\n    }\n    return proxy;\n}\nexports.createProxyModule = createProxyModule;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/invocation-proxy.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/pool-types.js":
/*!********************************************************!*\
  !*** ./node_modules/threads/dist/master/pool-types.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Pool event type. Specifies the type of each `PoolEvent`. */\nvar PoolEventType;\n(function (PoolEventType) {\n    PoolEventType[\"initialized\"] = \"initialized\";\n    PoolEventType[\"taskCanceled\"] = \"taskCanceled\";\n    PoolEventType[\"taskCompleted\"] = \"taskCompleted\";\n    PoolEventType[\"taskFailed\"] = \"taskFailed\";\n    PoolEventType[\"taskQueued\"] = \"taskQueued\";\n    PoolEventType[\"taskQueueDrained\"] = \"taskQueueDrained\";\n    PoolEventType[\"taskStart\"] = \"taskStart\";\n    PoolEventType[\"terminated\"] = \"terminated\";\n})(PoolEventType = exports.PoolEventType || (exports.PoolEventType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/pool-types.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/pool.js":
/*!**************************************************!*\
  !*** ./node_modules/threads/dist/master/pool.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\"));\nconst observable_fns_1 = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\nconst ponyfills_1 = __webpack_require__(/*! ../ponyfills */ \"./node_modules/threads/dist/ponyfills.js\");\nconst implementation_1 = __webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist/master/implementation.browser.js\");\nconst pool_types_1 = __webpack_require__(/*! ./pool-types */ \"./node_modules/threads/dist/master/pool-types.js\");\nexports.PoolEventType = pool_types_1.PoolEventType;\nconst thread_1 = __webpack_require__(/*! ./thread */ \"./node_modules/threads/dist/master/thread.js\");\nexports.Thread = thread_1.Thread;\nlet nextPoolID = 1;\nfunction createArray(size) {\n    const array = [];\n    for (let index = 0; index < size; index++) {\n        array.push(index);\n    }\n    return array;\n}\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction flatMap(array, mapper) {\n    return array.reduce((flattened, element) => [...flattened, ...mapper(element)], []);\n}\nfunction slugify(text) {\n    return text.replace(/\\W/g, \" \").trim().replace(/\\s+/g, \"-\");\n}\nfunction spawnWorkers(spawnWorker, count) {\n    return createArray(count).map(() => ({\n        init: spawnWorker(),\n        runningTasks: []\n    }));\n}\nclass WorkerPool {\n    constructor(spawnWorker, optionsOrSize) {\n        this.eventSubject = new observable_fns_1.Subject();\n        this.initErrors = [];\n        this.isClosing = false;\n        this.nextTaskID = 1;\n        this.taskQueue = [];\n        const options = typeof optionsOrSize === \"number\"\n            ? { size: optionsOrSize }\n            : optionsOrSize || {};\n        const { size = implementation_1.defaultPoolSize } = options;\n        this.debug = debug_1.default(`threads:pool:${slugify(options.name || String(nextPoolID++))}`);\n        this.options = options;\n        this.workers = spawnWorkers(spawnWorker, size);\n        this.eventObservable = observable_fns_1.multicast(observable_fns_1.Observable.from(this.eventSubject));\n        Promise.all(this.workers.map(worker => worker.init)).then(() => this.eventSubject.next({\n            type: pool_types_1.PoolEventType.initialized,\n            size: this.workers.length\n        }), error => {\n            this.debug(\"Error while initializing pool worker:\", error);\n            this.eventSubject.error(error);\n            this.initErrors.push(error);\n        });\n    }\n    findIdlingWorker() {\n        const { concurrency = 1 } = this.options;\n        return this.workers.find(worker => worker.runningTasks.length < concurrency);\n    }\n    runPoolTask(worker, task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const workerID = this.workers.indexOf(worker) + 1;\n            this.debug(`Running task #${task.id} on worker #${workerID}...`);\n            this.eventSubject.next({\n                type: pool_types_1.PoolEventType.taskStart,\n                taskID: task.id,\n                workerID\n            });\n            try {\n                const returnValue = yield task.run(yield worker.init);\n                this.debug(`Task #${task.id} completed successfully`);\n                this.eventSubject.next({\n                    type: pool_types_1.PoolEventType.taskCompleted,\n                    returnValue,\n                    taskID: task.id,\n                    workerID\n                });\n            }\n            catch (error) {\n                this.debug(`Task #${task.id} failed`);\n                this.eventSubject.next({\n                    type: pool_types_1.PoolEventType.taskFailed,\n                    taskID: task.id,\n                    error,\n                    workerID\n                });\n            }\n        });\n    }\n    run(worker, task) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const runPromise = (() => __awaiter(this, void 0, void 0, function* () {\n                const removeTaskFromWorkersRunningTasks = () => {\n                    worker.runningTasks = worker.runningTasks.filter(someRunPromise => someRunPromise !== runPromise);\n                };\n                // Defer task execution by one tick to give handlers time to subscribe\n                yield delay(0);\n                try {\n                    yield this.runPoolTask(worker, task);\n                }\n                finally {\n                    removeTaskFromWorkersRunningTasks();\n                    if (!this.isClosing) {\n                        this.scheduleWork();\n                    }\n                }\n            }))();\n            worker.runningTasks.push(runPromise);\n        });\n    }\n    scheduleWork() {\n        this.debug(`Attempt de-queueing a task in order to run it...`);\n        const availableWorker = this.findIdlingWorker();\n        if (!availableWorker)\n            return;\n        const nextTask = this.taskQueue.shift();\n        if (!nextTask) {\n            this.debug(`Task queue is empty`);\n            this.eventSubject.next({ type: pool_types_1.PoolEventType.taskQueueDrained });\n            return;\n        }\n        this.run(availableWorker, nextTask);\n    }\n    taskCompletion(taskID) {\n        return new Promise((resolve, reject) => {\n            const eventSubscription = this.events().subscribe(event => {\n                if (event.type === pool_types_1.PoolEventType.taskCompleted && event.taskID === taskID) {\n                    eventSubscription.unsubscribe();\n                    resolve(event.returnValue);\n                }\n                else if (event.type === pool_types_1.PoolEventType.taskFailed && event.taskID === taskID) {\n                    eventSubscription.unsubscribe();\n                    reject(event.error);\n                }\n                else if (event.type === pool_types_1.PoolEventType.terminated) {\n                    eventSubscription.unsubscribe();\n                    reject(Error(\"Pool has been terminated before task was run.\"));\n                }\n            });\n        });\n    }\n    settled(allowResolvingImmediately = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const getCurrentlyRunningTasks = () => flatMap(this.workers, worker => worker.runningTasks);\n            const taskFailures = [];\n            const failureSubscription = this.eventObservable.subscribe(event => {\n                if (event.type === pool_types_1.PoolEventType.taskFailed) {\n                    taskFailures.push(event.error);\n                }\n            });\n            if (this.initErrors.length > 0) {\n                return Promise.reject(this.initErrors[0]);\n            }\n            if (allowResolvingImmediately && this.taskQueue.length === 0) {\n                yield ponyfills_1.allSettled(getCurrentlyRunningTasks());\n                return taskFailures;\n            }\n            yield new Promise((resolve, reject) => {\n                const subscription = this.eventObservable.subscribe({\n                    next(event) {\n                        if (event.type === pool_types_1.PoolEventType.taskQueueDrained) {\n                            subscription.unsubscribe();\n                            resolve();\n                        }\n                    },\n                    error: reject // make a pool-wide error reject the completed() result promise\n                });\n            });\n            yield ponyfills_1.allSettled(getCurrentlyRunningTasks());\n            failureSubscription.unsubscribe();\n            return taskFailures;\n        });\n    }\n    completed(allowResolvingImmediately = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const settlementPromise = this.settled(allowResolvingImmediately);\n            const earlyExitPromise = new Promise((resolve, reject) => {\n                const subscription = this.eventObservable.subscribe({\n                    next(event) {\n                        if (event.type === pool_types_1.PoolEventType.taskQueueDrained) {\n                            subscription.unsubscribe();\n                            resolve(settlementPromise);\n                        }\n                        else if (event.type === pool_types_1.PoolEventType.taskFailed) {\n                            subscription.unsubscribe();\n                            reject(event.error);\n                        }\n                    },\n                    error: reject // make a pool-wide error reject the completed() result promise\n                });\n            });\n            const errors = yield Promise.race([\n                settlementPromise,\n                earlyExitPromise\n            ]);\n            if (errors.length > 0) {\n                throw errors[0];\n            }\n        });\n    }\n    events() {\n        return this.eventObservable;\n    }\n    queue(taskFunction) {\n        const { maxQueuedJobs = Infinity } = this.options;\n        if (this.isClosing) {\n            throw Error(`Cannot schedule pool tasks after terminate() has been called.`);\n        }\n        if (this.initErrors.length > 0) {\n            throw this.initErrors[0];\n        }\n        const taskCompleted = () => this.taskCompletion(task.id);\n        let taskCompletionDotThen;\n        const task = {\n            id: this.nextTaskID++,\n            run: taskFunction,\n            cancel: () => {\n                if (this.taskQueue.indexOf(task) === -1)\n                    return;\n                this.taskQueue = this.taskQueue.filter(someTask => someTask !== task);\n                this.eventSubject.next({\n                    type: pool_types_1.PoolEventType.taskCanceled,\n                    taskID: task.id\n                });\n            },\n            get then() {\n                if (!taskCompletionDotThen) {\n                    const promise = taskCompleted();\n                    taskCompletionDotThen = promise.then.bind(promise);\n                }\n                return taskCompletionDotThen;\n            }\n        };\n        if (this.taskQueue.length >= maxQueuedJobs) {\n            throw Error(\"Maximum number of pool tasks queued. Refusing to queue another one.\\n\" +\n                \"This usually happens for one of two reasons: We are either at peak \" +\n                \"workload right now or some tasks just won't finish, thus blocking the pool.\");\n        }\n        this.debug(`Queueing task #${task.id}...`);\n        this.taskQueue.push(task);\n        this.eventSubject.next({\n            type: pool_types_1.PoolEventType.taskQueued,\n            taskID: task.id\n        });\n        this.scheduleWork();\n        return task;\n    }\n    terminate(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.isClosing = true;\n            if (!force) {\n                yield this.completed(true);\n            }\n            this.eventSubject.next({\n                type: pool_types_1.PoolEventType.terminated,\n                remainingQueue: [...this.taskQueue]\n            });\n            this.eventSubject.complete();\n            yield Promise.all(this.workers.map((worker) => __awaiter(this, void 0, void 0, function* () { return thread_1.Thread.terminate(yield worker.init); })));\n        });\n    }\n}\nWorkerPool.EventType = pool_types_1.PoolEventType;\n/**\n * Thread pool constructor. Creates a new pool and spawns its worker threads.\n */\nfunction PoolConstructor(spawnWorker, optionsOrSize) {\n    // The function exists only so we don't need to use `new` to create a pool (we still can, though).\n    // If the Pool is a class or not is an implementation detail that should not concern the user.\n    return new WorkerPool(spawnWorker, optionsOrSize);\n}\nPoolConstructor.EventType = pool_types_1.PoolEventType;\n/**\n * Thread pool constructor. Creates a new pool and spawns its worker threads.\n */\nexports.Pool = PoolConstructor;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/pool.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/spawn.js":
/*!***************************************************!*\
  !*** ./node_modules/threads/dist/master/spawn.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/threads/node_modules/debug/src/browser.js\"));\nconst observable_fns_1 = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\nconst common_1 = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist/common.js\");\nconst promise_1 = __webpack_require__(/*! ../promise */ \"./node_modules/threads/dist/promise.js\");\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist/symbols.js\");\nconst master_1 = __webpack_require__(/*! ../types/master */ \"./node_modules/threads/dist/types/master.js\");\nconst invocation_proxy_1 = __webpack_require__(/*! ./invocation-proxy */ \"./node_modules/threads/dist/master/invocation-proxy.js\");\nconst debugMessages = debug_1.default(\"threads:master:messages\");\nconst debugSpawn = debug_1.default(\"threads:master:spawn\");\nconst debugThreadUtils = debug_1.default(\"threads:master:thread-utils\");\nconst isInitMessage = (data) => data && data.type === \"init\";\nconst isUncaughtErrorMessage = (data) => data && data.type === \"uncaughtError\";\nconst initMessageTimeout = typeof process !== \"undefined\" && process.env.THREADS_WORKER_INIT_TIMEOUT\n    ? Number.parseInt(process.env.THREADS_WORKER_INIT_TIMEOUT, 10)\n    : 10000;\nfunction withTimeout(promise, timeoutInMs, errorMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let timeoutHandle;\n        const timeout = new Promise((resolve, reject) => {\n            timeoutHandle = setTimeout(() => reject(Error(errorMessage)), timeoutInMs);\n        });\n        const result = yield Promise.race([\n            promise,\n            timeout\n        ]);\n        clearTimeout(timeoutHandle);\n        return result;\n    });\n}\nfunction receiveInitMessage(worker) {\n    return new Promise((resolve, reject) => {\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker before finishing initialization:\", event.data);\n            if (isInitMessage(event.data)) {\n                worker.removeEventListener(\"message\", messageHandler);\n                resolve(event.data);\n            }\n            else if (isUncaughtErrorMessage(event.data)) {\n                worker.removeEventListener(\"message\", messageHandler);\n                reject(common_1.deserialize(event.data.error));\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n    });\n}\nfunction createEventObservable(worker, workerTermination) {\n    return new observable_fns_1.Observable(observer => {\n        const messageHandler = ((messageEvent) => {\n            const workerEvent = {\n                type: master_1.WorkerEventType.message,\n                data: messageEvent.data\n            };\n            observer.next(workerEvent);\n        });\n        const rejectionHandler = ((errorEvent) => {\n            debugThreadUtils(\"Unhandled promise rejection event in thread:\", errorEvent);\n            const workerEvent = {\n                type: master_1.WorkerEventType.internalError,\n                error: Error(errorEvent.reason)\n            };\n            observer.next(workerEvent);\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        worker.addEventListener(\"unhandledrejection\", rejectionHandler);\n        workerTermination.then(() => {\n            const terminationEvent = {\n                type: master_1.WorkerEventType.termination\n            };\n            worker.removeEventListener(\"message\", messageHandler);\n            worker.removeEventListener(\"unhandledrejection\", rejectionHandler);\n            observer.next(terminationEvent);\n            observer.complete();\n        });\n    });\n}\nfunction createTerminator(worker) {\n    const [termination, resolver] = promise_1.createPromiseWithResolver();\n    const terminate = () => __awaiter(this, void 0, void 0, function* () {\n        debugThreadUtils(\"Terminating worker\");\n        // Newer versions of worker_threads workers return a promise\n        yield worker.terminate();\n        resolver();\n    });\n    return { terminate, termination };\n}\nfunction setPrivateThreadProps(raw, worker, workerEvents, terminate) {\n    const workerErrors = workerEvents\n        .filter(event => event.type === master_1.WorkerEventType.internalError)\n        .map(errorEvent => errorEvent.error);\n    // tslint:disable-next-line prefer-object-spread\n    return Object.assign(raw, {\n        [symbols_1.$errors]: workerErrors,\n        [symbols_1.$events]: workerEvents,\n        [symbols_1.$terminate]: terminate,\n        [symbols_1.$worker]: worker\n    });\n}\n/**\n * Spawn a new thread. Takes a fresh worker instance, wraps it in a thin\n * abstraction layer to provide the transparent API and verifies that\n * the worker has initialized successfully.\n *\n * @param worker Instance of `Worker`. Either a web worker, `worker_threads` worker or `tiny-worker` worker.\n * @param [options]\n * @param [options.timeout] Init message timeout. Default: 10000 or set by environment variable.\n */\nfunction spawn(worker, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        debugSpawn(\"Initializing new thread\");\n        const initMessage = yield withTimeout(receiveInitMessage(worker), options && options.timeout ? options.timeout : initMessageTimeout, `Timeout: Did not receive an init message from worker after ${initMessageTimeout}ms. Make sure the worker calls expose().`);\n        const exposed = initMessage.exposed;\n        const { termination, terminate } = createTerminator(worker);\n        const events = createEventObservable(worker, termination);\n        if (exposed.type === \"function\") {\n            const proxy = invocation_proxy_1.createProxyFunction(worker);\n            return setPrivateThreadProps(proxy, worker, events, terminate);\n        }\n        else if (exposed.type === \"module\") {\n            const proxy = invocation_proxy_1.createProxyModule(worker, exposed.methods);\n            return setPrivateThreadProps(proxy, worker, events, terminate);\n        }\n        else {\n            const type = exposed.type;\n            throw Error(`Worker init message states unexpected type of expose(): ${type}`);\n        }\n    });\n}\nexports.spawn = spawn;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/spawn.js?");

/***/ }),

/***/ "./node_modules/threads/dist/master/thread.js":
/*!****************************************************!*\
  !*** ./node_modules/threads/dist/master/thread.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist/symbols.js\");\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexports.Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[symbols_1.$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[symbols_1.$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[symbols_1.$terminate]();\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/master/thread.js?");

/***/ }),

/***/ "./node_modules/threads/dist/observable-promise.js":
/*!*********************************************************!*\
  !*** ./node_modules/threads/dist/observable-promise.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst observable_fns_1 = __webpack_require__(/*! observable-fns */ \"./node_modules/observable-fns/dist.esm/index.js\");\nconst doNothing = () => undefined;\nconst returnInput = (input) => input;\nconst runDeferred = (fn) => Promise.resolve().then(fn);\nfunction fail(error) {\n    throw error;\n}\nfunction isThenable(thing) {\n    return thing && typeof thing.then === \"function\";\n}\n/**\n * Creates a hybrid, combining the APIs of an Observable and a Promise.\n *\n * It is used to proxy async process states when we are initially not sure\n * if that async process will yield values once (-> Promise) or multiple\n * times (-> Observable).\n *\n * Note that the observable promise inherits some of the observable's characteristics:\n * The `init` function will be called *once for every time anyone subscribes to it*.\n *\n * If this is undesired, derive a hot observable from it using `makeHot()` and\n * subscribe to that.\n */\nclass ObservablePromise extends observable_fns_1.Observable {\n    constructor(init) {\n        super(originalObserver => {\n            // tslint:disable-next-line no-this-assignment\n            const self = this;\n            const observer = Object.assign(Object.assign({}, originalObserver), { complete() {\n                    originalObserver.complete();\n                    self.onCompletion();\n                },\n                error(error) {\n                    originalObserver.error(error);\n                    self.onError(error);\n                },\n                next(value) {\n                    originalObserver.next(value);\n                    self.onNext(value);\n                } });\n            try {\n                this.initHasRun = true;\n                return init(observer);\n            }\n            catch (error) {\n                observer.error(error);\n            }\n        });\n        this.initHasRun = false;\n        this.fulfillmentCallbacks = [];\n        this.rejectionCallbacks = [];\n        this.firstValueSet = false;\n        this.state = \"pending\";\n    }\n    onNext(value) {\n        if (!this.firstValueSet) {\n            this.firstValue = value;\n            this.firstValueSet = true;\n        }\n    }\n    onError(error) {\n        this.state = \"rejected\";\n        this.rejection = error;\n        for (const onRejected of this.rejectionCallbacks) {\n            // Promisifying the call to turn errors into unhandled promise rejections\n            // instead of them failing sync and cancelling the iteration\n            runDeferred(() => onRejected(error));\n        }\n    }\n    onCompletion() {\n        this.state = \"fulfilled\";\n        for (const onFulfilled of this.fulfillmentCallbacks) {\n            // Promisifying the call to turn errors into unhandled promise rejections\n            // instead of them failing sync and cancelling the iteration\n            runDeferred(() => onFulfilled(this.firstValue));\n        }\n    }\n    then(onFulfilledRaw, onRejectedRaw) {\n        const onFulfilled = onFulfilledRaw || returnInput;\n        const onRejected = onRejectedRaw || fail;\n        let onRejectedCalled = false;\n        return new Promise((resolve, reject) => {\n            const rejectionCallback = (error) => {\n                if (onRejectedCalled)\n                    return;\n                onRejectedCalled = true;\n                try {\n                    resolve(onRejected(error));\n                }\n                catch (anotherError) {\n                    reject(anotherError);\n                }\n            };\n            const fulfillmentCallback = (value) => {\n                try {\n                    resolve(onFulfilled(value));\n                }\n                catch (error) {\n                    rejectionCallback(error);\n                }\n            };\n            if (!this.initHasRun) {\n                this.subscribe({ error: rejectionCallback });\n            }\n            if (this.state === \"fulfilled\") {\n                return resolve(onFulfilled(this.firstValue));\n            }\n            if (this.state === \"rejected\") {\n                onRejectedCalled = true;\n                return resolve(onRejected(this.rejection));\n            }\n            this.fulfillmentCallbacks.push(fulfillmentCallback);\n            this.rejectionCallbacks.push(rejectionCallback);\n        });\n    }\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onCompleted) {\n        const handler = onCompleted || doNothing;\n        return this.then((value) => {\n            handler();\n            return value;\n        }, () => handler());\n    }\n    static from(thing) {\n        if (isThenable(thing)) {\n            return new ObservablePromise(observer => {\n                const onFulfilled = (value) => {\n                    observer.next(value);\n                    observer.complete();\n                };\n                const onRejected = (error) => {\n                    observer.error(error);\n                };\n                thing.then(onFulfilled, onRejected);\n            });\n        }\n        else {\n            return super.from(thing);\n        }\n    }\n}\nexports.ObservablePromise = ObservablePromise;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/observable-promise.js?");

/***/ }),

/***/ "./node_modules/threads/dist/ponyfills.js":
/*!************************************************!*\
  !*** ./node_modules/threads/dist/ponyfills.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Based on <https://github.com/es-shims/Promise.allSettled/blob/master/implementation.js>\nfunction allSettled(values) {\n    return Promise.all(values.map(item => {\n        const onFulfill = (value) => {\n            return { status: 'fulfilled', value };\n        };\n        const onReject = (reason) => {\n            return { status: 'rejected', reason };\n        };\n        const itemPromise = Promise.resolve(item);\n        try {\n            return itemPromise.then(onFulfill, onReject);\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }));\n}\nexports.allSettled = allSettled;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/ponyfills.js?");

/***/ }),

/***/ "./node_modules/threads/dist/promise.js":
/*!**********************************************!*\
  !*** ./node_modules/threads/dist/promise.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst doNothing = () => undefined;\n/**\n * Creates a new promise and exposes its resolver function.\n * Use with care!\n */\nfunction createPromiseWithResolver() {\n    let alreadyResolved = false;\n    let resolvedTo;\n    let resolver = doNothing;\n    const promise = new Promise(resolve => {\n        if (alreadyResolved) {\n            resolve(resolvedTo);\n        }\n        else {\n            resolver = resolve;\n        }\n    });\n    const exposedResolver = (value) => {\n        alreadyResolved = true;\n        resolvedTo = value;\n        resolver();\n    };\n    return [promise, exposedResolver];\n}\nexports.createPromiseWithResolver = createPromiseWithResolver;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/promise.js?");

/***/ }),

/***/ "./node_modules/threads/dist/serializers.js":
/*!**************************************************!*\
  !*** ./node_modules/threads/dist/serializers.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction extendSerializer(extend, implementation) {\n    const fallbackDeserializer = extend.deserialize.bind(extend);\n    const fallbackSerializer = extend.serialize.bind(extend);\n    return {\n        deserialize(message) {\n            return implementation.deserialize(message, fallbackDeserializer);\n        },\n        serialize(input) {\n            return implementation.serialize(input, fallbackSerializer);\n        }\n    };\n}\nexports.extendSerializer = extendSerializer;\nconst DefaultErrorSerializer = {\n    deserialize(message) {\n        return Object.assign(Error(message.message), {\n            name: message.name,\n            stack: message.stack\n        });\n    },\n    serialize(error) {\n        return {\n            __error_marker: \"$$error\",\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        };\n    }\n};\nconst isSerializedError = (thing) => thing && typeof thing === \"object\" && \"__error_marker\" in thing && thing.__error_marker === \"$$error\";\nexports.DefaultSerializer = {\n    deserialize(message) {\n        if (isSerializedError(message)) {\n            return DefaultErrorSerializer.deserialize(message);\n        }\n        else {\n            return message;\n        }\n    },\n    serialize(input) {\n        if (input instanceof Error) {\n            return DefaultErrorSerializer.serialize(input);\n        }\n        else {\n            return input;\n        }\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/serializers.js?");

/***/ }),

/***/ "./node_modules/threads/dist/symbols.js":
/*!**********************************************!*\
  !*** ./node_modules/threads/dist/symbols.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.$errors = Symbol(\"thread.errors\");\nexports.$events = Symbol(\"thread.events\");\nexports.$terminate = Symbol(\"thread.terminate\");\nexports.$transferable = Symbol(\"thread.transferable\");\nexports.$worker = Symbol(\"thread.worker\");\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/symbols.js?");

/***/ }),

/***/ "./node_modules/threads/dist/transferable.js":
/*!***************************************************!*\
  !*** ./node_modules/threads/dist/transferable.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"./node_modules/threads/dist/symbols.js\");\nfunction isTransferable(thing) {\n    if (!thing || typeof thing !== \"object\")\n        return false;\n    // Don't check too thoroughly, since the list of transferable things in JS might grow over time\n    return true;\n}\nfunction isTransferDescriptor(thing) {\n    return thing && typeof thing === \"object\" && thing[symbols_1.$transferable];\n}\nexports.isTransferDescriptor = isTransferDescriptor;\nfunction Transfer(payload, transferables) {\n    if (!transferables) {\n        if (!isTransferable(payload))\n            throw Error();\n        transferables = [payload];\n    }\n    return {\n        [symbols_1.$transferable]: true,\n        send: payload,\n        transferables\n    };\n}\nexports.Transfer = Transfer;\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/transferable.js?");

/***/ }),

/***/ "./node_modules/threads/dist/types/master.js":
/*!***************************************************!*\
  !*** ./node_modules/threads/dist/types/master.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/// <reference lib=\"dom\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"./node_modules/threads/dist/symbols.js\");\n/** Event as emitted by worker thread. Subscribe to using `Thread.events(thread)`. */\nvar WorkerEventType;\n(function (WorkerEventType) {\n    WorkerEventType[\"internalError\"] = \"internalError\";\n    WorkerEventType[\"message\"] = \"message\";\n    WorkerEventType[\"termination\"] = \"termination\";\n})(WorkerEventType = exports.WorkerEventType || (exports.WorkerEventType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/types/master.js?");

/***/ }),

/***/ "./node_modules/threads/dist/types/messages.js":
/*!*****************************************************!*\
  !*** ./node_modules/threads/dist/types/messages.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/////////////////////////////\n// Messages sent by master:\nvar MasterMessageType;\n(function (MasterMessageType) {\n    MasterMessageType[\"run\"] = \"run\";\n})(MasterMessageType = exports.MasterMessageType || (exports.MasterMessageType = {}));\n////////////////////////////\n// Messages sent by worker:\nvar WorkerMessageType;\n(function (WorkerMessageType) {\n    WorkerMessageType[\"error\"] = \"error\";\n    WorkerMessageType[\"init\"] = \"init\";\n    WorkerMessageType[\"result\"] = \"result\";\n    WorkerMessageType[\"running\"] = \"running\";\n    WorkerMessageType[\"uncaughtError\"] = \"uncaughtError\";\n})(WorkerMessageType = exports.WorkerMessageType || (exports.WorkerMessageType = {}));\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/types/messages.js?");

/***/ }),

/***/ "./node_modules/threads/dist/worker/implementation.browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/threads/dist/worker/implementation.browser.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isWorkerRuntime = function isWorkerRuntime() {\n    return typeof self !== \"undefined\" && self.postMessage ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\nexports.default = {\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n};\n\n\n//# sourceURL=webpack:///./node_modules/threads/dist/worker/implementation.browser.js?");

/***/ }),

/***/ "./node_modules/threads/dist/worker/index.js":
/*!***************************************************!*\
  !*** ./node_modules/threads/dist/worker/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_observable_1 = __importDefault(__webpack_require__(/*! is-observable */ \"./node_modules/is-observable/index.js\"));\nconst common_1 = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist/common.js\");\nconst transferable_1 = __webpack_require__(/*! ../transferable */ \"./node_modules/threads/dist/transferable.js\");\nconst messages_1 = __webpack_require__(/*! ../types/messages */ \"./node_modules/threads/dist/types/messages.js\");\nconst implementation_1 = __importDefault(__webpack_require__(/*! ./implementation */ \"./node_modules/threads/dist/worker/implementation.browser.js\"));\nvar common_2 = __webpack_require__(/*! ../common */ \"./node_modules/threads/dist/common.js\");\nexports.registerSerializer = common_2.registerSerializer;\nvar transferable_2 = __webpack_require__(/*! ../transferable */ \"./node_modules/threads/dist/transferable.js\");\nexports.Transfer = transferable_2.Transfer;\nlet exposeCalled = false;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serialize(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: messages_1.WorkerMessageType.uncaughtError,\n            error: common_1.serialize(error)\n        };\n        implementation_1.default.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            syncResult.subscribe(value => postJobResultMessage(jobUID, false, common_1.serialize(value)), error => postJobErrorMessage(jobUID, common_1.serialize(error)), () => postJobResultMessage(jobUID, true));\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, common_1.serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(common_1.deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(common_1.deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/threads/dist/worker/index.js?");

/***/ }),

/***/ "./node_modules/threads/node_modules/debug/src/browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/threads/node_modules/debug/src/browser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\nfunction log(...args) {\n\t// This hackery is required for IE8/9, where\n\t// the `console.log` function doesn't have 'apply'\n\treturn typeof console === 'object' &&\n\t\tconsole.log &&\n\t\tconsole.log(...args);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/threads/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/threads/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/threads/node_modules/debug/src/common.js":
/*!***************************************************************!*\
  !*** ./node_modules/threads/node_modules/debug/src/common.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack:///./node_modules/threads/node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/timsort/build/timsort.js":
/*!***********************************************!*\
  !*** ./node_modules/timsort/build/timsort.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/****\n * The MIT License\n *\n * Copyright (c) 2015 Marco Ziccardi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n ****/\n(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.sort = sort;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var DEFAULT_MIN_MERGE = 32;\n\n  var DEFAULT_MIN_GALLOPING = 7;\n\n  var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n  var POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n\n  function log10(x) {\n    if (x < 1e5) {\n      if (x < 1e2) {\n        return x < 1e1 ? 0 : 1;\n      }\n\n      if (x < 1e4) {\n        return x < 1e3 ? 2 : 3;\n      }\n\n      return 4;\n    }\n\n    if (x < 1e7) {\n      return x < 1e6 ? 5 : 6;\n    }\n\n    if (x < 1e9) {\n      return x < 1e8 ? 7 : 8;\n    }\n\n    return 9;\n  }\n\n  function alphabeticalCompare(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    if (~ ~a === a && ~ ~b === b) {\n      if (a === 0 || b === 0) {\n        return a < b ? -1 : 1;\n      }\n\n      if (a < 0 || b < 0) {\n        if (b >= 0) {\n          return -1;\n        }\n\n        if (a >= 0) {\n          return 1;\n        }\n\n        a = -a;\n        b = -b;\n      }\n\n      var al = log10(a);\n      var bl = log10(b);\n\n      var t = 0;\n\n      if (al < bl) {\n        a *= POWERS_OF_TEN[bl - al - 1];\n        b /= 10;\n        t = -1;\n      } else if (al > bl) {\n        b *= POWERS_OF_TEN[al - bl - 1];\n        a /= 10;\n        t = 1;\n      }\n\n      if (a === b) {\n        return t;\n      }\n\n      return a < b ? -1 : 1;\n    }\n\n    var aStr = String(a);\n    var bStr = String(b);\n\n    if (aStr === bStr) {\n      return 0;\n    }\n\n    return aStr < bStr ? -1 : 1;\n  }\n\n  function minRunLength(n) {\n    var r = 0;\n\n    while (n >= DEFAULT_MIN_MERGE) {\n      r |= n & 1;\n      n >>= 1;\n    }\n\n    return n + r;\n  }\n\n  function makeAscendingRun(array, lo, hi, compare) {\n    var runHi = lo + 1;\n\n    if (runHi === hi) {\n      return 1;\n    }\n\n    if (compare(array[runHi++], array[lo]) < 0) {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n        runHi++;\n      }\n\n      reverseRun(array, lo, runHi);\n    } else {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n        runHi++;\n      }\n    }\n\n    return runHi - lo;\n  }\n\n  function reverseRun(array, lo, hi) {\n    hi--;\n\n    while (lo < hi) {\n      var t = array[lo];\n      array[lo++] = array[hi];\n      array[hi--] = t;\n    }\n  }\n\n  function binaryInsertionSort(array, lo, hi, start, compare) {\n    if (start === lo) {\n      start++;\n    }\n\n    for (; start < hi; start++) {\n      var pivot = array[start];\n\n      var left = lo;\n      var right = start;\n\n      while (left < right) {\n        var mid = left + right >>> 1;\n\n        if (compare(pivot, array[mid]) < 0) {\n          right = mid;\n        } else {\n          left = mid + 1;\n        }\n      }\n\n      var n = start - left;\n\n      switch (n) {\n        case 3:\n          array[left + 3] = array[left + 2];\n\n        case 2:\n          array[left + 2] = array[left + 1];\n\n        case 1:\n          array[left + 1] = array[left];\n          break;\n        default:\n          while (n > 0) {\n            array[left + n] = array[left + n - 1];\n            n--;\n          }\n      }\n\n      array[left] = pivot;\n    }\n  }\n\n  function gallopLeft(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) > 0) {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    } else {\n      maxOffset = hint + 1;\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    }\n\n    lastOffset++;\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) > 0) {\n        lastOffset = m + 1;\n      } else {\n        offset = m;\n      }\n    }\n    return offset;\n  }\n\n  function gallopRight(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) < 0) {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    } else {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) < 0) {\n        offset = m;\n      } else {\n        lastOffset = m + 1;\n      }\n    }\n\n    return offset;\n  }\n\n  var TimSort = (function () {\n    function TimSort(array, compare) {\n      _classCallCheck(this, TimSort);\n\n      this.array = null;\n      this.compare = null;\n      this.minGallop = DEFAULT_MIN_GALLOPING;\n      this.length = 0;\n      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n      this.stackLength = 0;\n      this.runStart = null;\n      this.runLength = null;\n      this.stackSize = 0;\n\n      this.array = array;\n      this.compare = compare;\n\n      this.length = array.length;\n\n      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n        this.tmpStorageLength = this.length >>> 1;\n      }\n\n      this.tmp = new Array(this.tmpStorageLength);\n\n      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;\n\n      this.runStart = new Array(this.stackLength);\n      this.runLength = new Array(this.stackLength);\n    }\n\n    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {\n      this.runStart[this.stackSize] = runStart;\n      this.runLength[this.stackSize] = runLength;\n      this.stackSize += 1;\n    };\n\n    TimSort.prototype.mergeRuns = function mergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {\n\n          if (this.runLength[n - 1] < this.runLength[n + 1]) {\n            n--;\n          }\n        } else if (this.runLength[n] > this.runLength[n + 1]) {\n          break;\n        }\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\n          n--;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.mergeAt = function mergeAt(i) {\n      var compare = this.compare;\n      var array = this.array;\n\n      var start1 = this.runStart[i];\n      var length1 = this.runLength[i];\n      var start2 = this.runStart[i + 1];\n      var length2 = this.runLength[i + 1];\n\n      this.runLength[i] = length1 + length2;\n\n      if (i === this.stackSize - 3) {\n        this.runStart[i + 1] = this.runStart[i + 2];\n        this.runLength[i + 1] = this.runLength[i + 2];\n      }\n\n      this.stackSize--;\n\n      var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n      start1 += k;\n      length1 -= k;\n\n      if (length1 === 0) {\n        return;\n      }\n\n      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n      if (length2 === 0) {\n        return;\n      }\n\n      if (length1 <= length2) {\n        this.mergeLow(start1, length1, start2, length2);\n      } else {\n        this.mergeHigh(start1, length1, start2, length2);\n      }\n    };\n\n    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {\n\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length1; i++) {\n        tmp[i] = array[start1 + i];\n      }\n\n      var cursor1 = 0;\n      var cursor2 = start2;\n      var dest = start1;\n\n      array[dest++] = array[cursor2++];\n\n      if (--length2 === 0) {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n        return;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(array[cursor2], tmp[cursor1]) < 0) {\n            array[dest++] = array[cursor2++];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest++] = tmp[cursor1++];\n            count1++;\n            count2 = 0;\n            if (--length1 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n          if (count1 !== 0) {\n            for (i = 0; i < count1; i++) {\n              array[dest + i] = tmp[cursor1 + i];\n            }\n\n            dest += count1;\n            cursor1 += count1;\n            length1 -= count1;\n            if (length1 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = array[cursor2++];\n\n          if (--length2 === 0) {\n            exit = true;\n            break;\n          }\n\n          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n          if (count2 !== 0) {\n            for (i = 0; i < count2; i++) {\n              array[dest + i] = array[cursor2 + i];\n            }\n\n            dest += count2;\n            cursor2 += count2;\n            length2 -= count2;\n\n            if (length2 === 0) {\n              exit = true;\n              break;\n            }\n          }\n          array[dest++] = tmp[cursor1++];\n\n          if (--length1 === 1) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n      } else if (length1 === 0) {\n        throw new Error('mergeLow preconditions were not respected');\n      } else {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n      }\n    };\n\n    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length2; i++) {\n        tmp[i] = array[start2 + i];\n      }\n\n      var cursor1 = start1 + length1 - 1;\n      var cursor2 = length2 - 1;\n      var dest = start2 + length2 - 1;\n      var customCursor = 0;\n      var customDest = 0;\n\n      array[dest--] = array[cursor1--];\n\n      if (--length1 === 0) {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n\n        return;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(tmp[cursor2], array[cursor1]) < 0) {\n            array[dest--] = array[cursor1--];\n            count1++;\n            count2 = 0;\n            if (--length1 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest--] = tmp[cursor2--];\n            count2++;\n            count1 = 0;\n            if (--length2 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n          if (count1 !== 0) {\n            dest -= count1;\n            cursor1 -= count1;\n            length1 -= count1;\n            customDest = dest + 1;\n            customCursor = cursor1 + 1;\n\n            for (i = count1 - 1; i >= 0; i--) {\n              array[customDest + i] = array[customCursor + i];\n            }\n\n            if (length1 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = tmp[cursor2--];\n\n          if (--length2 === 1) {\n            exit = true;\n            break;\n          }\n\n          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n          if (count2 !== 0) {\n            dest -= count2;\n            cursor2 -= count2;\n            length2 -= count2;\n            customDest = dest + 1;\n            customCursor = cursor2 + 1;\n\n            for (i = 0; i < count2; i++) {\n              array[customDest + i] = tmp[customCursor + i];\n            }\n\n            if (length2 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = array[cursor1--];\n\n          if (--length1 === 0) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n      } else if (length2 === 0) {\n        throw new Error('mergeHigh preconditions were not respected');\n      } else {\n        customCursor = dest - (length2 - 1);\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n      }\n    };\n\n    return TimSort;\n  })();\n\n  function sort(array, compare, lo, hi) {\n    if (!Array.isArray(array)) {\n      throw new TypeError('Can only sort arrays');\n    }\n\n    if (!compare) {\n      compare = alphabeticalCompare;\n    } else if (typeof compare !== 'function') {\n      hi = lo;\n      lo = compare;\n      compare = alphabeticalCompare;\n    }\n\n    if (!lo) {\n      lo = 0;\n    }\n    if (!hi) {\n      hi = array.length;\n    }\n\n    var remaining = hi - lo;\n\n    if (remaining < 2) {\n      return;\n    }\n\n    var runLength = 0;\n\n    if (remaining < DEFAULT_MIN_MERGE) {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n      return;\n    }\n\n    var ts = new TimSort(array, compare);\n\n    var minRun = minRunLength(remaining);\n\n    do {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      if (runLength < minRun) {\n        var force = remaining;\n        if (force > minRun) {\n          force = minRun;\n        }\n\n        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n        runLength = force;\n      }\n\n      ts.pushRun(lo, runLength);\n      ts.mergeRuns();\n\n      remaining -= runLength;\n      lo += runLength;\n    } while (remaining !== 0);\n\n    ts.forceMergeRuns();\n  }\n});\n\n\n//# sourceURL=webpack:///./node_modules/timsort/build/timsort.js?");

/***/ }),

/***/ "./node_modules/timsort/index.js":
/*!***************************************!*\
  !*** ./node_modules/timsort/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./build/timsort.js */ \"./node_modules/timsort/build/timsort.js\");\n\n//# sourceURL=webpack:///./node_modules/timsort/index.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ })

/******/ });